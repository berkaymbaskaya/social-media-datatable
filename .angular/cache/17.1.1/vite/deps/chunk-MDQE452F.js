import {
  CollectionNestedOption,
  DxTemplateHost,
  NestedOption,
  NestedOptionHost,
  extractTemplate
} from "./chunk-GBNZWX6Z.js";
import {
  DOCUMENT
} from "./chunk-WUMLRFIP.js";
import {
  Component,
  ContentChildren,
  ElementRef,
  Host,
  Inject,
  Input,
  NgModule,
  Output,
  Renderer2,
  SkipSelf,
  forwardRef,
  setClassMetadata,
  ɵɵInheritDefinitionFeature,
  ɵɵProvidersFeature,
  ɵɵcontentQuery,
  ɵɵdefineComponent,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdirectiveInject,
  ɵɵgetInheritedFactory,
  ɵɵloadQuery,
  ɵɵprojection,
  ɵɵprojectionDef,
  ɵɵqueryRefresh,
  ɵɵsetNgModuleScope
} from "./chunk-CWIRLZDS.js";

// node_modules/devextreme-angular/fesm2015/devextreme-angular-ui-nested.js
var DxoAdapterComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get applyValidationResults() {
    return this._getOption("applyValidationResults");
  }
  set applyValidationResults(value) {
    this._setOption("applyValidationResults", value);
  }
  get bypass() {
    return this._getOption("bypass");
  }
  set bypass(value) {
    this._setOption("bypass", value);
  }
  get focus() {
    return this._getOption("focus");
  }
  set focus(value) {
    this._setOption("focus", value);
  }
  get getValue() {
    return this._getOption("getValue");
  }
  set getValue(value) {
    this._setOption("getValue", value);
  }
  get reset() {
    return this._getOption("reset");
  }
  set reset(value) {
    this._setOption("reset", value);
  }
  get validationRequestsCallbacks() {
    return this._getOption("validationRequestsCallbacks");
  }
  set validationRequestsCallbacks(value) {
    this._setOption("validationRequestsCallbacks", value);
  }
  get _optionPath() {
    return "adapter";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoAdapterComponent.ɵfac = function DxoAdapterComponent_Factory(t) {
  return new (t || DxoAdapterComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoAdapterComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoAdapterComponent, selectors: [["dxo-adapter"]], inputs: { applyValidationResults: "applyValidationResults", bypass: "bypass", focus: "focus", getValue: "getValue", reset: "reset", validationRequestsCallbacks: "validationRequestsCallbacks" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoAdapterComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAdapterComponent, [{
    type: Component,
    args: [{
      selector: "dxo-adapter",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { applyValidationResults: [{
    type: Input
  }], bypass: [{
    type: Input
  }], focus: [{
    type: Input
  }], getValue: [{
    type: Input
  }], reset: [{
    type: Input
  }], validationRequestsCallbacks: [{
    type: Input
  }] });
})();
var DxoAdapterModule = class {
};
DxoAdapterModule.ɵfac = function DxoAdapterModule_Factory(t) {
  return new (t || DxoAdapterModule)();
};
DxoAdapterModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoAdapterModule });
DxoAdapterModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAdapterModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoAdapterComponent
      ],
      exports: [
        DxoAdapterComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoAdapterModule, { declarations: [DxoAdapterComponent], exports: [DxoAdapterComponent] });
})();
var DxoAdaptiveLayoutComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get keepLabels() {
    return this._getOption("keepLabels");
  }
  set keepLabels(value) {
    this._setOption("keepLabels", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "adaptiveLayout";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoAdaptiveLayoutComponent.ɵfac = function DxoAdaptiveLayoutComponent_Factory(t) {
  return new (t || DxoAdaptiveLayoutComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoAdaptiveLayoutComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoAdaptiveLayoutComponent, selectors: [["dxo-adaptive-layout"]], inputs: { height: "height", keepLabels: "keepLabels", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoAdaptiveLayoutComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAdaptiveLayoutComponent, [{
    type: Component,
    args: [{
      selector: "dxo-adaptive-layout",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { height: [{
    type: Input
  }], keepLabels: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoAdaptiveLayoutModule = class {
};
DxoAdaptiveLayoutModule.ɵfac = function DxoAdaptiveLayoutModule_Factory(t) {
  return new (t || DxoAdaptiveLayoutModule)();
};
DxoAdaptiveLayoutModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoAdaptiveLayoutModule });
DxoAdaptiveLayoutModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAdaptiveLayoutModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoAdaptiveLayoutComponent
      ],
      exports: [
        DxoAdaptiveLayoutComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoAdaptiveLayoutModule, { declarations: [DxoAdaptiveLayoutComponent], exports: [DxoAdaptiveLayoutComponent] });
})();
var DxoAggregationIntervalComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get days() {
    return this._getOption("days");
  }
  set days(value) {
    this._setOption("days", value);
  }
  get hours() {
    return this._getOption("hours");
  }
  set hours(value) {
    this._setOption("hours", value);
  }
  get milliseconds() {
    return this._getOption("milliseconds");
  }
  set milliseconds(value) {
    this._setOption("milliseconds", value);
  }
  get minutes() {
    return this._getOption("minutes");
  }
  set minutes(value) {
    this._setOption("minutes", value);
  }
  get months() {
    return this._getOption("months");
  }
  set months(value) {
    this._setOption("months", value);
  }
  get quarters() {
    return this._getOption("quarters");
  }
  set quarters(value) {
    this._setOption("quarters", value);
  }
  get seconds() {
    return this._getOption("seconds");
  }
  set seconds(value) {
    this._setOption("seconds", value);
  }
  get weeks() {
    return this._getOption("weeks");
  }
  set weeks(value) {
    this._setOption("weeks", value);
  }
  get years() {
    return this._getOption("years");
  }
  set years(value) {
    this._setOption("years", value);
  }
  get _optionPath() {
    return "aggregationInterval";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoAggregationIntervalComponent.ɵfac = function DxoAggregationIntervalComponent_Factory(t) {
  return new (t || DxoAggregationIntervalComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoAggregationIntervalComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoAggregationIntervalComponent, selectors: [["dxo-aggregation-interval"]], inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoAggregationIntervalComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAggregationIntervalComponent, [{
    type: Component,
    args: [{
      selector: "dxo-aggregation-interval",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { days: [{
    type: Input
  }], hours: [{
    type: Input
  }], milliseconds: [{
    type: Input
  }], minutes: [{
    type: Input
  }], months: [{
    type: Input
  }], quarters: [{
    type: Input
  }], seconds: [{
    type: Input
  }], weeks: [{
    type: Input
  }], years: [{
    type: Input
  }] });
})();
var DxoAggregationIntervalModule = class {
};
DxoAggregationIntervalModule.ɵfac = function DxoAggregationIntervalModule_Factory(t) {
  return new (t || DxoAggregationIntervalModule)();
};
DxoAggregationIntervalModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoAggregationIntervalModule });
DxoAggregationIntervalModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAggregationIntervalModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoAggregationIntervalComponent
      ],
      exports: [
        DxoAggregationIntervalComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoAggregationIntervalModule, { declarations: [DxoAggregationIntervalComponent], exports: [DxoAggregationIntervalComponent] });
})();
var DxoAggregationComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get calculate() {
    return this._getOption("calculate");
  }
  set calculate(value) {
    this._setOption("calculate", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get method() {
    return this._getOption("method");
  }
  set method(value) {
    this._setOption("method", value);
  }
  get _optionPath() {
    return "aggregation";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoAggregationComponent.ɵfac = function DxoAggregationComponent_Factory(t) {
  return new (t || DxoAggregationComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoAggregationComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoAggregationComponent, selectors: [["dxo-aggregation"]], inputs: { calculate: "calculate", enabled: "enabled", method: "method" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoAggregationComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAggregationComponent, [{
    type: Component,
    args: [{
      selector: "dxo-aggregation",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { calculate: [{
    type: Input
  }], enabled: [{
    type: Input
  }], method: [{
    type: Input
  }] });
})();
var DxoAggregationModule = class {
};
DxoAggregationModule.ɵfac = function DxoAggregationModule_Factory(t) {
  return new (t || DxoAggregationModule)();
};
DxoAggregationModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoAggregationModule });
DxoAggregationModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAggregationModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoAggregationComponent
      ],
      exports: [
        DxoAggregationComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoAggregationModule, { declarations: [DxoAggregationComponent], exports: [DxoAggregationComponent] });
})();
var DxoAnimationConfig = class extends NestedOption {
  get hide() {
    return this._getOption("hide");
  }
  set hide(value) {
    this._setOption("hide", value);
  }
  get show() {
    return this._getOption("show");
  }
  set show(value) {
    this._setOption("show", value);
  }
  get duration() {
    return this._getOption("duration");
  }
  set duration(value) {
    this._setOption("duration", value);
  }
  get easing() {
    return this._getOption("easing");
  }
  set easing(value) {
    this._setOption("easing", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get maxPointCountSupported() {
    return this._getOption("maxPointCountSupported");
  }
  set maxPointCountSupported(value) {
    this._setOption("maxPointCountSupported", value);
  }
  get complete() {
    return this._getOption("complete");
  }
  set complete(value) {
    this._setOption("complete", value);
  }
  get delay() {
    return this._getOption("delay");
  }
  set delay(value) {
    this._setOption("delay", value);
  }
  get direction() {
    return this._getOption("direction");
  }
  set direction(value) {
    this._setOption("direction", value);
  }
  get from() {
    return this._getOption("from");
  }
  set from(value) {
    this._setOption("from", value);
  }
  get staggerDelay() {
    return this._getOption("staggerDelay");
  }
  set staggerDelay(value) {
    this._setOption("staggerDelay", value);
  }
  get start() {
    return this._getOption("start");
  }
  set start(value) {
    this._setOption("start", value);
  }
  get to() {
    return this._getOption("to");
  }
  set to(value) {
    this._setOption("to", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
};
DxoAnimationConfig.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoAnimationConfig_BaseFactory;
  return function DxoAnimationConfig_Factory(t) {
    return (ɵDxoAnimationConfig_BaseFactory || (ɵDxoAnimationConfig_BaseFactory = ɵɵgetInheritedFactory(DxoAnimationConfig)))(t || DxoAnimationConfig);
  };
}();
DxoAnimationConfig.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoAnimationConfig, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoAnimationConfig_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAnimationConfig, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoAnimationComponent = class extends DxoAnimationConfig {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "animation";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoAnimationComponent.ɵfac = function DxoAnimationComponent_Factory(t) {
  return new (t || DxoAnimationComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoAnimationComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoAnimationComponent, selectors: [["dxo-animation"]], inputs: { hide: "hide", show: "show", duration: "duration", easing: "easing", enabled: "enabled", maxPointCountSupported: "maxPointCountSupported", complete: "complete", delay: "delay", direction: "direction", from: "from", staggerDelay: "staggerDelay", start: "start", to: "to", type: "type" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoAnimationComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAnimationComponent, [{
    type: Component,
    args: [{
      selector: "dxo-animation",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "hide",
        "show",
        "duration",
        "easing",
        "enabled",
        "maxPointCountSupported",
        "complete",
        "delay",
        "direction",
        "from",
        "staggerDelay",
        "start",
        "to",
        "type"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoAnimationModule = class {
};
DxoAnimationModule.ɵfac = function DxoAnimationModule_Factory(t) {
  return new (t || DxoAnimationModule)();
};
DxoAnimationModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoAnimationModule });
DxoAnimationModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAnimationModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoAnimationComponent
      ],
      exports: [
        DxoAnimationComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoAnimationModule, { declarations: [DxoAnimationComponent], exports: [DxoAnimationComponent] });
})();
var DxiChartAnnotationConfig = class extends CollectionNestedOption {
  get allowDragging() {
    return this._getOption("allowDragging");
  }
  set allowDragging(value) {
    this._setOption("allowDragging", value);
  }
  get argument() {
    return this._getOption("argument");
  }
  set argument(value) {
    this._setOption("argument", value);
  }
  get arrowLength() {
    return this._getOption("arrowLength");
  }
  set arrowLength(value) {
    this._setOption("arrowLength", value);
  }
  get arrowWidth() {
    return this._getOption("arrowWidth");
  }
  set arrowWidth(value) {
    this._setOption("arrowWidth", value);
  }
  get axis() {
    return this._getOption("axis");
  }
  set axis(value) {
    this._setOption("axis", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get customizeTooltip() {
    return this._getOption("customizeTooltip");
  }
  set customizeTooltip(value) {
    this._setOption("customizeTooltip", value);
  }
  get data() {
    return this._getOption("data");
  }
  set data(value) {
    this._setOption("data", value);
  }
  get description() {
    return this._getOption("description");
  }
  set description(value) {
    this._setOption("description", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get image() {
    return this._getOption("image");
  }
  set image(value) {
    this._setOption("image", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get offsetX() {
    return this._getOption("offsetX");
  }
  set offsetX(value) {
    this._setOption("offsetX", value);
  }
  get offsetY() {
    return this._getOption("offsetY");
  }
  set offsetY(value) {
    this._setOption("offsetY", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get series() {
    return this._getOption("series");
  }
  set series(value) {
    this._setOption("series", value);
  }
  get shadow() {
    return this._getOption("shadow");
  }
  set shadow(value) {
    this._setOption("shadow", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get textOverflow() {
    return this._getOption("textOverflow");
  }
  set textOverflow(value) {
    this._setOption("textOverflow", value);
  }
  get tooltipEnabled() {
    return this._getOption("tooltipEnabled");
  }
  set tooltipEnabled(value) {
    this._setOption("tooltipEnabled", value);
  }
  get tooltipTemplate() {
    return this._getOption("tooltipTemplate");
  }
  set tooltipTemplate(value) {
    this._setOption("tooltipTemplate", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get wordWrap() {
    return this._getOption("wordWrap");
  }
  set wordWrap(value) {
    this._setOption("wordWrap", value);
  }
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get angle() {
    return this._getOption("angle");
  }
  set angle(value) {
    this._setOption("angle", value);
  }
  get radius() {
    return this._getOption("radius");
  }
  set radius(value) {
    this._setOption("radius", value);
  }
  get coordinates() {
    return this._getOption("coordinates");
  }
  set coordinates(value) {
    this._setOption("coordinates", value);
  }
};
DxiChartAnnotationConfig.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxiChartAnnotationConfig_BaseFactory;
  return function DxiChartAnnotationConfig_Factory(t) {
    return (ɵDxiChartAnnotationConfig_BaseFactory || (ɵDxiChartAnnotationConfig_BaseFactory = ɵɵgetInheritedFactory(DxiChartAnnotationConfig)))(t || DxiChartAnnotationConfig);
  };
}();
DxiChartAnnotationConfig.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiChartAnnotationConfig, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiChartAnnotationConfig_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiChartAnnotationConfig, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiAnnotationComponent = class extends DxiChartAnnotationConfig {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "annotations";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiAnnotationComponent.ɵfac = function DxiAnnotationComponent_Factory(t) {
  return new (t || DxiAnnotationComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiAnnotationComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiAnnotationComponent, selectors: [["dxi-annotation"]], inputs: { allowDragging: "allowDragging", argument: "argument", arrowLength: "arrowLength", arrowWidth: "arrowWidth", axis: "axis", border: "border", color: "color", customizeTooltip: "customizeTooltip", data: "data", description: "description", font: "font", height: "height", image: "image", name: "name", offsetX: "offsetX", offsetY: "offsetY", opacity: "opacity", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", series: "series", shadow: "shadow", template: "template", text: "text", textOverflow: "textOverflow", tooltipEnabled: "tooltipEnabled", tooltipTemplate: "tooltipTemplate", type: "type", value: "value", width: "width", wordWrap: "wordWrap", x: "x", y: "y", location: "location", angle: "angle", radius: "radius", coordinates: "coordinates" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiAnnotationComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiAnnotationComponent, [{
    type: Component,
    args: [{
      selector: "dxi-annotation",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "allowDragging",
        "argument",
        "arrowLength",
        "arrowWidth",
        "axis",
        "border",
        "color",
        "customizeTooltip",
        "data",
        "description",
        "font",
        "height",
        "image",
        "name",
        "offsetX",
        "offsetY",
        "opacity",
        "paddingLeftRight",
        "paddingTopBottom",
        "series",
        "shadow",
        "template",
        "text",
        "textOverflow",
        "tooltipEnabled",
        "tooltipTemplate",
        "type",
        "value",
        "width",
        "wordWrap",
        "x",
        "y",
        "location",
        "angle",
        "radius",
        "coordinates"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxiAnnotationModule = class {
};
DxiAnnotationModule.ɵfac = function DxiAnnotationModule_Factory(t) {
  return new (t || DxiAnnotationModule)();
};
DxiAnnotationModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiAnnotationModule });
DxiAnnotationModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiAnnotationModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiAnnotationComponent
      ],
      exports: [
        DxiAnnotationComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiAnnotationModule, { declarations: [DxiAnnotationComponent], exports: [DxiAnnotationComponent] });
})();
var DxoApiKeyComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get bing() {
    return this._getOption("bing");
  }
  set bing(value) {
    this._setOption("bing", value);
  }
  get google() {
    return this._getOption("google");
  }
  set google(value) {
    this._setOption("google", value);
  }
  get googleStatic() {
    return this._getOption("googleStatic");
  }
  set googleStatic(value) {
    this._setOption("googleStatic", value);
  }
  get _optionPath() {
    return "apiKey";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoApiKeyComponent.ɵfac = function DxoApiKeyComponent_Factory(t) {
  return new (t || DxoApiKeyComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoApiKeyComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoApiKeyComponent, selectors: [["dxo-api-key"]], inputs: { bing: "bing", google: "google", googleStatic: "googleStatic" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoApiKeyComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoApiKeyComponent, [{
    type: Component,
    args: [{
      selector: "dxo-api-key",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { bing: [{
    type: Input
  }], google: [{
    type: Input
  }], googleStatic: [{
    type: Input
  }] });
})();
var DxoApiKeyModule = class {
};
DxoApiKeyModule.ɵfac = function DxoApiKeyModule_Factory(t) {
  return new (t || DxoApiKeyModule)();
};
DxoApiKeyModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoApiKeyModule });
DxoApiKeyModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoApiKeyModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoApiKeyComponent
      ],
      exports: [
        DxoApiKeyComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoApiKeyModule, { declarations: [DxoApiKeyComponent], exports: [DxoApiKeyComponent] });
})();
var DxoAppointmentDraggingComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get autoScroll() {
    return this._getOption("autoScroll");
  }
  set autoScroll(value) {
    this._setOption("autoScroll", value);
  }
  get data() {
    return this._getOption("data");
  }
  set data(value) {
    this._setOption("data", value);
  }
  get group() {
    return this._getOption("group");
  }
  set group(value) {
    this._setOption("group", value);
  }
  get onAdd() {
    return this._getOption("onAdd");
  }
  set onAdd(value) {
    this._setOption("onAdd", value);
  }
  get onDragEnd() {
    return this._getOption("onDragEnd");
  }
  set onDragEnd(value) {
    this._setOption("onDragEnd", value);
  }
  get onDragMove() {
    return this._getOption("onDragMove");
  }
  set onDragMove(value) {
    this._setOption("onDragMove", value);
  }
  get onDragStart() {
    return this._getOption("onDragStart");
  }
  set onDragStart(value) {
    this._setOption("onDragStart", value);
  }
  get onRemove() {
    return this._getOption("onRemove");
  }
  set onRemove(value) {
    this._setOption("onRemove", value);
  }
  get scrollSensitivity() {
    return this._getOption("scrollSensitivity");
  }
  set scrollSensitivity(value) {
    this._setOption("scrollSensitivity", value);
  }
  get scrollSpeed() {
    return this._getOption("scrollSpeed");
  }
  set scrollSpeed(value) {
    this._setOption("scrollSpeed", value);
  }
  get _optionPath() {
    return "appointmentDragging";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoAppointmentDraggingComponent.ɵfac = function DxoAppointmentDraggingComponent_Factory(t) {
  return new (t || DxoAppointmentDraggingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoAppointmentDraggingComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoAppointmentDraggingComponent, selectors: [["dxo-appointment-dragging"]], inputs: { autoScroll: "autoScroll", data: "data", group: "group", onAdd: "onAdd", onDragEnd: "onDragEnd", onDragMove: "onDragMove", onDragStart: "onDragStart", onRemove: "onRemove", scrollSensitivity: "scrollSensitivity", scrollSpeed: "scrollSpeed" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoAppointmentDraggingComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAppointmentDraggingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-appointment-dragging",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { autoScroll: [{
    type: Input
  }], data: [{
    type: Input
  }], group: [{
    type: Input
  }], onAdd: [{
    type: Input
  }], onDragEnd: [{
    type: Input
  }], onDragMove: [{
    type: Input
  }], onDragStart: [{
    type: Input
  }], onRemove: [{
    type: Input
  }], scrollSensitivity: [{
    type: Input
  }], scrollSpeed: [{
    type: Input
  }] });
})();
var DxoAppointmentDraggingModule = class {
};
DxoAppointmentDraggingModule.ɵfac = function DxoAppointmentDraggingModule_Factory(t) {
  return new (t || DxoAppointmentDraggingModule)();
};
DxoAppointmentDraggingModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoAppointmentDraggingModule });
DxoAppointmentDraggingModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAppointmentDraggingModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoAppointmentDraggingComponent
      ],
      exports: [
        DxoAppointmentDraggingComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoAppointmentDraggingModule, { declarations: [DxoAppointmentDraggingComponent], exports: [DxoAppointmentDraggingComponent] });
})();
var DxoChartCommonSeriesSettings = class extends NestedOption {
  get aggregation() {
    return this._getOption("aggregation");
  }
  set aggregation(value) {
    this._setOption("aggregation", value);
  }
  get area() {
    return this._getOption("area");
  }
  set area(value) {
    this._setOption("area", value);
  }
  get argumentField() {
    return this._getOption("argumentField");
  }
  set argumentField(value) {
    this._setOption("argumentField", value);
  }
  get axis() {
    return this._getOption("axis");
  }
  set axis(value) {
    this._setOption("axis", value);
  }
  get bar() {
    return this._getOption("bar");
  }
  set bar(value) {
    this._setOption("bar", value);
  }
  get barOverlapGroup() {
    return this._getOption("barOverlapGroup");
  }
  set barOverlapGroup(value) {
    this._setOption("barOverlapGroup", value);
  }
  get barPadding() {
    return this._getOption("barPadding");
  }
  set barPadding(value) {
    this._setOption("barPadding", value);
  }
  get barWidth() {
    return this._getOption("barWidth");
  }
  set barWidth(value) {
    this._setOption("barWidth", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get bubble() {
    return this._getOption("bubble");
  }
  set bubble(value) {
    this._setOption("bubble", value);
  }
  get candlestick() {
    return this._getOption("candlestick");
  }
  set candlestick(value) {
    this._setOption("candlestick", value);
  }
  get closeValueField() {
    return this._getOption("closeValueField");
  }
  set closeValueField(value) {
    this._setOption("closeValueField", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get cornerRadius() {
    return this._getOption("cornerRadius");
  }
  set cornerRadius(value) {
    this._setOption("cornerRadius", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get fullstackedarea() {
    return this._getOption("fullstackedarea");
  }
  set fullstackedarea(value) {
    this._setOption("fullstackedarea", value);
  }
  get fullstackedbar() {
    return this._getOption("fullstackedbar");
  }
  set fullstackedbar(value) {
    this._setOption("fullstackedbar", value);
  }
  get fullstackedline() {
    return this._getOption("fullstackedline");
  }
  set fullstackedline(value) {
    this._setOption("fullstackedline", value);
  }
  get fullstackedspline() {
    return this._getOption("fullstackedspline");
  }
  set fullstackedspline(value) {
    this._setOption("fullstackedspline", value);
  }
  get fullstackedsplinearea() {
    return this._getOption("fullstackedsplinearea");
  }
  set fullstackedsplinearea(value) {
    this._setOption("fullstackedsplinearea", value);
  }
  get highValueField() {
    return this._getOption("highValueField");
  }
  set highValueField(value) {
    this._setOption("highValueField", value);
  }
  get hoverMode() {
    return this._getOption("hoverMode");
  }
  set hoverMode(value) {
    this._setOption("hoverMode", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get ignoreEmptyPoints() {
    return this._getOption("ignoreEmptyPoints");
  }
  set ignoreEmptyPoints(value) {
    this._setOption("ignoreEmptyPoints", value);
  }
  get innerColor() {
    return this._getOption("innerColor");
  }
  set innerColor(value) {
    this._setOption("innerColor", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get line() {
    return this._getOption("line");
  }
  set line(value) {
    this._setOption("line", value);
  }
  get lowValueField() {
    return this._getOption("lowValueField");
  }
  set lowValueField(value) {
    this._setOption("lowValueField", value);
  }
  get maxLabelCount() {
    return this._getOption("maxLabelCount");
  }
  set maxLabelCount(value) {
    this._setOption("maxLabelCount", value);
  }
  get minBarSize() {
    return this._getOption("minBarSize");
  }
  set minBarSize(value) {
    this._setOption("minBarSize", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get openValueField() {
    return this._getOption("openValueField");
  }
  set openValueField(value) {
    this._setOption("openValueField", value);
  }
  get pane() {
    return this._getOption("pane");
  }
  set pane(value) {
    this._setOption("pane", value);
  }
  get point() {
    return this._getOption("point");
  }
  set point(value) {
    this._setOption("point", value);
  }
  get rangearea() {
    return this._getOption("rangearea");
  }
  set rangearea(value) {
    this._setOption("rangearea", value);
  }
  get rangebar() {
    return this._getOption("rangebar");
  }
  set rangebar(value) {
    this._setOption("rangebar", value);
  }
  get rangeValue1Field() {
    return this._getOption("rangeValue1Field");
  }
  set rangeValue1Field(value) {
    this._setOption("rangeValue1Field", value);
  }
  get rangeValue2Field() {
    return this._getOption("rangeValue2Field");
  }
  set rangeValue2Field(value) {
    this._setOption("rangeValue2Field", value);
  }
  get reduction() {
    return this._getOption("reduction");
  }
  set reduction(value) {
    this._setOption("reduction", value);
  }
  get scatter() {
    return this._getOption("scatter");
  }
  set scatter(value) {
    this._setOption("scatter", value);
  }
  get selectionMode() {
    return this._getOption("selectionMode");
  }
  set selectionMode(value) {
    this._setOption("selectionMode", value);
  }
  get selectionStyle() {
    return this._getOption("selectionStyle");
  }
  set selectionStyle(value) {
    this._setOption("selectionStyle", value);
  }
  get showInLegend() {
    return this._getOption("showInLegend");
  }
  set showInLegend(value) {
    this._setOption("showInLegend", value);
  }
  get sizeField() {
    return this._getOption("sizeField");
  }
  set sizeField(value) {
    this._setOption("sizeField", value);
  }
  get spline() {
    return this._getOption("spline");
  }
  set spline(value) {
    this._setOption("spline", value);
  }
  get splinearea() {
    return this._getOption("splinearea");
  }
  set splinearea(value) {
    this._setOption("splinearea", value);
  }
  get stack() {
    return this._getOption("stack");
  }
  set stack(value) {
    this._setOption("stack", value);
  }
  get stackedarea() {
    return this._getOption("stackedarea");
  }
  set stackedarea(value) {
    this._setOption("stackedarea", value);
  }
  get stackedbar() {
    return this._getOption("stackedbar");
  }
  set stackedbar(value) {
    this._setOption("stackedbar", value);
  }
  get stackedline() {
    return this._getOption("stackedline");
  }
  set stackedline(value) {
    this._setOption("stackedline", value);
  }
  get stackedspline() {
    return this._getOption("stackedspline");
  }
  set stackedspline(value) {
    this._setOption("stackedspline", value);
  }
  get stackedsplinearea() {
    return this._getOption("stackedsplinearea");
  }
  set stackedsplinearea(value) {
    this._setOption("stackedsplinearea", value);
  }
  get steparea() {
    return this._getOption("steparea");
  }
  set steparea(value) {
    this._setOption("steparea", value);
  }
  get stepline() {
    return this._getOption("stepline");
  }
  set stepline(value) {
    this._setOption("stepline", value);
  }
  get stock() {
    return this._getOption("stock");
  }
  set stock(value) {
    this._setOption("stock", value);
  }
  get tagField() {
    return this._getOption("tagField");
  }
  set tagField(value) {
    this._setOption("tagField", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get valueErrorBar() {
    return this._getOption("valueErrorBar");
  }
  set valueErrorBar(value) {
    this._setOption("valueErrorBar", value);
  }
  get valueField() {
    return this._getOption("valueField");
  }
  set valueField(value) {
    this._setOption("valueField", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get argumentType() {
    return this._getOption("argumentType");
  }
  set argumentType(value) {
    this._setOption("argumentType", value);
  }
  get minSegmentSize() {
    return this._getOption("minSegmentSize");
  }
  set minSegmentSize(value) {
    this._setOption("minSegmentSize", value);
  }
  get smallValuesGrouping() {
    return this._getOption("smallValuesGrouping");
  }
  set smallValuesGrouping(value) {
    this._setOption("smallValuesGrouping", value);
  }
  get closed() {
    return this._getOption("closed");
  }
  set closed(value) {
    this._setOption("closed", value);
  }
};
DxoChartCommonSeriesSettings.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoChartCommonSeriesSettings_BaseFactory;
  return function DxoChartCommonSeriesSettings_Factory(t) {
    return (ɵDxoChartCommonSeriesSettings_BaseFactory || (ɵDxoChartCommonSeriesSettings_BaseFactory = ɵɵgetInheritedFactory(DxoChartCommonSeriesSettings)))(t || DxoChartCommonSeriesSettings);
  };
}();
DxoChartCommonSeriesSettings.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoChartCommonSeriesSettings, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoChartCommonSeriesSettings_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoChartCommonSeriesSettings, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoAreaComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "area";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoAreaComponent.ɵfac = function DxoAreaComponent_Factory(t) {
  return new (t || DxoAreaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoAreaComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoAreaComponent, selectors: [["dxo-area"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", closed: "closed" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoAreaComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAreaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-area",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width",
        "closed"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoAreaModule = class {
};
DxoAreaModule.ɵfac = function DxoAreaModule_Factory(t) {
  return new (t || DxoAreaModule)();
};
DxoAreaModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoAreaModule });
DxoAreaModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAreaModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoAreaComponent
      ],
      exports: [
        DxoAreaComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoAreaModule, { declarations: [DxoAreaComponent], exports: [DxoAreaComponent] });
})();
var DxiVizScaleBreak = class extends CollectionNestedOption {
  get endValue() {
    return this._getOption("endValue");
  }
  set endValue(value) {
    this._setOption("endValue", value);
  }
  get startValue() {
    return this._getOption("startValue");
  }
  set startValue(value) {
    this._setOption("startValue", value);
  }
};
DxiVizScaleBreak.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxiVizScaleBreak_BaseFactory;
  return function DxiVizScaleBreak_Factory(t) {
    return (ɵDxiVizScaleBreak_BaseFactory || (ɵDxiVizScaleBreak_BaseFactory = ɵɵgetInheritedFactory(DxiVizScaleBreak)))(t || DxiVizScaleBreak);
  };
}();
DxiVizScaleBreak.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiVizScaleBreak, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiVizScaleBreak_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiVizScaleBreak, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiBreakComponent = class extends DxiVizScaleBreak {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "breaks";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiBreakComponent.ɵfac = function DxiBreakComponent_Factory(t) {
  return new (t || DxiBreakComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiBreakComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiBreakComponent, selectors: [["dxi-break"]], inputs: { endValue: "endValue", startValue: "startValue" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiBreakComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiBreakComponent, [{
    type: Component,
    args: [{
      selector: "dxi-break",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "endValue",
        "startValue"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxiBreakModule = class {
};
DxiBreakModule.ɵfac = function DxiBreakModule_Factory(t) {
  return new (t || DxiBreakModule)();
};
DxiBreakModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiBreakModule });
DxiBreakModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiBreakModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiBreakComponent
      ],
      exports: [
        DxiBreakComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiBreakModule, { declarations: [DxiBreakComponent], exports: [DxiBreakComponent] });
})();
var DxiConstantLineComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get displayBehindSeries() {
    return this._getOption("displayBehindSeries");
  }
  set displayBehindSeries(value) {
    this._setOption("displayBehindSeries", value);
  }
  get extendAxis() {
    return this._getOption("extendAxis");
  }
  set extendAxis(value) {
    this._setOption("extendAxis", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "constantLines";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiConstantLineComponent.ɵfac = function DxiConstantLineComponent_Factory(t) {
  return new (t || DxiConstantLineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiConstantLineComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiConstantLineComponent, selectors: [["dxi-constant-line"]], inputs: { color: "color", dashStyle: "dashStyle", displayBehindSeries: "displayBehindSeries", extendAxis: "extendAxis", label: "label", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", value: "value", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiConstantLineComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiConstantLineComponent, [{
    type: Component,
    args: [{
      selector: "dxi-constant-line",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], dashStyle: [{
    type: Input
  }], displayBehindSeries: [{
    type: Input
  }], extendAxis: [{
    type: Input
  }], label: [{
    type: Input
  }], paddingLeftRight: [{
    type: Input
  }], paddingTopBottom: [{
    type: Input
  }], value: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxiConstantLineModule = class {
};
DxiConstantLineModule.ɵfac = function DxiConstantLineModule_Factory(t) {
  return new (t || DxiConstantLineModule)();
};
DxiConstantLineModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiConstantLineModule });
DxiConstantLineModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiConstantLineModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiConstantLineComponent
      ],
      exports: [
        DxiConstantLineComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiConstantLineModule, { declarations: [DxiConstantLineComponent], exports: [DxiConstantLineComponent] });
})();
var DxiStripComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get endValue() {
    return this._getOption("endValue");
  }
  set endValue(value) {
    this._setOption("endValue", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get startValue() {
    return this._getOption("startValue");
  }
  set startValue(value) {
    this._setOption("startValue", value);
  }
  get _optionPath() {
    return "strips";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiStripComponent.ɵfac = function DxiStripComponent_Factory(t) {
  return new (t || DxiStripComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiStripComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiStripComponent, selectors: [["dxi-strip"]], inputs: { color: "color", endValue: "endValue", label: "label", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", startValue: "startValue" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiStripComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiStripComponent, [{
    type: Component,
    args: [{
      selector: "dxi-strip",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], endValue: [{
    type: Input
  }], label: [{
    type: Input
  }], paddingLeftRight: [{
    type: Input
  }], paddingTopBottom: [{
    type: Input
  }], startValue: [{
    type: Input
  }] });
})();
var DxiStripModule = class {
};
DxiStripModule.ɵfac = function DxiStripModule_Factory(t) {
  return new (t || DxiStripModule)();
};
DxiStripModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiStripModule });
DxiStripModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiStripModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiStripComponent
      ],
      exports: [
        DxiStripComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiStripModule, { declarations: [DxiStripComponent], exports: [DxiStripComponent] });
})();
var DxoArgumentAxisComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "categoriesChange" },
      { emit: "visualRangeChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get aggregateByCategory() {
    return this._getOption("aggregateByCategory");
  }
  set aggregateByCategory(value) {
    this._setOption("aggregateByCategory", value);
  }
  get aggregatedPointsPosition() {
    return this._getOption("aggregatedPointsPosition");
  }
  set aggregatedPointsPosition(value) {
    this._setOption("aggregatedPointsPosition", value);
  }
  get aggregationGroupWidth() {
    return this._getOption("aggregationGroupWidth");
  }
  set aggregationGroupWidth(value) {
    this._setOption("aggregationGroupWidth", value);
  }
  get aggregationInterval() {
    return this._getOption("aggregationInterval");
  }
  set aggregationInterval(value) {
    this._setOption("aggregationInterval", value);
  }
  get allowDecimals() {
    return this._getOption("allowDecimals");
  }
  set allowDecimals(value) {
    this._setOption("allowDecimals", value);
  }
  get argumentType() {
    return this._getOption("argumentType");
  }
  set argumentType(value) {
    this._setOption("argumentType", value);
  }
  get axisDivisionFactor() {
    return this._getOption("axisDivisionFactor");
  }
  set axisDivisionFactor(value) {
    this._setOption("axisDivisionFactor", value);
  }
  get breaks() {
    return this._getOption("breaks");
  }
  set breaks(value) {
    this._setOption("breaks", value);
  }
  get breakStyle() {
    return this._getOption("breakStyle");
  }
  set breakStyle(value) {
    this._setOption("breakStyle", value);
  }
  get categories() {
    return this._getOption("categories");
  }
  set categories(value) {
    this._setOption("categories", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get constantLines() {
    return this._getOption("constantLines");
  }
  set constantLines(value) {
    this._setOption("constantLines", value);
  }
  get constantLineStyle() {
    return this._getOption("constantLineStyle");
  }
  set constantLineStyle(value) {
    this._setOption("constantLineStyle", value);
  }
  get customPosition() {
    return this._getOption("customPosition");
  }
  set customPosition(value) {
    this._setOption("customPosition", value);
  }
  get customPositionAxis() {
    return this._getOption("customPositionAxis");
  }
  set customPositionAxis(value) {
    this._setOption("customPositionAxis", value);
  }
  get discreteAxisDivisionMode() {
    return this._getOption("discreteAxisDivisionMode");
  }
  set discreteAxisDivisionMode(value) {
    this._setOption("discreteAxisDivisionMode", value);
  }
  get endOnTick() {
    return this._getOption("endOnTick");
  }
  set endOnTick(value) {
    this._setOption("endOnTick", value);
  }
  get grid() {
    return this._getOption("grid");
  }
  set grid(value) {
    this._setOption("grid", value);
  }
  get holidays() {
    return this._getOption("holidays");
  }
  set holidays(value) {
    this._setOption("holidays", value);
  }
  get hoverMode() {
    return this._getOption("hoverMode");
  }
  set hoverMode(value) {
    this._setOption("hoverMode", value);
  }
  get inverted() {
    return this._getOption("inverted");
  }
  set inverted(value) {
    this._setOption("inverted", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get linearThreshold() {
    return this._getOption("linearThreshold");
  }
  set linearThreshold(value) {
    this._setOption("linearThreshold", value);
  }
  get logarithmBase() {
    return this._getOption("logarithmBase");
  }
  set logarithmBase(value) {
    this._setOption("logarithmBase", value);
  }
  get maxValueMargin() {
    return this._getOption("maxValueMargin");
  }
  set maxValueMargin(value) {
    this._setOption("maxValueMargin", value);
  }
  get minorGrid() {
    return this._getOption("minorGrid");
  }
  set minorGrid(value) {
    this._setOption("minorGrid", value);
  }
  get minorTick() {
    return this._getOption("minorTick");
  }
  set minorTick(value) {
    this._setOption("minorTick", value);
  }
  get minorTickCount() {
    return this._getOption("minorTickCount");
  }
  set minorTickCount(value) {
    this._setOption("minorTickCount", value);
  }
  get minorTickInterval() {
    return this._getOption("minorTickInterval");
  }
  set minorTickInterval(value) {
    this._setOption("minorTickInterval", value);
  }
  get minValueMargin() {
    return this._getOption("minValueMargin");
  }
  set minValueMargin(value) {
    this._setOption("minValueMargin", value);
  }
  get minVisualRangeLength() {
    return this._getOption("minVisualRangeLength");
  }
  set minVisualRangeLength(value) {
    this._setOption("minVisualRangeLength", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get placeholderSize() {
    return this._getOption("placeholderSize");
  }
  set placeholderSize(value) {
    this._setOption("placeholderSize", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get singleWorkdays() {
    return this._getOption("singleWorkdays");
  }
  set singleWorkdays(value) {
    this._setOption("singleWorkdays", value);
  }
  get strips() {
    return this._getOption("strips");
  }
  set strips(value) {
    this._setOption("strips", value);
  }
  get stripStyle() {
    return this._getOption("stripStyle");
  }
  set stripStyle(value) {
    this._setOption("stripStyle", value);
  }
  get tick() {
    return this._getOption("tick");
  }
  set tick(value) {
    this._setOption("tick", value);
  }
  get tickInterval() {
    return this._getOption("tickInterval");
  }
  set tickInterval(value) {
    this._setOption("tickInterval", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get valueMarginsEnabled() {
    return this._getOption("valueMarginsEnabled");
  }
  set valueMarginsEnabled(value) {
    this._setOption("valueMarginsEnabled", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get visualRange() {
    return this._getOption("visualRange");
  }
  set visualRange(value) {
    this._setOption("visualRange", value);
  }
  get visualRangeUpdateMode() {
    return this._getOption("visualRangeUpdateMode");
  }
  set visualRangeUpdateMode(value) {
    this._setOption("visualRangeUpdateMode", value);
  }
  get wholeRange() {
    return this._getOption("wholeRange");
  }
  set wholeRange(value) {
    this._setOption("wholeRange", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get workdaysOnly() {
    return this._getOption("workdaysOnly");
  }
  set workdaysOnly(value) {
    this._setOption("workdaysOnly", value);
  }
  get workWeek() {
    return this._getOption("workWeek");
  }
  set workWeek(value) {
    this._setOption("workWeek", value);
  }
  get firstPointOnStartAngle() {
    return this._getOption("firstPointOnStartAngle");
  }
  set firstPointOnStartAngle(value) {
    this._setOption("firstPointOnStartAngle", value);
  }
  get originValue() {
    return this._getOption("originValue");
  }
  set originValue(value) {
    this._setOption("originValue", value);
  }
  get period() {
    return this._getOption("period");
  }
  set period(value) {
    this._setOption("period", value);
  }
  get startAngle() {
    return this._getOption("startAngle");
  }
  set startAngle(value) {
    this._setOption("startAngle", value);
  }
  get _optionPath() {
    return "argumentAxis";
  }
  get breaksChildren() {
    return this._getOption("breaks");
  }
  set breaksChildren(value) {
    this.setChildren("breaks", value);
  }
  get constantLinesChildren() {
    return this._getOption("constantLines");
  }
  set constantLinesChildren(value) {
    this.setChildren("constantLines", value);
  }
  get stripsChildren() {
    return this._getOption("strips");
  }
  set stripsChildren(value) {
    this.setChildren("strips", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoArgumentAxisComponent.ɵfac = function DxoArgumentAxisComponent_Factory(t) {
  return new (t || DxoArgumentAxisComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoArgumentAxisComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoArgumentAxisComponent, selectors: [["dxo-argument-axis"]], contentQueries: function DxoArgumentAxisComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiBreakComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiConstantLineComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiStripComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.breaksChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.constantLinesChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.stripsChildren = _t);
  }
}, inputs: { aggregateByCategory: "aggregateByCategory", aggregatedPointsPosition: "aggregatedPointsPosition", aggregationGroupWidth: "aggregationGroupWidth", aggregationInterval: "aggregationInterval", allowDecimals: "allowDecimals", argumentType: "argumentType", axisDivisionFactor: "axisDivisionFactor", breaks: "breaks", breakStyle: "breakStyle", categories: "categories", color: "color", constantLines: "constantLines", constantLineStyle: "constantLineStyle", customPosition: "customPosition", customPositionAxis: "customPositionAxis", discreteAxisDivisionMode: "discreteAxisDivisionMode", endOnTick: "endOnTick", grid: "grid", holidays: "holidays", hoverMode: "hoverMode", inverted: "inverted", label: "label", linearThreshold: "linearThreshold", logarithmBase: "logarithmBase", maxValueMargin: "maxValueMargin", minorGrid: "minorGrid", minorTick: "minorTick", minorTickCount: "minorTickCount", minorTickInterval: "minorTickInterval", minValueMargin: "minValueMargin", minVisualRangeLength: "minVisualRangeLength", offset: "offset", opacity: "opacity", placeholderSize: "placeholderSize", position: "position", singleWorkdays: "singleWorkdays", strips: "strips", stripStyle: "stripStyle", tick: "tick", tickInterval: "tickInterval", title: "title", type: "type", valueMarginsEnabled: "valueMarginsEnabled", visible: "visible", visualRange: "visualRange", visualRangeUpdateMode: "visualRangeUpdateMode", wholeRange: "wholeRange", width: "width", workdaysOnly: "workdaysOnly", workWeek: "workWeek", firstPointOnStartAngle: "firstPointOnStartAngle", originValue: "originValue", period: "period", startAngle: "startAngle" }, outputs: { categoriesChange: "categoriesChange", visualRangeChange: "visualRangeChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoArgumentAxisComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoArgumentAxisComponent, [{
    type: Component,
    args: [{
      selector: "dxo-argument-axis",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { aggregateByCategory: [{
    type: Input
  }], aggregatedPointsPosition: [{
    type: Input
  }], aggregationGroupWidth: [{
    type: Input
  }], aggregationInterval: [{
    type: Input
  }], allowDecimals: [{
    type: Input
  }], argumentType: [{
    type: Input
  }], axisDivisionFactor: [{
    type: Input
  }], breaks: [{
    type: Input
  }], breakStyle: [{
    type: Input
  }], categories: [{
    type: Input
  }], color: [{
    type: Input
  }], constantLines: [{
    type: Input
  }], constantLineStyle: [{
    type: Input
  }], customPosition: [{
    type: Input
  }], customPositionAxis: [{
    type: Input
  }], discreteAxisDivisionMode: [{
    type: Input
  }], endOnTick: [{
    type: Input
  }], grid: [{
    type: Input
  }], holidays: [{
    type: Input
  }], hoverMode: [{
    type: Input
  }], inverted: [{
    type: Input
  }], label: [{
    type: Input
  }], linearThreshold: [{
    type: Input
  }], logarithmBase: [{
    type: Input
  }], maxValueMargin: [{
    type: Input
  }], minorGrid: [{
    type: Input
  }], minorTick: [{
    type: Input
  }], minorTickCount: [{
    type: Input
  }], minorTickInterval: [{
    type: Input
  }], minValueMargin: [{
    type: Input
  }], minVisualRangeLength: [{
    type: Input
  }], offset: [{
    type: Input
  }], opacity: [{
    type: Input
  }], placeholderSize: [{
    type: Input
  }], position: [{
    type: Input
  }], singleWorkdays: [{
    type: Input
  }], strips: [{
    type: Input
  }], stripStyle: [{
    type: Input
  }], tick: [{
    type: Input
  }], tickInterval: [{
    type: Input
  }], title: [{
    type: Input
  }], type: [{
    type: Input
  }], valueMarginsEnabled: [{
    type: Input
  }], visible: [{
    type: Input
  }], visualRange: [{
    type: Input
  }], visualRangeUpdateMode: [{
    type: Input
  }], wholeRange: [{
    type: Input
  }], width: [{
    type: Input
  }], workdaysOnly: [{
    type: Input
  }], workWeek: [{
    type: Input
  }], firstPointOnStartAngle: [{
    type: Input
  }], originValue: [{
    type: Input
  }], period: [{
    type: Input
  }], startAngle: [{
    type: Input
  }], categoriesChange: [{
    type: Output
  }], visualRangeChange: [{
    type: Output
  }], breaksChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiBreakComponent)]
  }], constantLinesChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiConstantLineComponent)]
  }], stripsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiStripComponent)]
  }] });
})();
var DxoArgumentAxisModule = class {
};
DxoArgumentAxisModule.ɵfac = function DxoArgumentAxisModule_Factory(t) {
  return new (t || DxoArgumentAxisModule)();
};
DxoArgumentAxisModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoArgumentAxisModule });
DxoArgumentAxisModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoArgumentAxisModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoArgumentAxisComponent
      ],
      exports: [
        DxoArgumentAxisComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoArgumentAxisModule, { declarations: [DxoArgumentAxisComponent], exports: [DxoArgumentAxisComponent] });
})();
var DxoFormat = class extends NestedOption {
  get currency() {
    return this._getOption("currency");
  }
  set currency(value) {
    this._setOption("currency", value);
  }
  get formatter() {
    return this._getOption("formatter");
  }
  set formatter(value) {
    this._setOption("formatter", value);
  }
  get parser() {
    return this._getOption("parser");
  }
  set parser(value) {
    this._setOption("parser", value);
  }
  get precision() {
    return this._getOption("precision");
  }
  set precision(value) {
    this._setOption("precision", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get useCurrencyAccountingStyle() {
    return this._getOption("useCurrencyAccountingStyle");
  }
  set useCurrencyAccountingStyle(value) {
    this._setOption("useCurrencyAccountingStyle", value);
  }
};
DxoFormat.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoFormat_BaseFactory;
  return function DxoFormat_Factory(t) {
    return (ɵDxoFormat_BaseFactory || (ɵDxoFormat_BaseFactory = ɵɵgetInheritedFactory(DxoFormat)))(t || DxoFormat);
  };
}();
DxoFormat.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFormat, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFormat_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormat, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoArgumentFormatComponent = class extends DxoFormat {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "argumentFormat";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoArgumentFormatComponent.ɵfac = function DxoArgumentFormatComponent_Factory(t) {
  return new (t || DxoArgumentFormatComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoArgumentFormatComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoArgumentFormatComponent, selectors: [["dxo-argument-format"]], inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type", useCurrencyAccountingStyle: "useCurrencyAccountingStyle" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoArgumentFormatComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoArgumentFormatComponent, [{
    type: Component,
    args: [{
      selector: "dxo-argument-format",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "currency",
        "formatter",
        "parser",
        "precision",
        "type",
        "useCurrencyAccountingStyle"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoArgumentFormatModule = class {
};
DxoArgumentFormatModule.ɵfac = function DxoArgumentFormatModule_Factory(t) {
  return new (t || DxoArgumentFormatModule)();
};
DxoArgumentFormatModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoArgumentFormatModule });
DxoArgumentFormatModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoArgumentFormatModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoArgumentFormatComponent
      ],
      exports: [
        DxoArgumentFormatComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoArgumentFormatModule, { declarations: [DxoArgumentFormatComponent], exports: [DxoArgumentFormatComponent] });
})();
var DxoAtComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get _optionPath() {
    return "at";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoAtComponent.ɵfac = function DxoAtComponent_Factory(t) {
  return new (t || DxoAtComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoAtComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoAtComponent, selectors: [["dxo-at"]], inputs: { x: "x", y: "y" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoAtComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAtComponent, [{
    type: Component,
    args: [{
      selector: "dxo-at",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { x: [{
    type: Input
  }], y: [{
    type: Input
  }] });
})();
var DxoAtModule = class {
};
DxoAtModule.ɵfac = function DxoAtModule_Factory(t) {
  return new (t || DxoAtModule)();
};
DxoAtModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoAtModule });
DxoAtModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAtModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoAtComponent
      ],
      exports: [
        DxoAtComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoAtModule, { declarations: [DxoAtComponent], exports: [DxoAtComponent] });
})();
var DxoAutoLayoutComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get orientation() {
    return this._getOption("orientation");
  }
  set orientation(value) {
    this._setOption("orientation", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get _optionPath() {
    return "autoLayout";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoAutoLayoutComponent.ɵfac = function DxoAutoLayoutComponent_Factory(t) {
  return new (t || DxoAutoLayoutComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoAutoLayoutComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoAutoLayoutComponent, selectors: [["dxo-auto-layout"]], inputs: { orientation: "orientation", type: "type" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoAutoLayoutComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAutoLayoutComponent, [{
    type: Component,
    args: [{
      selector: "dxo-auto-layout",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { orientation: [{
    type: Input
  }], type: [{
    type: Input
  }] });
})();
var DxoAutoLayoutModule = class {
};
DxoAutoLayoutModule.ɵfac = function DxoAutoLayoutModule_Factory(t) {
  return new (t || DxoAutoLayoutModule)();
};
DxoAutoLayoutModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoAutoLayoutModule });
DxoAutoLayoutModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAutoLayoutModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoAutoLayoutComponent
      ],
      exports: [
        DxoAutoLayoutComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoAutoLayoutModule, { declarations: [DxoAutoLayoutComponent], exports: [DxoAutoLayoutComponent] });
})();
var DxoChartsColor = class extends NestedOption {
  get base() {
    return this._getOption("base");
  }
  set base(value) {
    this._setOption("base", value);
  }
  get fillId() {
    return this._getOption("fillId");
  }
  set fillId(value) {
    this._setOption("fillId", value);
  }
};
DxoChartsColor.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoChartsColor_BaseFactory;
  return function DxoChartsColor_Factory(t) {
    return (ɵDxoChartsColor_BaseFactory || (ɵDxoChartsColor_BaseFactory = ɵɵgetInheritedFactory(DxoChartsColor)))(t || DxoChartsColor);
  };
}();
DxoChartsColor.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoChartsColor, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoChartsColor_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoChartsColor, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoBackgroundColorComponent = class extends DxoChartsColor {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "backgroundColor";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoBackgroundColorComponent.ɵfac = function DxoBackgroundColorComponent_Factory(t) {
  return new (t || DxoBackgroundColorComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoBackgroundColorComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoBackgroundColorComponent, selectors: [["dxo-background-color"]], inputs: { base: "base", fillId: "fillId" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoBackgroundColorComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBackgroundColorComponent, [{
    type: Component,
    args: [{
      selector: "dxo-background-color",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "base",
        "fillId"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoBackgroundColorModule = class {
};
DxoBackgroundColorModule.ɵfac = function DxoBackgroundColorModule_Factory(t) {
  return new (t || DxoBackgroundColorModule)();
};
DxoBackgroundColorModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoBackgroundColorModule });
DxoBackgroundColorModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBackgroundColorModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoBackgroundColorComponent
      ],
      exports: [
        DxoBackgroundColorComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoBackgroundColorModule, { declarations: [DxoBackgroundColorComponent], exports: [DxoBackgroundColorComponent] });
})();
var DxoBackgroundComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get image() {
    return this._getOption("image");
  }
  set image(value) {
    this._setOption("image", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get borderColor() {
    return this._getOption("borderColor");
  }
  set borderColor(value) {
    this._setOption("borderColor", value);
  }
  get _optionPath() {
    return "background";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoBackgroundComponent.ɵfac = function DxoBackgroundComponent_Factory(t) {
  return new (t || DxoBackgroundComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoBackgroundComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoBackgroundComponent, selectors: [["dxo-background"]], inputs: { color: "color", image: "image", visible: "visible", borderColor: "borderColor" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoBackgroundComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBackgroundComponent, [{
    type: Component,
    args: [{
      selector: "dxo-background",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], image: [{
    type: Input
  }], visible: [{
    type: Input
  }], borderColor: [{
    type: Input
  }] });
})();
var DxoBackgroundModule = class {
};
DxoBackgroundModule.ɵfac = function DxoBackgroundModule_Factory(t) {
  return new (t || DxoBackgroundModule)();
};
DxoBackgroundModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoBackgroundModule });
DxoBackgroundModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBackgroundModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoBackgroundComponent
      ],
      exports: [
        DxoBackgroundComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoBackgroundModule, { declarations: [DxoBackgroundComponent], exports: [DxoBackgroundComponent] });
})();
var DxoBarComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "bar";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoBarComponent.ɵfac = function DxoBarComponent_Factory(t) {
  return new (t || DxoBarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoBarComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoBarComponent, selectors: [["dxo-bar"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", closed: "closed" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoBarComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-bar",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width",
        "closed"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoBarModule = class {
};
DxoBarModule.ɵfac = function DxoBarModule_Factory(t) {
  return new (t || DxoBarModule)();
};
DxoBarModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoBarModule });
DxoBarModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBarModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoBarComponent
      ],
      exports: [
        DxoBarComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoBarModule, { declarations: [DxoBarComponent], exports: [DxoBarComponent] });
})();
var DxoBehaviorComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get allowSlidersSwap() {
    return this._getOption("allowSlidersSwap");
  }
  set allowSlidersSwap(value) {
    this._setOption("allowSlidersSwap", value);
  }
  get animationEnabled() {
    return this._getOption("animationEnabled");
  }
  set animationEnabled(value) {
    this._setOption("animationEnabled", value);
  }
  get callValueChanged() {
    return this._getOption("callValueChanged");
  }
  set callValueChanged(value) {
    this._setOption("callValueChanged", value);
  }
  get manualRangeSelectionEnabled() {
    return this._getOption("manualRangeSelectionEnabled");
  }
  set manualRangeSelectionEnabled(value) {
    this._setOption("manualRangeSelectionEnabled", value);
  }
  get moveSelectedRangeByClick() {
    return this._getOption("moveSelectedRangeByClick");
  }
  set moveSelectedRangeByClick(value) {
    this._setOption("moveSelectedRangeByClick", value);
  }
  get snapToTicks() {
    return this._getOption("snapToTicks");
  }
  set snapToTicks(value) {
    this._setOption("snapToTicks", value);
  }
  get valueChangeMode() {
    return this._getOption("valueChangeMode");
  }
  set valueChangeMode(value) {
    this._setOption("valueChangeMode", value);
  }
  get _optionPath() {
    return "behavior";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoBehaviorComponent.ɵfac = function DxoBehaviorComponent_Factory(t) {
  return new (t || DxoBehaviorComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoBehaviorComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoBehaviorComponent, selectors: [["dxo-behavior"]], inputs: { allowSlidersSwap: "allowSlidersSwap", animationEnabled: "animationEnabled", callValueChanged: "callValueChanged", manualRangeSelectionEnabled: "manualRangeSelectionEnabled", moveSelectedRangeByClick: "moveSelectedRangeByClick", snapToTicks: "snapToTicks", valueChangeMode: "valueChangeMode" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoBehaviorComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBehaviorComponent, [{
    type: Component,
    args: [{
      selector: "dxo-behavior",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { allowSlidersSwap: [{
    type: Input
  }], animationEnabled: [{
    type: Input
  }], callValueChanged: [{
    type: Input
  }], manualRangeSelectionEnabled: [{
    type: Input
  }], moveSelectedRangeByClick: [{
    type: Input
  }], snapToTicks: [{
    type: Input
  }], valueChangeMode: [{
    type: Input
  }] });
})();
var DxoBehaviorModule = class {
};
DxoBehaviorModule.ɵfac = function DxoBehaviorModule_Factory(t) {
  return new (t || DxoBehaviorModule)();
};
DxoBehaviorModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoBehaviorModule });
DxoBehaviorModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBehaviorModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoBehaviorComponent
      ],
      exports: [
        DxoBehaviorComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoBehaviorModule, { declarations: [DxoBehaviorComponent], exports: [DxoBehaviorComponent] });
})();
var DxoBorderComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get cornerRadius() {
    return this._getOption("cornerRadius");
  }
  set cornerRadius(value) {
    this._setOption("cornerRadius", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get bottom() {
    return this._getOption("bottom");
  }
  set bottom(value) {
    this._setOption("bottom", value);
  }
  get left() {
    return this._getOption("left");
  }
  set left(value) {
    this._setOption("left", value);
  }
  get right() {
    return this._getOption("right");
  }
  set right(value) {
    this._setOption("right", value);
  }
  get top() {
    return this._getOption("top");
  }
  set top(value) {
    this._setOption("top", value);
  }
  get _optionPath() {
    return "border";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoBorderComponent.ɵfac = function DxoBorderComponent_Factory(t) {
  return new (t || DxoBorderComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoBorderComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoBorderComponent, selectors: [["dxo-border"]], inputs: { color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", opacity: "opacity", visible: "visible", width: "width", bottom: "bottom", left: "left", right: "right", top: "top" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoBorderComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBorderComponent, [{
    type: Component,
    args: [{
      selector: "dxo-border",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], cornerRadius: [{
    type: Input
  }], dashStyle: [{
    type: Input
  }], opacity: [{
    type: Input
  }], visible: [{
    type: Input
  }], width: [{
    type: Input
  }], bottom: [{
    type: Input
  }], left: [{
    type: Input
  }], right: [{
    type: Input
  }], top: [{
    type: Input
  }] });
})();
var DxoBorderModule = class {
};
DxoBorderModule.ɵfac = function DxoBorderModule_Factory(t) {
  return new (t || DxoBorderModule)();
};
DxoBorderModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoBorderModule });
DxoBorderModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBorderModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoBorderComponent
      ],
      exports: [
        DxoBorderComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoBorderModule, { declarations: [DxoBorderComponent], exports: [DxoBorderComponent] });
})();
var DxoBoundaryOffsetComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get _optionPath() {
    return "boundaryOffset";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoBoundaryOffsetComponent.ɵfac = function DxoBoundaryOffsetComponent_Factory(t) {
  return new (t || DxoBoundaryOffsetComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoBoundaryOffsetComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoBoundaryOffsetComponent, selectors: [["dxo-boundary-offset"]], inputs: { x: "x", y: "y" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoBoundaryOffsetComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBoundaryOffsetComponent, [{
    type: Component,
    args: [{
      selector: "dxo-boundary-offset",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { x: [{
    type: Input
  }], y: [{
    type: Input
  }] });
})();
var DxoBoundaryOffsetModule = class {
};
DxoBoundaryOffsetModule.ɵfac = function DxoBoundaryOffsetModule_Factory(t) {
  return new (t || DxoBoundaryOffsetModule)();
};
DxoBoundaryOffsetModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoBoundaryOffsetModule });
DxoBoundaryOffsetModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBoundaryOffsetModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoBoundaryOffsetComponent
      ],
      exports: [
        DxoBoundaryOffsetComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoBoundaryOffsetModule, { declarations: [DxoBoundaryOffsetComponent], exports: [DxoBoundaryOffsetComponent] });
})();
var DxoBoxOptions = class extends NestedOption {
  get align() {
    return this._getOption("align");
  }
  set align(value) {
    this._setOption("align", value);
  }
  get crossAlign() {
    return this._getOption("crossAlign");
  }
  set crossAlign(value) {
    this._setOption("crossAlign", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get direction() {
    return this._getOption("direction");
  }
  set direction(value) {
    this._setOption("direction", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get itemHoldTimeout() {
    return this._getOption("itemHoldTimeout");
  }
  set itemHoldTimeout(value) {
    this._setOption("itemHoldTimeout", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get itemTemplate() {
    return this._getOption("itemTemplate");
  }
  set itemTemplate(value) {
    this._setOption("itemTemplate", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onItemClick() {
    return this._getOption("onItemClick");
  }
  set onItemClick(value) {
    this._setOption("onItemClick", value);
  }
  get onItemContextMenu() {
    return this._getOption("onItemContextMenu");
  }
  set onItemContextMenu(value) {
    this._setOption("onItemContextMenu", value);
  }
  get onItemHold() {
    return this._getOption("onItemHold");
  }
  set onItemHold(value) {
    this._setOption("onItemHold", value);
  }
  get onItemRendered() {
    return this._getOption("onItemRendered");
  }
  set onItemRendered(value) {
    this._setOption("onItemRendered", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
};
DxoBoxOptions.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoBoxOptions_BaseFactory;
  return function DxoBoxOptions_Factory(t) {
    return (ɵDxoBoxOptions_BaseFactory || (ɵDxoBoxOptions_BaseFactory = ɵɵgetInheritedFactory(DxoBoxOptions)))(t || DxoBoxOptions);
  };
}();
DxoBoxOptions.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoBoxOptions, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoBoxOptions_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBoxOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiButtonGroupItem = class extends CollectionNestedOption {
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get html() {
    return this._getOption("html");
  }
  set html(value) {
    this._setOption("html", value);
  }
  get icon() {
    return this._getOption("icon");
  }
  set icon(value) {
    this._setOption("icon", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get titleTemplate() {
    return this._getOption("titleTemplate");
  }
  set titleTemplate(value) {
    this._setOption("titleTemplate", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get onClick() {
    return this._getOption("onClick");
  }
  set onClick(value) {
    this._setOption("onClick", value);
  }
  get stylingMode() {
    return this._getOption("stylingMode");
  }
  set stylingMode(value) {
    this._setOption("stylingMode", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get baseSize() {
    return this._getOption("baseSize");
  }
  set baseSize(value) {
    this._setOption("baseSize", value);
  }
  get box() {
    return this._getOption("box");
  }
  set box(value) {
    this._setOption("box", value);
  }
  get ratio() {
    return this._getOption("ratio");
  }
  set ratio(value) {
    this._setOption("ratio", value);
  }
  get shrink() {
    return this._getOption("shrink");
  }
  set shrink(value) {
    this._setOption("shrink", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get beginGroup() {
    return this._getOption("beginGroup");
  }
  set beginGroup(value) {
    this._setOption("beginGroup", value);
  }
  get closeMenuOnClick() {
    return this._getOption("closeMenuOnClick");
  }
  set closeMenuOnClick(value) {
    this._setOption("closeMenuOnClick", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get selectable() {
    return this._getOption("selectable");
  }
  set selectable(value) {
    this._setOption("selectable", value);
  }
  get selected() {
    return this._getOption("selected");
  }
  set selected(value) {
    this._setOption("selected", value);
  }
  get colSpan() {
    return this._getOption("colSpan");
  }
  set colSpan(value) {
    this._setOption("colSpan", value);
  }
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get dataField() {
    return this._getOption("dataField");
  }
  set dataField(value) {
    this._setOption("dataField", value);
  }
  get editorOptions() {
    return this._getOption("editorOptions");
  }
  set editorOptions(value) {
    this._setOption("editorOptions", value);
  }
  get editorType() {
    return this._getOption("editorType");
  }
  set editorType(value) {
    this._setOption("editorType", value);
  }
  get helpText() {
    return this._getOption("helpText");
  }
  set helpText(value) {
    this._setOption("helpText", value);
  }
  get isRequired() {
    return this._getOption("isRequired");
  }
  set isRequired(value) {
    this._setOption("isRequired", value);
  }
  get itemType() {
    return this._getOption("itemType");
  }
  set itemType(value) {
    this._setOption("itemType", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get validationRules() {
    return this._getOption("validationRules");
  }
  set validationRules(value) {
    this._setOption("validationRules", value);
  }
  get visibleIndex() {
    return this._getOption("visibleIndex");
  }
  set visibleIndex(value) {
    this._setOption("visibleIndex", value);
  }
  get alignItemLabels() {
    return this._getOption("alignItemLabels");
  }
  set alignItemLabels(value) {
    this._setOption("alignItemLabels", value);
  }
  get caption() {
    return this._getOption("caption");
  }
  set caption(value) {
    this._setOption("caption", value);
  }
  get colCount() {
    return this._getOption("colCount");
  }
  set colCount(value) {
    this._setOption("colCount", value);
  }
  get colCountByScreen() {
    return this._getOption("colCountByScreen");
  }
  set colCountByScreen(value) {
    this._setOption("colCountByScreen", value);
  }
  get tabPanelOptions() {
    return this._getOption("tabPanelOptions");
  }
  set tabPanelOptions(value) {
    this._setOption("tabPanelOptions", value);
  }
  get tabs() {
    return this._getOption("tabs");
  }
  set tabs(value) {
    this._setOption("tabs", value);
  }
  get badge() {
    return this._getOption("badge");
  }
  set badge(value) {
    this._setOption("badge", value);
  }
  get tabTemplate() {
    return this._getOption("tabTemplate");
  }
  set tabTemplate(value) {
    this._setOption("tabTemplate", value);
  }
  get buttonOptions() {
    return this._getOption("buttonOptions");
  }
  set buttonOptions(value) {
    this._setOption("buttonOptions", value);
  }
  get horizontalAlignment() {
    return this._getOption("horizontalAlignment");
  }
  set horizontalAlignment(value) {
    this._setOption("horizontalAlignment", value);
  }
  get verticalAlignment() {
    return this._getOption("verticalAlignment");
  }
  set verticalAlignment(value) {
    this._setOption("verticalAlignment", value);
  }
  get locateInMenu() {
    return this._getOption("locateInMenu");
  }
  set locateInMenu(value) {
    this._setOption("locateInMenu", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get menuItemTemplate() {
    return this._getOption("menuItemTemplate");
  }
  set menuItemTemplate(value) {
    this._setOption("menuItemTemplate", value);
  }
  get options() {
    return this._getOption("options");
  }
  set options(value) {
    this._setOption("options", value);
  }
  get showText() {
    return this._getOption("showText");
  }
  set showText(value) {
    this._setOption("showText", value);
  }
  get widget() {
    return this._getOption("widget");
  }
  set widget(value) {
    this._setOption("widget", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get imageAlt() {
    return this._getOption("imageAlt");
  }
  set imageAlt(value) {
    this._setOption("imageAlt", value);
  }
  get imageSrc() {
    return this._getOption("imageSrc");
  }
  set imageSrc(value) {
    this._setOption("imageSrc", value);
  }
  get acceptedValues() {
    return this._getOption("acceptedValues");
  }
  set acceptedValues(value) {
    this._setOption("acceptedValues", value);
  }
  get formatName() {
    return this._getOption("formatName");
  }
  set formatName(value) {
    this._setOption("formatName", value);
  }
  get formatValues() {
    return this._getOption("formatValues");
  }
  set formatValues(value) {
    this._setOption("formatValues", value);
  }
  get key() {
    return this._getOption("key");
  }
  set key(value) {
    this._setOption("key", value);
  }
  get showChevron() {
    return this._getOption("showChevron");
  }
  set showChevron(value) {
    this._setOption("showChevron", value);
  }
  get linkAttr() {
    return this._getOption("linkAttr");
  }
  set linkAttr(value) {
    this._setOption("linkAttr", value);
  }
  get url() {
    return this._getOption("url");
  }
  set url(value) {
    this._setOption("url", value);
  }
  get heightRatio() {
    return this._getOption("heightRatio");
  }
  set heightRatio(value) {
    this._setOption("heightRatio", value);
  }
  get widthRatio() {
    return this._getOption("widthRatio");
  }
  set widthRatio(value) {
    this._setOption("widthRatio", value);
  }
  get expanded() {
    return this._getOption("expanded");
  }
  set expanded(value) {
    this._setOption("expanded", value);
  }
  get hasItems() {
    return this._getOption("hasItems");
  }
  set hasItems(value) {
    this._setOption("hasItems", value);
  }
  get id() {
    return this._getOption("id");
  }
  set id(value) {
    this._setOption("id", value);
  }
  get parentId() {
    return this._getOption("parentId");
  }
  set parentId(value) {
    this._setOption("parentId", value);
  }
};
DxiButtonGroupItem.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxiButtonGroupItem_BaseFactory;
  return function DxiButtonGroupItem_Factory(t) {
    return (ɵDxiButtonGroupItem_BaseFactory || (ɵDxiButtonGroupItem_BaseFactory = ɵɵgetInheritedFactory(DxiButtonGroupItem)))(t || DxiButtonGroupItem);
  };
}();
DxiButtonGroupItem.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiButtonGroupItem, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiButtonGroupItem_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiButtonGroupItem, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiValidationRuleComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get message() {
    return this._getOption("message");
  }
  set message(value) {
    this._setOption("message", value);
  }
  get trim() {
    return this._getOption("trim");
  }
  set trim(value) {
    this._setOption("trim", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get ignoreEmptyValue() {
    return this._getOption("ignoreEmptyValue");
  }
  set ignoreEmptyValue(value) {
    this._setOption("ignoreEmptyValue", value);
  }
  get max() {
    return this._getOption("max");
  }
  set max(value) {
    this._setOption("max", value);
  }
  get min() {
    return this._getOption("min");
  }
  set min(value) {
    this._setOption("min", value);
  }
  get reevaluate() {
    return this._getOption("reevaluate");
  }
  set reevaluate(value) {
    this._setOption("reevaluate", value);
  }
  get validationCallback() {
    return this._getOption("validationCallback");
  }
  set validationCallback(value) {
    this._setOption("validationCallback", value);
  }
  get comparisonTarget() {
    return this._getOption("comparisonTarget");
  }
  set comparisonTarget(value) {
    this._setOption("comparisonTarget", value);
  }
  get comparisonType() {
    return this._getOption("comparisonType");
  }
  set comparisonType(value) {
    this._setOption("comparisonType", value);
  }
  get pattern() {
    return this._getOption("pattern");
  }
  set pattern(value) {
    this._setOption("pattern", value);
  }
  get _optionPath() {
    return "validationRules";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiValidationRuleComponent.ɵfac = function DxiValidationRuleComponent_Factory(t) {
  return new (t || DxiValidationRuleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiValidationRuleComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiValidationRuleComponent, selectors: [["dxi-validation-rule"]], inputs: { message: "message", trim: "trim", type: "type", ignoreEmptyValue: "ignoreEmptyValue", max: "max", min: "min", reevaluate: "reevaluate", validationCallback: "validationCallback", comparisonTarget: "comparisonTarget", comparisonType: "comparisonType", pattern: "pattern" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiValidationRuleComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiValidationRuleComponent, [{
    type: Component,
    args: [{
      selector: "dxi-validation-rule",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { message: [{
    type: Input
  }], trim: [{
    type: Input
  }], type: [{
    type: Input
  }], ignoreEmptyValue: [{
    type: Input
  }], max: [{
    type: Input
  }], min: [{
    type: Input
  }], reevaluate: [{
    type: Input
  }], validationCallback: [{
    type: Input
  }], comparisonTarget: [{
    type: Input
  }], comparisonType: [{
    type: Input
  }], pattern: [{
    type: Input
  }] });
})();
var DxiValidationRuleModule = class {
};
DxiValidationRuleModule.ɵfac = function DxiValidationRuleModule_Factory(t) {
  return new (t || DxiValidationRuleModule)();
};
DxiValidationRuleModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiValidationRuleModule });
DxiValidationRuleModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiValidationRuleModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiValidationRuleComponent
      ],
      exports: [
        DxiValidationRuleComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiValidationRuleModule, { declarations: [DxiValidationRuleComponent], exports: [DxiValidationRuleComponent] });
})();
var DxiHtmlEditorImageUploadTabItem = class extends CollectionNestedOption {
  get alignItemLabels() {
    return this._getOption("alignItemLabels");
  }
  set alignItemLabels(value) {
    this._setOption("alignItemLabels", value);
  }
  get badge() {
    return this._getOption("badge");
  }
  set badge(value) {
    this._setOption("badge", value);
  }
  get colCount() {
    return this._getOption("colCount");
  }
  set colCount(value) {
    this._setOption("colCount", value);
  }
  get colCountByScreen() {
    return this._getOption("colCountByScreen");
  }
  set colCountByScreen(value) {
    this._setOption("colCountByScreen", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get icon() {
    return this._getOption("icon");
  }
  set icon(value) {
    this._setOption("icon", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get tabTemplate() {
    return this._getOption("tabTemplate");
  }
  set tabTemplate(value) {
    this._setOption("tabTemplate", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get commands() {
    return this._getOption("commands");
  }
  set commands(value) {
    this._setOption("commands", value);
  }
  get groups() {
    return this._getOption("groups");
  }
  set groups(value) {
    this._setOption("groups", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
};
DxiHtmlEditorImageUploadTabItem.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxiHtmlEditorImageUploadTabItem_BaseFactory;
  return function DxiHtmlEditorImageUploadTabItem_Factory(t) {
    return (ɵDxiHtmlEditorImageUploadTabItem_BaseFactory || (ɵDxiHtmlEditorImageUploadTabItem_BaseFactory = ɵɵgetInheritedFactory(DxiHtmlEditorImageUploadTabItem)))(t || DxiHtmlEditorImageUploadTabItem);
  };
}();
DxiHtmlEditorImageUploadTabItem.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiHtmlEditorImageUploadTabItem, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiHtmlEditorImageUploadTabItem_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiHtmlEditorImageUploadTabItem, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiDiagramCustomCommand = class extends CollectionNestedOption {
  get icon() {
    return this._getOption("icon");
  }
  set icon(value) {
    this._setOption("icon", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
};
DxiDiagramCustomCommand.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxiDiagramCustomCommand_BaseFactory;
  return function DxiDiagramCustomCommand_Factory(t) {
    return (ɵDxiDiagramCustomCommand_BaseFactory || (ɵDxiDiagramCustomCommand_BaseFactory = ɵɵgetInheritedFactory(DxiDiagramCustomCommand)))(t || DxiDiagramCustomCommand);
  };
}();
DxiDiagramCustomCommand.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiDiagramCustomCommand, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiDiagramCustomCommand_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiDiagramCustomCommand, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiCommandComponent = class extends DxiDiagramCustomCommand {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "commands";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiCommandComponent.ɵfac = function DxiCommandComponent_Factory(t) {
  return new (t || DxiCommandComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiCommandComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiCommandComponent, selectors: [["dxi-command"]], contentQueries: function DxiCommandComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
  }
}, inputs: { icon: "icon", items: "items", location: "location", name: "name", text: "text" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiCommandComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCommandComponent, [{
    type: Component,
    args: [{
      selector: "dxi-command",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "icon",
        "items",
        "location",
        "name",
        "text"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { itemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiItemComponent)]
  }] });
})();
var DxiCommandModule = class {
};
DxiCommandModule.ɵfac = function DxiCommandModule_Factory(t) {
  return new (t || DxiCommandModule)();
};
DxiCommandModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiCommandModule });
DxiCommandModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCommandModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiCommandComponent
      ],
      exports: [
        DxiCommandComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiCommandModule, { declarations: [DxiCommandComponent], exports: [DxiCommandComponent] });
})();
var DxiGroupComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get commands() {
    return this._getOption("commands");
  }
  set commands(value) {
    this._setOption("commands", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get category() {
    return this._getOption("category");
  }
  set category(value) {
    this._setOption("category", value);
  }
  get displayMode() {
    return this._getOption("displayMode");
  }
  set displayMode(value) {
    this._setOption("displayMode", value);
  }
  get expanded() {
    return this._getOption("expanded");
  }
  set expanded(value) {
    this._setOption("expanded", value);
  }
  get shapes() {
    return this._getOption("shapes");
  }
  set shapes(value) {
    this._setOption("shapes", value);
  }
  get _optionPath() {
    return "groups";
  }
  get commandsChildren() {
    return this._getOption("commands");
  }
  set commandsChildren(value) {
    this.setChildren("commands", value);
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiGroupComponent.ɵfac = function DxiGroupComponent_Factory(t) {
  return new (t || DxiGroupComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiGroupComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiGroupComponent, selectors: [["dxi-group"]], contentQueries: function DxiGroupComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiCommandComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.commandsChildren = _t);
  }
}, inputs: { commands: "commands", title: "title", category: "category", displayMode: "displayMode", expanded: "expanded", shapes: "shapes" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiGroupComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiGroupComponent, [{
    type: Component,
    args: [{
      selector: "dxi-group",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { commands: [{
    type: Input
  }], title: [{
    type: Input
  }], category: [{
    type: Input
  }], displayMode: [{
    type: Input
  }], expanded: [{
    type: Input
  }], shapes: [{
    type: Input
  }], commandsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiCommandComponent)]
  }] });
})();
var DxiGroupModule = class {
};
DxiGroupModule.ɵfac = function DxiGroupModule_Factory(t) {
  return new (t || DxiGroupModule)();
};
DxiGroupModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiGroupModule });
DxiGroupModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiGroupModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiGroupComponent
      ],
      exports: [
        DxiGroupComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiGroupModule, { declarations: [DxiGroupComponent], exports: [DxiGroupComponent] });
})();
var _c0$4 = ["*"];
var DxiTabComponent = class extends DxiHtmlEditorImageUploadTabItem {
  constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
    super();
    this.renderer = renderer;
    this.document = document;
    this.element = element;
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
    templateHost.setHost(this);
  }
  get _optionPath() {
    return "tabs";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  get commandsChildren() {
    return this._getOption("commands");
  }
  set commandsChildren(value) {
    this.setChildren("commands", value);
  }
  get groupsChildren() {
    return this._getOption("groups");
  }
  set groupsChildren(value) {
    this.setChildren("groups", value);
  }
  setTemplate(template) {
    this.template = template;
  }
  ngAfterViewInit() {
    extractTemplate(this, this.element, this.renderer, this.document);
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiTabComponent.ɵfac = function DxiTabComponent_Factory(t) {
  return new (t || DxiTabComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(DxTemplateHost, 1), ɵɵdirectiveInject(ElementRef));
};
DxiTabComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiTabComponent, selectors: [["dxi-tab"]], contentQueries: function DxiTabComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiCommandComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiGroupComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.commandsChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.groupsChildren = _t);
  }
}, inputs: { alignItemLabels: "alignItemLabels", badge: "badge", colCount: "colCount", colCountByScreen: "colCountByScreen", disabled: "disabled", icon: "icon", items: "items", tabTemplate: "tabTemplate", template: "template", title: "title", commands: "commands", groups: "groups", name: "name" }, features: [ɵɵProvidersFeature([NestedOptionHost, DxTemplateHost]), ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$4, decls: 1, vars: 0, template: function DxiTabComponent_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojectionDef();
    ɵɵprojection(0);
  }
}, styles: ["[_nghost-%COMP%] { display: block; }"] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiTabComponent, [{
    type: Component,
    args: [{
      selector: "dxi-tab",
      template: "<ng-content></ng-content>",
      styles: [":host { display: block; }"],
      providers: [NestedOptionHost, DxTemplateHost],
      inputs: [
        "alignItemLabels",
        "badge",
        "colCount",
        "colCountByScreen",
        "disabled",
        "icon",
        "items",
        "tabTemplate",
        "template",
        "title",
        "commands",
        "groups",
        "name"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }, { type: Renderer2 }, { type: void 0, decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }] }, { type: DxTemplateHost, decorators: [{
      type: Host
    }] }, { type: ElementRef }];
  }, { itemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiItemComponent)]
  }], commandsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiCommandComponent)]
  }], groupsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiGroupComponent)]
  }] });
})();
var DxiTabModule = class {
};
DxiTabModule.ɵfac = function DxiTabModule_Factory(t) {
  return new (t || DxiTabModule)();
};
DxiTabModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiTabModule });
DxiTabModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiTabModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiTabComponent
      ],
      exports: [
        DxiTabComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiTabModule, { declarations: [DxiTabComponent], exports: [DxiTabComponent] });
})();
var DxiLocationComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get lat() {
    return this._getOption("lat");
  }
  set lat(value) {
    this._setOption("lat", value);
  }
  get lng() {
    return this._getOption("lng");
  }
  set lng(value) {
    this._setOption("lng", value);
  }
  get col() {
    return this._getOption("col");
  }
  set col(value) {
    this._setOption("col", value);
  }
  get colspan() {
    return this._getOption("colspan");
  }
  set colspan(value) {
    this._setOption("colspan", value);
  }
  get row() {
    return this._getOption("row");
  }
  set row(value) {
    this._setOption("row", value);
  }
  get rowspan() {
    return this._getOption("rowspan");
  }
  set rowspan(value) {
    this._setOption("rowspan", value);
  }
  get screen() {
    return this._getOption("screen");
  }
  set screen(value) {
    this._setOption("screen", value);
  }
  get _optionPath() {
    return "location";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiLocationComponent.ɵfac = function DxiLocationComponent_Factory(t) {
  return new (t || DxiLocationComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiLocationComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiLocationComponent, selectors: [["dxi-location"]], inputs: { lat: "lat", lng: "lng", col: "col", colspan: "colspan", row: "row", rowspan: "rowspan", screen: "screen" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiLocationComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiLocationComponent, [{
    type: Component,
    args: [{
      selector: "dxi-location",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { lat: [{
    type: Input
  }], lng: [{
    type: Input
  }], col: [{
    type: Input
  }], colspan: [{
    type: Input
  }], row: [{
    type: Input
  }], rowspan: [{
    type: Input
  }], screen: [{
    type: Input
  }] });
})();
var DxiLocationModule = class {
};
DxiLocationModule.ɵfac = function DxiLocationModule_Factory(t) {
  return new (t || DxiLocationModule)();
};
DxiLocationModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiLocationModule });
DxiLocationModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiLocationModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiLocationComponent
      ],
      exports: [
        DxiLocationComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiLocationModule, { declarations: [DxiLocationComponent], exports: [DxiLocationComponent] });
})();
var _c0$3 = ["*"];
var DxiItemComponent = class extends DxiButtonGroupItem {
  constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
    super();
    this.renderer = renderer;
    this.document = document;
    this.element = element;
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
    templateHost.setHost(this);
  }
  get _optionPath() {
    return "items";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  get validationRulesChildren() {
    return this._getOption("validationRules");
  }
  set validationRulesChildren(value) {
    this.setChildren("validationRules", value);
  }
  get tabsChildren() {
    return this._getOption("tabs");
  }
  set tabsChildren(value) {
    this.setChildren("tabs", value);
  }
  get locationChildren() {
    return this._getOption("location");
  }
  set locationChildren(value) {
    this.setChildren("location", value);
  }
  setTemplate(template) {
    this.template = template;
  }
  ngAfterViewInit() {
    extractTemplate(this, this.element, this.renderer, this.document);
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiItemComponent.ɵfac = function DxiItemComponent_Factory(t) {
  return new (t || DxiItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(DxTemplateHost, 1), ɵɵdirectiveInject(ElementRef));
};
DxiItemComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiItemComponent, selectors: [["dxi-item"]], contentQueries: function DxiItemComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiValidationRuleComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiTabComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiLocationComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.validationRulesChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.tabsChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.locationChildren = _t);
  }
}, inputs: { disabled: "disabled", html: "html", icon: "icon", template: "template", text: "text", title: "title", titleTemplate: "titleTemplate", visible: "visible", onClick: "onClick", stylingMode: "stylingMode", type: "type", baseSize: "baseSize", box: "box", ratio: "ratio", shrink: "shrink", elementAttr: "elementAttr", hint: "hint", beginGroup: "beginGroup", closeMenuOnClick: "closeMenuOnClick", items: "items", selectable: "selectable", selected: "selected", colSpan: "colSpan", cssClass: "cssClass", dataField: "dataField", editorOptions: "editorOptions", editorType: "editorType", helpText: "helpText", isRequired: "isRequired", itemType: "itemType", label: "label", name: "name", validationRules: "validationRules", visibleIndex: "visibleIndex", alignItemLabels: "alignItemLabels", caption: "caption", colCount: "colCount", colCountByScreen: "colCountByScreen", tabPanelOptions: "tabPanelOptions", tabs: "tabs", badge: "badge", tabTemplate: "tabTemplate", buttonOptions: "buttonOptions", horizontalAlignment: "horizontalAlignment", verticalAlignment: "verticalAlignment", locateInMenu: "locateInMenu", location: "location", menuItemTemplate: "menuItemTemplate", options: "options", showText: "showText", widget: "widget", height: "height", width: "width", imageAlt: "imageAlt", imageSrc: "imageSrc", acceptedValues: "acceptedValues", formatName: "formatName", formatValues: "formatValues", key: "key", showChevron: "showChevron", linkAttr: "linkAttr", url: "url", heightRatio: "heightRatio", widthRatio: "widthRatio", expanded: "expanded", hasItems: "hasItems", id: "id", parentId: "parentId" }, features: [ɵɵProvidersFeature([NestedOptionHost, DxTemplateHost]), ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$3, decls: 1, vars: 0, template: function DxiItemComponent_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojectionDef();
    ɵɵprojection(0);
  }
}, styles: ["[_nghost-%COMP%] { display: block; }"] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiItemComponent, [{
    type: Component,
    args: [{
      selector: "dxi-item",
      template: "<ng-content></ng-content>",
      styles: [":host { display: block; }"],
      providers: [NestedOptionHost, DxTemplateHost],
      inputs: [
        "disabled",
        "html",
        "icon",
        "template",
        "text",
        "title",
        "titleTemplate",
        "visible",
        "onClick",
        "stylingMode",
        "type",
        "baseSize",
        "box",
        "ratio",
        "shrink",
        "elementAttr",
        "hint",
        "beginGroup",
        "closeMenuOnClick",
        "items",
        "selectable",
        "selected",
        "colSpan",
        "cssClass",
        "dataField",
        "editorOptions",
        "editorType",
        "helpText",
        "isRequired",
        "itemType",
        "label",
        "name",
        "validationRules",
        "visibleIndex",
        "alignItemLabels",
        "caption",
        "colCount",
        "colCountByScreen",
        "tabPanelOptions",
        "tabs",
        "badge",
        "tabTemplate",
        "buttonOptions",
        "horizontalAlignment",
        "verticalAlignment",
        "locateInMenu",
        "location",
        "menuItemTemplate",
        "options",
        "showText",
        "widget",
        "height",
        "width",
        "imageAlt",
        "imageSrc",
        "acceptedValues",
        "formatName",
        "formatValues",
        "key",
        "showChevron",
        "linkAttr",
        "url",
        "heightRatio",
        "widthRatio",
        "expanded",
        "hasItems",
        "id",
        "parentId"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }, { type: Renderer2 }, { type: void 0, decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }] }, { type: DxTemplateHost, decorators: [{
      type: Host
    }] }, { type: ElementRef }];
  }, { itemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiItemComponent)]
  }], validationRulesChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiValidationRuleComponent)]
  }], tabsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiTabComponent)]
  }], locationChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiLocationComponent)]
  }] });
})();
var DxiItemModule = class {
};
DxiItemModule.ɵfac = function DxiItemModule_Factory(t) {
  return new (t || DxiItemModule)();
};
DxiItemModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiItemModule });
DxiItemModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiItemModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiItemComponent
      ],
      exports: [
        DxiItemComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiItemModule, { declarations: [DxiItemComponent], exports: [DxiItemComponent] });
})();
var DxoBoxComponent = class extends DxoBoxOptions {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "itemsChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "box";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoBoxComponent.ɵfac = function DxoBoxComponent_Factory(t) {
  return new (t || DxoBoxComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoBoxComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoBoxComponent, selectors: [["dxo-box"]], contentQueries: function DxoBoxComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
  }
}, inputs: { align: "align", crossAlign: "crossAlign", dataSource: "dataSource", direction: "direction", disabled: "disabled", elementAttr: "elementAttr", height: "height", hoverStateEnabled: "hoverStateEnabled", itemHoldTimeout: "itemHoldTimeout", items: "items", itemTemplate: "itemTemplate", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onItemClick: "onItemClick", onItemContextMenu: "onItemContextMenu", onItemHold: "onItemHold", onItemRendered: "onItemRendered", onOptionChanged: "onOptionChanged", rtlEnabled: "rtlEnabled", visible: "visible", width: "width" }, outputs: { itemsChange: "itemsChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoBoxComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBoxComponent, [{
    type: Component,
    args: [{
      selector: "dxo-box",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "align",
        "crossAlign",
        "dataSource",
        "direction",
        "disabled",
        "elementAttr",
        "height",
        "hoverStateEnabled",
        "itemHoldTimeout",
        "items",
        "itemTemplate",
        "onContentReady",
        "onDisposing",
        "onInitialized",
        "onItemClick",
        "onItemContextMenu",
        "onItemHold",
        "onItemRendered",
        "onOptionChanged",
        "rtlEnabled",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { itemsChange: [{
    type: Output
  }], itemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiItemComponent)]
  }] });
})();
var DxoBoxModule = class {
};
DxoBoxModule.ɵfac = function DxoBoxModule_Factory(t) {
  return new (t || DxoBoxModule)();
};
DxoBoxModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoBoxModule });
DxoBoxModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBoxModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoBoxComponent
      ],
      exports: [
        DxoBoxComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoBoxModule, { declarations: [DxoBoxComponent], exports: [DxoBoxComponent] });
})();
var DxoBreakStyleComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get line() {
    return this._getOption("line");
  }
  set line(value) {
    this._setOption("line", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "breakStyle";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoBreakStyleComponent.ɵfac = function DxoBreakStyleComponent_Factory(t) {
  return new (t || DxoBreakStyleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoBreakStyleComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoBreakStyleComponent, selectors: [["dxo-break-style"]], inputs: { color: "color", line: "line", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoBreakStyleComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBreakStyleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-break-style",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], line: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoBreakStyleModule = class {
};
DxoBreakStyleModule.ɵfac = function DxoBreakStyleModule_Factory(t) {
  return new (t || DxoBreakStyleModule)();
};
DxoBreakStyleModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoBreakStyleModule });
DxoBreakStyleModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBreakStyleModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoBreakStyleComponent
      ],
      exports: [
        DxoBreakStyleComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoBreakStyleModule, { declarations: [DxoBreakStyleComponent], exports: [DxoBreakStyleComponent] });
})();
var DxoBubbleComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "bubble";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoBubbleComponent.ɵfac = function DxoBubbleComponent_Factory(t) {
  return new (t || DxoBubbleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoBubbleComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoBubbleComponent, selectors: [["dxo-bubble"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoBubbleComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBubbleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-bubble",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoBubbleModule = class {
};
DxoBubbleModule.ɵfac = function DxoBubbleModule_Factory(t) {
  return new (t || DxoBubbleModule)();
};
DxoBubbleModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoBubbleModule });
DxoBubbleModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoBubbleModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoBubbleComponent
      ],
      exports: [
        DxoBubbleComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoBubbleModule, { declarations: [DxoBubbleComponent], exports: [DxoBubbleComponent] });
})();
var DxiTextEditorButton = class extends CollectionNestedOption {
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get options() {
    return this._getOption("options");
  }
  set options(value) {
    this._setOption("options", value);
  }
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get icon() {
    return this._getOption("icon");
  }
  set icon(value) {
    this._setOption("icon", value);
  }
  get onClick() {
    return this._getOption("onClick");
  }
  set onClick(value) {
    this._setOption("onClick", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
};
DxiTextEditorButton.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxiTextEditorButton_BaseFactory;
  return function DxiTextEditorButton_Factory(t) {
    return (ɵDxiTextEditorButton_BaseFactory || (ɵDxiTextEditorButton_BaseFactory = ɵɵgetInheritedFactory(DxiTextEditorButton)))(t || DxiTextEditorButton);
  };
}();
DxiTextEditorButton.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiTextEditorButton, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiTextEditorButton_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiTextEditorButton, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiButtonComponent = class extends DxiTextEditorButton {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "buttons";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiButtonComponent.ɵfac = function DxiButtonComponent_Factory(t) {
  return new (t || DxiButtonComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiButtonComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiButtonComponent, selectors: [["dxi-button"]], inputs: { location: "location", name: "name", options: "options", cssClass: "cssClass", disabled: "disabled", hint: "hint", icon: "icon", onClick: "onClick", template: "template", text: "text", visible: "visible" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiButtonComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiButtonComponent, [{
    type: Component,
    args: [{
      selector: "dxi-button",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "location",
        "name",
        "options",
        "cssClass",
        "disabled",
        "hint",
        "icon",
        "onClick",
        "template",
        "text",
        "visible"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxiButtonModule = class {
};
DxiButtonModule.ɵfac = function DxiButtonModule_Factory(t) {
  return new (t || DxiButtonModule)();
};
DxiButtonModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiButtonModule });
DxiButtonModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiButtonModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiButtonComponent
      ],
      exports: [
        DxiButtonComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiButtonModule, { declarations: [DxiButtonComponent], exports: [DxiButtonComponent] });
})();
var DxoButtonOptions = class extends NestedOption {
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get activeStateEnabled() {
    return this._getOption("activeStateEnabled");
  }
  set activeStateEnabled(value) {
    this._setOption("activeStateEnabled", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get icon() {
    return this._getOption("icon");
  }
  set icon(value) {
    this._setOption("icon", value);
  }
  get onClick() {
    return this._getOption("onClick");
  }
  set onClick(value) {
    this._setOption("onClick", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get stylingMode() {
    return this._getOption("stylingMode");
  }
  set stylingMode(value) {
    this._setOption("stylingMode", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get useSubmitBehavior() {
    return this._getOption("useSubmitBehavior");
  }
  set useSubmitBehavior(value) {
    this._setOption("useSubmitBehavior", value);
  }
  get validationGroup() {
    return this._getOption("validationGroup");
  }
  set validationGroup(value) {
    this._setOption("validationGroup", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
};
DxoButtonOptions.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoButtonOptions_BaseFactory;
  return function DxoButtonOptions_Factory(t) {
    return (ɵDxoButtonOptions_BaseFactory || (ɵDxoButtonOptions_BaseFactory = ɵɵgetInheritedFactory(DxoButtonOptions)))(t || DxoButtonOptions);
  };
}();
DxoButtonOptions.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoButtonOptions, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoButtonOptions_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoButtonOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoButtonOptionsComponent = class extends DxoButtonOptions {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "buttonOptions";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoButtonOptionsComponent.ɵfac = function DxoButtonOptionsComponent_Factory(t) {
  return new (t || DxoButtonOptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoButtonOptionsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoButtonOptionsComponent, selectors: [["dxo-button-options"]], inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", icon: "icon", onClick: "onClick", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", rtlEnabled: "rtlEnabled", stylingMode: "stylingMode", tabIndex: "tabIndex", template: "template", text: "text", type: "type", useSubmitBehavior: "useSubmitBehavior", validationGroup: "validationGroup", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoButtonOptionsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoButtonOptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-button-options",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "accessKey",
        "activeStateEnabled",
        "disabled",
        "elementAttr",
        "focusStateEnabled",
        "height",
        "hint",
        "hoverStateEnabled",
        "icon",
        "onClick",
        "onContentReady",
        "onDisposing",
        "onInitialized",
        "onOptionChanged",
        "rtlEnabled",
        "stylingMode",
        "tabIndex",
        "template",
        "text",
        "type",
        "useSubmitBehavior",
        "validationGroup",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoButtonOptionsModule = class {
};
DxoButtonOptionsModule.ɵfac = function DxoButtonOptionsModule_Factory(t) {
  return new (t || DxoButtonOptionsModule)();
};
DxoButtonOptionsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoButtonOptionsModule });
DxoButtonOptionsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoButtonOptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoButtonOptionsComponent
      ],
      exports: [
        DxoButtonOptionsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoButtonOptionsModule, { declarations: [DxoButtonOptionsComponent], exports: [DxoButtonOptionsComponent] });
})();
var DxoCalendarOptions = class extends NestedOption {
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get activeStateEnabled() {
    return this._getOption("activeStateEnabled");
  }
  set activeStateEnabled(value) {
    this._setOption("activeStateEnabled", value);
  }
  get cellTemplate() {
    return this._getOption("cellTemplate");
  }
  set cellTemplate(value) {
    this._setOption("cellTemplate", value);
  }
  get dateSerializationFormat() {
    return this._getOption("dateSerializationFormat");
  }
  set dateSerializationFormat(value) {
    this._setOption("dateSerializationFormat", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get disabledDates() {
    return this._getOption("disabledDates");
  }
  set disabledDates(value) {
    this._setOption("disabledDates", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get firstDayOfWeek() {
    return this._getOption("firstDayOfWeek");
  }
  set firstDayOfWeek(value) {
    this._setOption("firstDayOfWeek", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get isDirty() {
    return this._getOption("isDirty");
  }
  set isDirty(value) {
    this._setOption("isDirty", value);
  }
  get isValid() {
    return this._getOption("isValid");
  }
  set isValid(value) {
    this._setOption("isValid", value);
  }
  get max() {
    return this._getOption("max");
  }
  set max(value) {
    this._setOption("max", value);
  }
  get maxZoomLevel() {
    return this._getOption("maxZoomLevel");
  }
  set maxZoomLevel(value) {
    this._setOption("maxZoomLevel", value);
  }
  get min() {
    return this._getOption("min");
  }
  set min(value) {
    this._setOption("min", value);
  }
  get minZoomLevel() {
    return this._getOption("minZoomLevel");
  }
  set minZoomLevel(value) {
    this._setOption("minZoomLevel", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get onValueChanged() {
    return this._getOption("onValueChanged");
  }
  set onValueChanged(value) {
    this._setOption("onValueChanged", value);
  }
  get readOnly() {
    return this._getOption("readOnly");
  }
  set readOnly(value) {
    this._setOption("readOnly", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get selectionMode() {
    return this._getOption("selectionMode");
  }
  set selectionMode(value) {
    this._setOption("selectionMode", value);
  }
  get selectWeekOnClick() {
    return this._getOption("selectWeekOnClick");
  }
  set selectWeekOnClick(value) {
    this._setOption("selectWeekOnClick", value);
  }
  get showTodayButton() {
    return this._getOption("showTodayButton");
  }
  set showTodayButton(value) {
    this._setOption("showTodayButton", value);
  }
  get showWeekNumbers() {
    return this._getOption("showWeekNumbers");
  }
  set showWeekNumbers(value) {
    this._setOption("showWeekNumbers", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get validationError() {
    return this._getOption("validationError");
  }
  set validationError(value) {
    this._setOption("validationError", value);
  }
  get validationErrors() {
    return this._getOption("validationErrors");
  }
  set validationErrors(value) {
    this._setOption("validationErrors", value);
  }
  get validationMessageMode() {
    return this._getOption("validationMessageMode");
  }
  set validationMessageMode(value) {
    this._setOption("validationMessageMode", value);
  }
  get validationMessagePosition() {
    return this._getOption("validationMessagePosition");
  }
  set validationMessagePosition(value) {
    this._setOption("validationMessagePosition", value);
  }
  get validationStatus() {
    return this._getOption("validationStatus");
  }
  set validationStatus(value) {
    this._setOption("validationStatus", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get weekNumberRule() {
    return this._getOption("weekNumberRule");
  }
  set weekNumberRule(value) {
    this._setOption("weekNumberRule", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get zoomLevel() {
    return this._getOption("zoomLevel");
  }
  set zoomLevel(value) {
    this._setOption("zoomLevel", value);
  }
};
DxoCalendarOptions.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoCalendarOptions_BaseFactory;
  return function DxoCalendarOptions_Factory(t) {
    return (ɵDxoCalendarOptions_BaseFactory || (ɵDxoCalendarOptions_BaseFactory = ɵɵgetInheritedFactory(DxoCalendarOptions)))(t || DxoCalendarOptions);
  };
}();
DxoCalendarOptions.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoCalendarOptions, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoCalendarOptions_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCalendarOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoCalendarOptionsComponent = class extends DxoCalendarOptions {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "valueChange" },
      { emit: "zoomLevelChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "calendarOptions";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoCalendarOptionsComponent.ɵfac = function DxoCalendarOptionsComponent_Factory(t) {
  return new (t || DxoCalendarOptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoCalendarOptionsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoCalendarOptionsComponent, selectors: [["dxo-calendar-options"]], inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", cellTemplate: "cellTemplate", dateSerializationFormat: "dateSerializationFormat", disabled: "disabled", disabledDates: "disabledDates", elementAttr: "elementAttr", firstDayOfWeek: "firstDayOfWeek", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", isDirty: "isDirty", isValid: "isValid", max: "max", maxZoomLevel: "maxZoomLevel", min: "min", minZoomLevel: "minZoomLevel", name: "name", onDisposing: "onDisposing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onValueChanged: "onValueChanged", readOnly: "readOnly", rtlEnabled: "rtlEnabled", selectionMode: "selectionMode", selectWeekOnClick: "selectWeekOnClick", showTodayButton: "showTodayButton", showWeekNumbers: "showWeekNumbers", tabIndex: "tabIndex", validationError: "validationError", validationErrors: "validationErrors", validationMessageMode: "validationMessageMode", validationMessagePosition: "validationMessagePosition", validationStatus: "validationStatus", value: "value", visible: "visible", weekNumberRule: "weekNumberRule", width: "width", zoomLevel: "zoomLevel" }, outputs: { valueChange: "valueChange", zoomLevelChange: "zoomLevelChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoCalendarOptionsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCalendarOptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-calendar-options",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "accessKey",
        "activeStateEnabled",
        "cellTemplate",
        "dateSerializationFormat",
        "disabled",
        "disabledDates",
        "elementAttr",
        "firstDayOfWeek",
        "focusStateEnabled",
        "height",
        "hint",
        "hoverStateEnabled",
        "isDirty",
        "isValid",
        "max",
        "maxZoomLevel",
        "min",
        "minZoomLevel",
        "name",
        "onDisposing",
        "onInitialized",
        "onOptionChanged",
        "onValueChanged",
        "readOnly",
        "rtlEnabled",
        "selectionMode",
        "selectWeekOnClick",
        "showTodayButton",
        "showWeekNumbers",
        "tabIndex",
        "validationError",
        "validationErrors",
        "validationMessageMode",
        "validationMessagePosition",
        "validationStatus",
        "value",
        "visible",
        "weekNumberRule",
        "width",
        "zoomLevel"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { valueChange: [{
    type: Output
  }], zoomLevelChange: [{
    type: Output
  }] });
})();
var DxoCalendarOptionsModule = class {
};
DxoCalendarOptionsModule.ɵfac = function DxoCalendarOptionsModule_Factory(t) {
  return new (t || DxoCalendarOptionsModule)();
};
DxoCalendarOptionsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoCalendarOptionsModule });
DxoCalendarOptionsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCalendarOptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoCalendarOptionsComponent
      ],
      exports: [
        DxoCalendarOptionsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoCalendarOptionsModule, { declarations: [DxoCalendarOptionsComponent], exports: [DxoCalendarOptionsComponent] });
})();
var DxoCandlestickComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "candlestick";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoCandlestickComponent.ɵfac = function DxoCandlestickComponent_Factory(t) {
  return new (t || DxoCandlestickComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoCandlestickComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoCandlestickComponent, selectors: [["dxo-candlestick"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoCandlestickComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCandlestickComponent, [{
    type: Component,
    args: [{
      selector: "dxo-candlestick",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoCandlestickModule = class {
};
DxoCandlestickModule.ɵfac = function DxoCandlestickModule_Factory(t) {
  return new (t || DxoCandlestickModule)();
};
DxoCandlestickModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoCandlestickModule });
DxoCandlestickModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCandlestickModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoCandlestickComponent
      ],
      exports: [
        DxoCandlestickComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoCandlestickModule, { declarations: [DxoCandlestickComponent], exports: [DxoCandlestickComponent] });
})();
var DxiCenterComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get lat() {
    return this._getOption("lat");
  }
  set lat(value) {
    this._setOption("lat", value);
  }
  get lng() {
    return this._getOption("lng");
  }
  set lng(value) {
    this._setOption("lng", value);
  }
  get _optionPath() {
    return "center";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiCenterComponent.ɵfac = function DxiCenterComponent_Factory(t) {
  return new (t || DxiCenterComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiCenterComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiCenterComponent, selectors: [["dxi-center"]], inputs: { lat: "lat", lng: "lng" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiCenterComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCenterComponent, [{
    type: Component,
    args: [{
      selector: "dxi-center",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { lat: [{
    type: Input
  }], lng: [{
    type: Input
  }] });
})();
var DxiCenterModule = class {
};
DxiCenterModule.ɵfac = function DxiCenterModule_Factory(t) {
  return new (t || DxiCenterModule)();
};
DxiCenterModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiCenterModule });
DxiCenterModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCenterModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiCenterComponent
      ],
      exports: [
        DxiCenterComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiCenterModule, { declarations: [DxiCenterComponent], exports: [DxiCenterComponent] });
})();
var DxiDataChange = class extends CollectionNestedOption {
  get data() {
    return this._getOption("data");
  }
  set data(value) {
    this._setOption("data", value);
  }
  get insertAfterKey() {
    return this._getOption("insertAfterKey");
  }
  set insertAfterKey(value) {
    this._setOption("insertAfterKey", value);
  }
  get insertBeforeKey() {
    return this._getOption("insertBeforeKey");
  }
  set insertBeforeKey(value) {
    this._setOption("insertBeforeKey", value);
  }
  get key() {
    return this._getOption("key");
  }
  set key(value) {
    this._setOption("key", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
};
DxiDataChange.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxiDataChange_BaseFactory;
  return function DxiDataChange_Factory(t) {
    return (ɵDxiDataChange_BaseFactory || (ɵDxiDataChange_BaseFactory = ɵɵgetInheritedFactory(DxiDataChange)))(t || DxiDataChange);
  };
}();
DxiDataChange.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiDataChange, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiDataChange_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiDataChange, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiChangeComponent = class extends DxiDataChange {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "changes";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiChangeComponent.ɵfac = function DxiChangeComponent_Factory(t) {
  return new (t || DxiChangeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiChangeComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiChangeComponent, selectors: [["dxi-change"]], inputs: { data: "data", insertAfterKey: "insertAfterKey", insertBeforeKey: "insertBeforeKey", key: "key", type: "type" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiChangeComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiChangeComponent, [{
    type: Component,
    args: [{
      selector: "dxi-change",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "data",
        "insertAfterKey",
        "insertBeforeKey",
        "key",
        "type"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxiChangeModule = class {
};
DxiChangeModule.ɵfac = function DxiChangeModule_Factory(t) {
  return new (t || DxiChangeModule)();
};
DxiChangeModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiChangeModule });
DxiChangeModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiChangeModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiChangeComponent
      ],
      exports: [
        DxiChangeComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiChangeModule, { declarations: [DxiChangeComponent], exports: [DxiChangeComponent] });
})();
var DxiChartSeries = class extends CollectionNestedOption {
  get aggregation() {
    return this._getOption("aggregation");
  }
  set aggregation(value) {
    this._setOption("aggregation", value);
  }
  get argumentField() {
    return this._getOption("argumentField");
  }
  set argumentField(value) {
    this._setOption("argumentField", value);
  }
  get axis() {
    return this._getOption("axis");
  }
  set axis(value) {
    this._setOption("axis", value);
  }
  get barOverlapGroup() {
    return this._getOption("barOverlapGroup");
  }
  set barOverlapGroup(value) {
    this._setOption("barOverlapGroup", value);
  }
  get barPadding() {
    return this._getOption("barPadding");
  }
  set barPadding(value) {
    this._setOption("barPadding", value);
  }
  get barWidth() {
    return this._getOption("barWidth");
  }
  set barWidth(value) {
    this._setOption("barWidth", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get closeValueField() {
    return this._getOption("closeValueField");
  }
  set closeValueField(value) {
    this._setOption("closeValueField", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get cornerRadius() {
    return this._getOption("cornerRadius");
  }
  set cornerRadius(value) {
    this._setOption("cornerRadius", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get highValueField() {
    return this._getOption("highValueField");
  }
  set highValueField(value) {
    this._setOption("highValueField", value);
  }
  get hoverMode() {
    return this._getOption("hoverMode");
  }
  set hoverMode(value) {
    this._setOption("hoverMode", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get ignoreEmptyPoints() {
    return this._getOption("ignoreEmptyPoints");
  }
  set ignoreEmptyPoints(value) {
    this._setOption("ignoreEmptyPoints", value);
  }
  get innerColor() {
    return this._getOption("innerColor");
  }
  set innerColor(value) {
    this._setOption("innerColor", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get lowValueField() {
    return this._getOption("lowValueField");
  }
  set lowValueField(value) {
    this._setOption("lowValueField", value);
  }
  get maxLabelCount() {
    return this._getOption("maxLabelCount");
  }
  set maxLabelCount(value) {
    this._setOption("maxLabelCount", value);
  }
  get minBarSize() {
    return this._getOption("minBarSize");
  }
  set minBarSize(value) {
    this._setOption("minBarSize", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get openValueField() {
    return this._getOption("openValueField");
  }
  set openValueField(value) {
    this._setOption("openValueField", value);
  }
  get pane() {
    return this._getOption("pane");
  }
  set pane(value) {
    this._setOption("pane", value);
  }
  get point() {
    return this._getOption("point");
  }
  set point(value) {
    this._setOption("point", value);
  }
  get rangeValue1Field() {
    return this._getOption("rangeValue1Field");
  }
  set rangeValue1Field(value) {
    this._setOption("rangeValue1Field", value);
  }
  get rangeValue2Field() {
    return this._getOption("rangeValue2Field");
  }
  set rangeValue2Field(value) {
    this._setOption("rangeValue2Field", value);
  }
  get reduction() {
    return this._getOption("reduction");
  }
  set reduction(value) {
    this._setOption("reduction", value);
  }
  get selectionMode() {
    return this._getOption("selectionMode");
  }
  set selectionMode(value) {
    this._setOption("selectionMode", value);
  }
  get selectionStyle() {
    return this._getOption("selectionStyle");
  }
  set selectionStyle(value) {
    this._setOption("selectionStyle", value);
  }
  get showInLegend() {
    return this._getOption("showInLegend");
  }
  set showInLegend(value) {
    this._setOption("showInLegend", value);
  }
  get sizeField() {
    return this._getOption("sizeField");
  }
  set sizeField(value) {
    this._setOption("sizeField", value);
  }
  get stack() {
    return this._getOption("stack");
  }
  set stack(value) {
    this._setOption("stack", value);
  }
  get tag() {
    return this._getOption("tag");
  }
  set tag(value) {
    this._setOption("tag", value);
  }
  get tagField() {
    return this._getOption("tagField");
  }
  set tagField(value) {
    this._setOption("tagField", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get valueErrorBar() {
    return this._getOption("valueErrorBar");
  }
  set valueErrorBar(value) {
    this._setOption("valueErrorBar", value);
  }
  get valueField() {
    return this._getOption("valueField");
  }
  set valueField(value) {
    this._setOption("valueField", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get argumentType() {
    return this._getOption("argumentType");
  }
  set argumentType(value) {
    this._setOption("argumentType", value);
  }
  get minSegmentSize() {
    return this._getOption("minSegmentSize");
  }
  set minSegmentSize(value) {
    this._setOption("minSegmentSize", value);
  }
  get smallValuesGrouping() {
    return this._getOption("smallValuesGrouping");
  }
  set smallValuesGrouping(value) {
    this._setOption("smallValuesGrouping", value);
  }
  get closed() {
    return this._getOption("closed");
  }
  set closed(value) {
    this._setOption("closed", value);
  }
};
DxiChartSeries.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxiChartSeries_BaseFactory;
  return function DxiChartSeries_Factory(t) {
    return (ɵDxiChartSeries_BaseFactory || (ɵDxiChartSeries_BaseFactory = ɵɵgetInheritedFactory(DxiChartSeries)))(t || DxiChartSeries);
  };
}();
DxiChartSeries.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiChartSeries, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiChartSeries_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiChartSeries, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiSeriesComponent = class extends DxiChartSeries {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "series";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiSeriesComponent.ɵfac = function DxiSeriesComponent_Factory(t) {
  return new (t || DxiSeriesComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiSeriesComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiSeriesComponent, selectors: [["dxi-series"]], inputs: { aggregation: "aggregation", argumentField: "argumentField", axis: "axis", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", name: "name", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", stack: "stack", tag: "tag", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", argumentType: "argumentType", minSegmentSize: "minSegmentSize", smallValuesGrouping: "smallValuesGrouping", closed: "closed" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiSeriesComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiSeriesComponent, [{
    type: Component,
    args: [{
      selector: "dxi-series",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "argumentField",
        "axis",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "name",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "stack",
        "tag",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width",
        "argumentType",
        "minSegmentSize",
        "smallValuesGrouping",
        "closed"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxiSeriesModule = class {
};
DxiSeriesModule.ɵfac = function DxiSeriesModule_Factory(t) {
  return new (t || DxiSeriesModule)();
};
DxiSeriesModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiSeriesModule });
DxiSeriesModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiSeriesModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiSeriesComponent
      ],
      exports: [
        DxiSeriesComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiSeriesModule, { declarations: [DxiSeriesComponent], exports: [DxiSeriesComponent] });
})();
var DxoChartComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get barGroupPadding() {
    return this._getOption("barGroupPadding");
  }
  set barGroupPadding(value) {
    this._setOption("barGroupPadding", value);
  }
  get barGroupWidth() {
    return this._getOption("barGroupWidth");
  }
  set barGroupWidth(value) {
    this._setOption("barGroupWidth", value);
  }
  get bottomIndent() {
    return this._getOption("bottomIndent");
  }
  set bottomIndent(value) {
    this._setOption("bottomIndent", value);
  }
  get commonSeriesSettings() {
    return this._getOption("commonSeriesSettings");
  }
  set commonSeriesSettings(value) {
    this._setOption("commonSeriesSettings", value);
  }
  get dataPrepareSettings() {
    return this._getOption("dataPrepareSettings");
  }
  set dataPrepareSettings(value) {
    this._setOption("dataPrepareSettings", value);
  }
  get maxBubbleSize() {
    return this._getOption("maxBubbleSize");
  }
  set maxBubbleSize(value) {
    this._setOption("maxBubbleSize", value);
  }
  get minBubbleSize() {
    return this._getOption("minBubbleSize");
  }
  set minBubbleSize(value) {
    this._setOption("minBubbleSize", value);
  }
  get negativesAsZeroes() {
    return this._getOption("negativesAsZeroes");
  }
  set negativesAsZeroes(value) {
    this._setOption("negativesAsZeroes", value);
  }
  get palette() {
    return this._getOption("palette");
  }
  set palette(value) {
    this._setOption("palette", value);
  }
  get paletteExtensionMode() {
    return this._getOption("paletteExtensionMode");
  }
  set paletteExtensionMode(value) {
    this._setOption("paletteExtensionMode", value);
  }
  get series() {
    return this._getOption("series");
  }
  set series(value) {
    this._setOption("series", value);
  }
  get seriesTemplate() {
    return this._getOption("seriesTemplate");
  }
  set seriesTemplate(value) {
    this._setOption("seriesTemplate", value);
  }
  get topIndent() {
    return this._getOption("topIndent");
  }
  set topIndent(value) {
    this._setOption("topIndent", value);
  }
  get valueAxis() {
    return this._getOption("valueAxis");
  }
  set valueAxis(value) {
    this._setOption("valueAxis", value);
  }
  get _optionPath() {
    return "chart";
  }
  get seriesChildren() {
    return this._getOption("series");
  }
  set seriesChildren(value) {
    this.setChildren("series", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoChartComponent.ɵfac = function DxoChartComponent_Factory(t) {
  return new (t || DxoChartComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoChartComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoChartComponent, selectors: [["dxo-chart"]], contentQueries: function DxoChartComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiSeriesComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.seriesChildren = _t);
  }
}, inputs: { barGroupPadding: "barGroupPadding", barGroupWidth: "barGroupWidth", bottomIndent: "bottomIndent", commonSeriesSettings: "commonSeriesSettings", dataPrepareSettings: "dataPrepareSettings", maxBubbleSize: "maxBubbleSize", minBubbleSize: "minBubbleSize", negativesAsZeroes: "negativesAsZeroes", palette: "palette", paletteExtensionMode: "paletteExtensionMode", series: "series", seriesTemplate: "seriesTemplate", topIndent: "topIndent", valueAxis: "valueAxis" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoChartComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoChartComponent, [{
    type: Component,
    args: [{
      selector: "dxo-chart",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { barGroupPadding: [{
    type: Input
  }], barGroupWidth: [{
    type: Input
  }], bottomIndent: [{
    type: Input
  }], commonSeriesSettings: [{
    type: Input
  }], dataPrepareSettings: [{
    type: Input
  }], maxBubbleSize: [{
    type: Input
  }], minBubbleSize: [{
    type: Input
  }], negativesAsZeroes: [{
    type: Input
  }], palette: [{
    type: Input
  }], paletteExtensionMode: [{
    type: Input
  }], series: [{
    type: Input
  }], seriesTemplate: [{
    type: Input
  }], topIndent: [{
    type: Input
  }], valueAxis: [{
    type: Input
  }], seriesChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiSeriesComponent)]
  }] });
})();
var DxoChartModule = class {
};
DxoChartModule.ɵfac = function DxoChartModule_Factory(t) {
  return new (t || DxoChartModule)();
};
DxoChartModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoChartModule });
DxoChartModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoChartModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoChartComponent
      ],
      exports: [
        DxoChartComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoChartModule, { declarations: [DxoChartComponent], exports: [DxoChartComponent] });
})();
var DxoColCountByScreenComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get lg() {
    return this._getOption("lg");
  }
  set lg(value) {
    this._setOption("lg", value);
  }
  get md() {
    return this._getOption("md");
  }
  set md(value) {
    this._setOption("md", value);
  }
  get sm() {
    return this._getOption("sm");
  }
  set sm(value) {
    this._setOption("sm", value);
  }
  get xs() {
    return this._getOption("xs");
  }
  set xs(value) {
    this._setOption("xs", value);
  }
  get _optionPath() {
    return "colCountByScreen";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoColCountByScreenComponent.ɵfac = function DxoColCountByScreenComponent_Factory(t) {
  return new (t || DxoColCountByScreenComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoColCountByScreenComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoColCountByScreenComponent, selectors: [["dxo-col-count-by-screen"]], inputs: { lg: "lg", md: "md", sm: "sm", xs: "xs" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoColCountByScreenComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColCountByScreenComponent, [{
    type: Component,
    args: [{
      selector: "dxo-col-count-by-screen",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { lg: [{
    type: Input
  }], md: [{
    type: Input
  }], sm: [{
    type: Input
  }], xs: [{
    type: Input
  }] });
})();
var DxoColCountByScreenModule = class {
};
DxoColCountByScreenModule.ɵfac = function DxoColCountByScreenModule_Factory(t) {
  return new (t || DxoColCountByScreenModule)();
};
DxoColCountByScreenModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoColCountByScreenModule });
DxoColCountByScreenModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColCountByScreenModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoColCountByScreenComponent
      ],
      exports: [
        DxoColCountByScreenComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoColCountByScreenModule, { declarations: [DxoColCountByScreenComponent], exports: [DxoColCountByScreenComponent] });
})();
var DxiColComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get baseSize() {
    return this._getOption("baseSize");
  }
  set baseSize(value) {
    this._setOption("baseSize", value);
  }
  get ratio() {
    return this._getOption("ratio");
  }
  set ratio(value) {
    this._setOption("ratio", value);
  }
  get screen() {
    return this._getOption("screen");
  }
  set screen(value) {
    this._setOption("screen", value);
  }
  get shrink() {
    return this._getOption("shrink");
  }
  set shrink(value) {
    this._setOption("shrink", value);
  }
  get _optionPath() {
    return "cols";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiColComponent.ɵfac = function DxiColComponent_Factory(t) {
  return new (t || DxiColComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiColComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiColComponent, selectors: [["dxi-col"]], inputs: { baseSize: "baseSize", ratio: "ratio", screen: "screen", shrink: "shrink" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiColComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiColComponent, [{
    type: Component,
    args: [{
      selector: "dxi-col",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { baseSize: [{
    type: Input
  }], ratio: [{
    type: Input
  }], screen: [{
    type: Input
  }], shrink: [{
    type: Input
  }] });
})();
var DxiColModule = class {
};
DxiColModule.ɵfac = function DxiColModule_Factory(t) {
  return new (t || DxiColModule)();
};
DxiColModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiColModule });
DxiColModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiColModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiColComponent
      ],
      exports: [
        DxiColComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiColModule, { declarations: [DxiColComponent], exports: [DxiColComponent] });
})();
var DxoCollisionComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get _optionPath() {
    return "collision";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoCollisionComponent.ɵfac = function DxoCollisionComponent_Factory(t) {
  return new (t || DxoCollisionComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoCollisionComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoCollisionComponent, selectors: [["dxo-collision"]], inputs: { x: "x", y: "y" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoCollisionComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCollisionComponent, [{
    type: Component,
    args: [{
      selector: "dxo-collision",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { x: [{
    type: Input
  }], y: [{
    type: Input
  }] });
})();
var DxoCollisionModule = class {
};
DxoCollisionModule.ɵfac = function DxoCollisionModule_Factory(t) {
  return new (t || DxoCollisionModule)();
};
DxoCollisionModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoCollisionModule });
DxoCollisionModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCollisionModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoCollisionComponent
      ],
      exports: [
        DxoCollisionComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoCollisionModule, { declarations: [DxoCollisionComponent], exports: [DxoCollisionComponent] });
})();
var DxoColorComponent = class extends DxoChartsColor {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "color";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoColorComponent.ɵfac = function DxoColorComponent_Factory(t) {
  return new (t || DxoColorComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoColorComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoColorComponent, selectors: [["dxo-color"]], inputs: { base: "base", fillId: "fillId" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoColorComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColorComponent, [{
    type: Component,
    args: [{
      selector: "dxo-color",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "base",
        "fillId"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoColorModule = class {
};
DxoColorModule.ɵfac = function DxoColorModule_Factory(t) {
  return new (t || DxoColorModule)();
};
DxoColorModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoColorModule });
DxoColorModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColorModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoColorComponent
      ],
      exports: [
        DxoColorComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoColorModule, { declarations: [DxoColorComponent], exports: [DxoColorComponent] });
})();
var DxoColorizerComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get colorCodeField() {
    return this._getOption("colorCodeField");
  }
  set colorCodeField(value) {
    this._setOption("colorCodeField", value);
  }
  get colorizeGroups() {
    return this._getOption("colorizeGroups");
  }
  set colorizeGroups(value) {
    this._setOption("colorizeGroups", value);
  }
  get palette() {
    return this._getOption("palette");
  }
  set palette(value) {
    this._setOption("palette", value);
  }
  get paletteExtensionMode() {
    return this._getOption("paletteExtensionMode");
  }
  set paletteExtensionMode(value) {
    this._setOption("paletteExtensionMode", value);
  }
  get range() {
    return this._getOption("range");
  }
  set range(value) {
    this._setOption("range", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get _optionPath() {
    return "colorizer";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoColorizerComponent.ɵfac = function DxoColorizerComponent_Factory(t) {
  return new (t || DxoColorizerComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoColorizerComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoColorizerComponent, selectors: [["dxo-colorizer"]], inputs: { colorCodeField: "colorCodeField", colorizeGroups: "colorizeGroups", palette: "palette", paletteExtensionMode: "paletteExtensionMode", range: "range", type: "type" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoColorizerComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColorizerComponent, [{
    type: Component,
    args: [{
      selector: "dxo-colorizer",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { colorCodeField: [{
    type: Input
  }], colorizeGroups: [{
    type: Input
  }], palette: [{
    type: Input
  }], paletteExtensionMode: [{
    type: Input
  }], range: [{
    type: Input
  }], type: [{
    type: Input
  }] });
})();
var DxoColorizerModule = class {
};
DxoColorizerModule.ɵfac = function DxoColorizerModule_Factory(t) {
  return new (t || DxoColorizerModule)();
};
DxoColorizerModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoColorizerModule });
DxoColorizerModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColorizerModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoColorizerComponent
      ],
      exports: [
        DxoColorizerComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoColorizerModule, { declarations: [DxoColorizerComponent], exports: [DxoColorizerComponent] });
})();
var DxoColumnChooserComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get allowSearch() {
    return this._getOption("allowSearch");
  }
  set allowSearch(value) {
    this._setOption("allowSearch", value);
  }
  get container() {
    return this._getOption("container");
  }
  set container(value) {
    this._setOption("container", value);
  }
  get emptyPanelText() {
    return this._getOption("emptyPanelText");
  }
  set emptyPanelText(value) {
    this._setOption("emptyPanelText", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get search() {
    return this._getOption("search");
  }
  set search(value) {
    this._setOption("search", value);
  }
  get searchTimeout() {
    return this._getOption("searchTimeout");
  }
  set searchTimeout(value) {
    this._setOption("searchTimeout", value);
  }
  get selection() {
    return this._getOption("selection");
  }
  set selection(value) {
    this._setOption("selection", value);
  }
  get sortOrder() {
    return this._getOption("sortOrder");
  }
  set sortOrder(value) {
    this._setOption("sortOrder", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "columnChooser";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoColumnChooserComponent.ɵfac = function DxoColumnChooserComponent_Factory(t) {
  return new (t || DxoColumnChooserComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoColumnChooserComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoColumnChooserComponent, selectors: [["dxo-column-chooser"]], inputs: { allowSearch: "allowSearch", container: "container", emptyPanelText: "emptyPanelText", enabled: "enabled", height: "height", mode: "mode", position: "position", search: "search", searchTimeout: "searchTimeout", selection: "selection", sortOrder: "sortOrder", title: "title", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoColumnChooserComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColumnChooserComponent, [{
    type: Component,
    args: [{
      selector: "dxo-column-chooser",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { allowSearch: [{
    type: Input
  }], container: [{
    type: Input
  }], emptyPanelText: [{
    type: Input
  }], enabled: [{
    type: Input
  }], height: [{
    type: Input
  }], mode: [{
    type: Input
  }], position: [{
    type: Input
  }], search: [{
    type: Input
  }], searchTimeout: [{
    type: Input
  }], selection: [{
    type: Input
  }], sortOrder: [{
    type: Input
  }], title: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoColumnChooserModule = class {
};
DxoColumnChooserModule.ɵfac = function DxoColumnChooserModule_Factory(t) {
  return new (t || DxoColumnChooserModule)();
};
DxoColumnChooserModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoColumnChooserModule });
DxoColumnChooserModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColumnChooserModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoColumnChooserComponent
      ],
      exports: [
        DxoColumnChooserComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoColumnChooserModule, { declarations: [DxoColumnChooserComponent], exports: [DxoColumnChooserComponent] });
})();
var DxiDataGridColumn = class extends CollectionNestedOption {
  get alignment() {
    return this._getOption("alignment");
  }
  set alignment(value) {
    this._setOption("alignment", value);
  }
  get allowEditing() {
    return this._getOption("allowEditing");
  }
  set allowEditing(value) {
    this._setOption("allowEditing", value);
  }
  get allowExporting() {
    return this._getOption("allowExporting");
  }
  set allowExporting(value) {
    this._setOption("allowExporting", value);
  }
  get allowFiltering() {
    return this._getOption("allowFiltering");
  }
  set allowFiltering(value) {
    this._setOption("allowFiltering", value);
  }
  get allowFixing() {
    return this._getOption("allowFixing");
  }
  set allowFixing(value) {
    this._setOption("allowFixing", value);
  }
  get allowGrouping() {
    return this._getOption("allowGrouping");
  }
  set allowGrouping(value) {
    this._setOption("allowGrouping", value);
  }
  get allowHeaderFiltering() {
    return this._getOption("allowHeaderFiltering");
  }
  set allowHeaderFiltering(value) {
    this._setOption("allowHeaderFiltering", value);
  }
  get allowHiding() {
    return this._getOption("allowHiding");
  }
  set allowHiding(value) {
    this._setOption("allowHiding", value);
  }
  get allowReordering() {
    return this._getOption("allowReordering");
  }
  set allowReordering(value) {
    this._setOption("allowReordering", value);
  }
  get allowResizing() {
    return this._getOption("allowResizing");
  }
  set allowResizing(value) {
    this._setOption("allowResizing", value);
  }
  get allowSearch() {
    return this._getOption("allowSearch");
  }
  set allowSearch(value) {
    this._setOption("allowSearch", value);
  }
  get allowSorting() {
    return this._getOption("allowSorting");
  }
  set allowSorting(value) {
    this._setOption("allowSorting", value);
  }
  get autoExpandGroup() {
    return this._getOption("autoExpandGroup");
  }
  set autoExpandGroup(value) {
    this._setOption("autoExpandGroup", value);
  }
  get buttons() {
    return this._getOption("buttons");
  }
  set buttons(value) {
    this._setOption("buttons", value);
  }
  get calculateCellValue() {
    return this._getOption("calculateCellValue");
  }
  set calculateCellValue(value) {
    this._setOption("calculateCellValue", value);
  }
  get calculateDisplayValue() {
    return this._getOption("calculateDisplayValue");
  }
  set calculateDisplayValue(value) {
    this._setOption("calculateDisplayValue", value);
  }
  get calculateFilterExpression() {
    return this._getOption("calculateFilterExpression");
  }
  set calculateFilterExpression(value) {
    this._setOption("calculateFilterExpression", value);
  }
  get calculateGroupValue() {
    return this._getOption("calculateGroupValue");
  }
  set calculateGroupValue(value) {
    this._setOption("calculateGroupValue", value);
  }
  get calculateSortValue() {
    return this._getOption("calculateSortValue");
  }
  set calculateSortValue(value) {
    this._setOption("calculateSortValue", value);
  }
  get caption() {
    return this._getOption("caption");
  }
  set caption(value) {
    this._setOption("caption", value);
  }
  get cellTemplate() {
    return this._getOption("cellTemplate");
  }
  set cellTemplate(value) {
    this._setOption("cellTemplate", value);
  }
  get columns() {
    return this._getOption("columns");
  }
  set columns(value) {
    this._setOption("columns", value);
  }
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get dataField() {
    return this._getOption("dataField");
  }
  set dataField(value) {
    this._setOption("dataField", value);
  }
  get dataType() {
    return this._getOption("dataType");
  }
  set dataType(value) {
    this._setOption("dataType", value);
  }
  get editCellTemplate() {
    return this._getOption("editCellTemplate");
  }
  set editCellTemplate(value) {
    this._setOption("editCellTemplate", value);
  }
  get editorOptions() {
    return this._getOption("editorOptions");
  }
  set editorOptions(value) {
    this._setOption("editorOptions", value);
  }
  get encodeHtml() {
    return this._getOption("encodeHtml");
  }
  set encodeHtml(value) {
    this._setOption("encodeHtml", value);
  }
  get falseText() {
    return this._getOption("falseText");
  }
  set falseText(value) {
    this._setOption("falseText", value);
  }
  get filterOperations() {
    return this._getOption("filterOperations");
  }
  set filterOperations(value) {
    this._setOption("filterOperations", value);
  }
  get filterType() {
    return this._getOption("filterType");
  }
  set filterType(value) {
    this._setOption("filterType", value);
  }
  get filterValue() {
    return this._getOption("filterValue");
  }
  set filterValue(value) {
    this._setOption("filterValue", value);
  }
  get filterValues() {
    return this._getOption("filterValues");
  }
  set filterValues(value) {
    this._setOption("filterValues", value);
  }
  get fixed() {
    return this._getOption("fixed");
  }
  set fixed(value) {
    this._setOption("fixed", value);
  }
  get fixedPosition() {
    return this._getOption("fixedPosition");
  }
  set fixedPosition(value) {
    this._setOption("fixedPosition", value);
  }
  get format() {
    return this._getOption("format");
  }
  set format(value) {
    this._setOption("format", value);
  }
  get formItem() {
    return this._getOption("formItem");
  }
  set formItem(value) {
    this._setOption("formItem", value);
  }
  get groupCellTemplate() {
    return this._getOption("groupCellTemplate");
  }
  set groupCellTemplate(value) {
    this._setOption("groupCellTemplate", value);
  }
  get groupIndex() {
    return this._getOption("groupIndex");
  }
  set groupIndex(value) {
    this._setOption("groupIndex", value);
  }
  get headerCellTemplate() {
    return this._getOption("headerCellTemplate");
  }
  set headerCellTemplate(value) {
    this._setOption("headerCellTemplate", value);
  }
  get headerFilter() {
    return this._getOption("headerFilter");
  }
  set headerFilter(value) {
    this._setOption("headerFilter", value);
  }
  get hidingPriority() {
    return this._getOption("hidingPriority");
  }
  set hidingPriority(value) {
    this._setOption("hidingPriority", value);
  }
  get isBand() {
    return this._getOption("isBand");
  }
  set isBand(value) {
    this._setOption("isBand", value);
  }
  get lookup() {
    return this._getOption("lookup");
  }
  set lookup(value) {
    this._setOption("lookup", value);
  }
  get minWidth() {
    return this._getOption("minWidth");
  }
  set minWidth(value) {
    this._setOption("minWidth", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get ownerBand() {
    return this._getOption("ownerBand");
  }
  set ownerBand(value) {
    this._setOption("ownerBand", value);
  }
  get renderAsync() {
    return this._getOption("renderAsync");
  }
  set renderAsync(value) {
    this._setOption("renderAsync", value);
  }
  get selectedFilterOperation() {
    return this._getOption("selectedFilterOperation");
  }
  set selectedFilterOperation(value) {
    this._setOption("selectedFilterOperation", value);
  }
  get setCellValue() {
    return this._getOption("setCellValue");
  }
  set setCellValue(value) {
    this._setOption("setCellValue", value);
  }
  get showEditorAlways() {
    return this._getOption("showEditorAlways");
  }
  set showEditorAlways(value) {
    this._setOption("showEditorAlways", value);
  }
  get showInColumnChooser() {
    return this._getOption("showInColumnChooser");
  }
  set showInColumnChooser(value) {
    this._setOption("showInColumnChooser", value);
  }
  get showWhenGrouped() {
    return this._getOption("showWhenGrouped");
  }
  set showWhenGrouped(value) {
    this._setOption("showWhenGrouped", value);
  }
  get sortIndex() {
    return this._getOption("sortIndex");
  }
  set sortIndex(value) {
    this._setOption("sortIndex", value);
  }
  get sortingMethod() {
    return this._getOption("sortingMethod");
  }
  set sortingMethod(value) {
    this._setOption("sortingMethod", value);
  }
  get sortOrder() {
    return this._getOption("sortOrder");
  }
  set sortOrder(value) {
    this._setOption("sortOrder", value);
  }
  get trueText() {
    return this._getOption("trueText");
  }
  set trueText(value) {
    this._setOption("trueText", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get validationRules() {
    return this._getOption("validationRules");
  }
  set validationRules(value) {
    this._setOption("validationRules", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get visibleIndex() {
    return this._getOption("visibleIndex");
  }
  set visibleIndex(value) {
    this._setOption("visibleIndex", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
};
DxiDataGridColumn.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxiDataGridColumn_BaseFactory;
  return function DxiDataGridColumn_Factory(t) {
    return (ɵDxiDataGridColumn_BaseFactory || (ɵDxiDataGridColumn_BaseFactory = ɵɵgetInheritedFactory(DxiDataGridColumn)))(t || DxiDataGridColumn);
  };
}();
DxiDataGridColumn.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiDataGridColumn, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiDataGridColumn_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiDataGridColumn, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiColumnComponent = class extends DxiDataGridColumn {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "filterValueChange" },
      { emit: "filterValuesChange" },
      { emit: "groupIndexChange" },
      { emit: "selectedFilterOperationChange" },
      { emit: "sortIndexChange" },
      { emit: "sortOrderChange" },
      { emit: "visibleChange" },
      { emit: "visibleIndexChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "columns";
  }
  get buttonsChildren() {
    return this._getOption("buttons");
  }
  set buttonsChildren(value) {
    this.setChildren("buttons", value);
  }
  get columnsChildren() {
    return this._getOption("columns");
  }
  set columnsChildren(value) {
    this.setChildren("columns", value);
  }
  get validationRulesChildren() {
    return this._getOption("validationRules");
  }
  set validationRulesChildren(value) {
    this.setChildren("validationRules", value);
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiColumnComponent.ɵfac = function DxiColumnComponent_Factory(t) {
  return new (t || DxiColumnComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiColumnComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiColumnComponent, selectors: [["dxi-column"]], contentQueries: function DxiColumnComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiButtonComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiColumnComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiValidationRuleComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.buttonsChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.columnsChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.validationRulesChildren = _t);
  }
}, inputs: { alignment: "alignment", allowEditing: "allowEditing", allowExporting: "allowExporting", allowFiltering: "allowFiltering", allowFixing: "allowFixing", allowGrouping: "allowGrouping", allowHeaderFiltering: "allowHeaderFiltering", allowHiding: "allowHiding", allowReordering: "allowReordering", allowResizing: "allowResizing", allowSearch: "allowSearch", allowSorting: "allowSorting", autoExpandGroup: "autoExpandGroup", buttons: "buttons", calculateCellValue: "calculateCellValue", calculateDisplayValue: "calculateDisplayValue", calculateFilterExpression: "calculateFilterExpression", calculateGroupValue: "calculateGroupValue", calculateSortValue: "calculateSortValue", caption: "caption", cellTemplate: "cellTemplate", columns: "columns", cssClass: "cssClass", customizeText: "customizeText", dataField: "dataField", dataType: "dataType", editCellTemplate: "editCellTemplate", editorOptions: "editorOptions", encodeHtml: "encodeHtml", falseText: "falseText", filterOperations: "filterOperations", filterType: "filterType", filterValue: "filterValue", filterValues: "filterValues", fixed: "fixed", fixedPosition: "fixedPosition", format: "format", formItem: "formItem", groupCellTemplate: "groupCellTemplate", groupIndex: "groupIndex", headerCellTemplate: "headerCellTemplate", headerFilter: "headerFilter", hidingPriority: "hidingPriority", isBand: "isBand", lookup: "lookup", minWidth: "minWidth", name: "name", ownerBand: "ownerBand", renderAsync: "renderAsync", selectedFilterOperation: "selectedFilterOperation", setCellValue: "setCellValue", showEditorAlways: "showEditorAlways", showInColumnChooser: "showInColumnChooser", showWhenGrouped: "showWhenGrouped", sortIndex: "sortIndex", sortingMethod: "sortingMethod", sortOrder: "sortOrder", trueText: "trueText", type: "type", validationRules: "validationRules", visible: "visible", visibleIndex: "visibleIndex", width: "width" }, outputs: { filterValueChange: "filterValueChange", filterValuesChange: "filterValuesChange", groupIndexChange: "groupIndexChange", selectedFilterOperationChange: "selectedFilterOperationChange", sortIndexChange: "sortIndexChange", sortOrderChange: "sortOrderChange", visibleChange: "visibleChange", visibleIndexChange: "visibleIndexChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiColumnComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiColumnComponent, [{
    type: Component,
    args: [{
      selector: "dxi-column",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "alignment",
        "allowEditing",
        "allowExporting",
        "allowFiltering",
        "allowFixing",
        "allowGrouping",
        "allowHeaderFiltering",
        "allowHiding",
        "allowReordering",
        "allowResizing",
        "allowSearch",
        "allowSorting",
        "autoExpandGroup",
        "buttons",
        "calculateCellValue",
        "calculateDisplayValue",
        "calculateFilterExpression",
        "calculateGroupValue",
        "calculateSortValue",
        "caption",
        "cellTemplate",
        "columns",
        "cssClass",
        "customizeText",
        "dataField",
        "dataType",
        "editCellTemplate",
        "editorOptions",
        "encodeHtml",
        "falseText",
        "filterOperations",
        "filterType",
        "filterValue",
        "filterValues",
        "fixed",
        "fixedPosition",
        "format",
        "formItem",
        "groupCellTemplate",
        "groupIndex",
        "headerCellTemplate",
        "headerFilter",
        "hidingPriority",
        "isBand",
        "lookup",
        "minWidth",
        "name",
        "ownerBand",
        "renderAsync",
        "selectedFilterOperation",
        "setCellValue",
        "showEditorAlways",
        "showInColumnChooser",
        "showWhenGrouped",
        "sortIndex",
        "sortingMethod",
        "sortOrder",
        "trueText",
        "type",
        "validationRules",
        "visible",
        "visibleIndex",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { filterValueChange: [{
    type: Output
  }], filterValuesChange: [{
    type: Output
  }], groupIndexChange: [{
    type: Output
  }], selectedFilterOperationChange: [{
    type: Output
  }], sortIndexChange: [{
    type: Output
  }], sortOrderChange: [{
    type: Output
  }], visibleChange: [{
    type: Output
  }], visibleIndexChange: [{
    type: Output
  }], buttonsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiButtonComponent)]
  }], columnsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiColumnComponent)]
  }], validationRulesChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiValidationRuleComponent)]
  }] });
})();
var DxiColumnModule = class {
};
DxiColumnModule.ɵfac = function DxiColumnModule_Factory(t) {
  return new (t || DxiColumnModule)();
};
DxiColumnModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiColumnModule });
DxiColumnModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiColumnModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiColumnComponent
      ],
      exports: [
        DxiColumnComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiColumnModule, { declarations: [DxiColumnComponent], exports: [DxiColumnComponent] });
})();
var DxoColumnFixingComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get _optionPath() {
    return "columnFixing";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoColumnFixingComponent.ɵfac = function DxoColumnFixingComponent_Factory(t) {
  return new (t || DxoColumnFixingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoColumnFixingComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoColumnFixingComponent, selectors: [["dxo-column-fixing"]], inputs: { enabled: "enabled", texts: "texts" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoColumnFixingComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColumnFixingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-column-fixing",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { enabled: [{
    type: Input
  }], texts: [{
    type: Input
  }] });
})();
var DxoColumnFixingModule = class {
};
DxoColumnFixingModule.ɵfac = function DxoColumnFixingModule_Factory(t) {
  return new (t || DxoColumnFixingModule)();
};
DxoColumnFixingModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoColumnFixingModule });
DxoColumnFixingModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColumnFixingModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoColumnFixingComponent
      ],
      exports: [
        DxoColumnFixingComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoColumnFixingModule, { declarations: [DxoColumnFixingComponent], exports: [DxoColumnFixingComponent] });
})();
var DxoChartCommonAnnotationConfig = class extends NestedOption {
  get allowDragging() {
    return this._getOption("allowDragging");
  }
  set allowDragging(value) {
    this._setOption("allowDragging", value);
  }
  get argument() {
    return this._getOption("argument");
  }
  set argument(value) {
    this._setOption("argument", value);
  }
  get arrowLength() {
    return this._getOption("arrowLength");
  }
  set arrowLength(value) {
    this._setOption("arrowLength", value);
  }
  get arrowWidth() {
    return this._getOption("arrowWidth");
  }
  set arrowWidth(value) {
    this._setOption("arrowWidth", value);
  }
  get axis() {
    return this._getOption("axis");
  }
  set axis(value) {
    this._setOption("axis", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get customizeTooltip() {
    return this._getOption("customizeTooltip");
  }
  set customizeTooltip(value) {
    this._setOption("customizeTooltip", value);
  }
  get data() {
    return this._getOption("data");
  }
  set data(value) {
    this._setOption("data", value);
  }
  get description() {
    return this._getOption("description");
  }
  set description(value) {
    this._setOption("description", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get image() {
    return this._getOption("image");
  }
  set image(value) {
    this._setOption("image", value);
  }
  get offsetX() {
    return this._getOption("offsetX");
  }
  set offsetX(value) {
    this._setOption("offsetX", value);
  }
  get offsetY() {
    return this._getOption("offsetY");
  }
  set offsetY(value) {
    this._setOption("offsetY", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get series() {
    return this._getOption("series");
  }
  set series(value) {
    this._setOption("series", value);
  }
  get shadow() {
    return this._getOption("shadow");
  }
  set shadow(value) {
    this._setOption("shadow", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get textOverflow() {
    return this._getOption("textOverflow");
  }
  set textOverflow(value) {
    this._setOption("textOverflow", value);
  }
  get tooltipEnabled() {
    return this._getOption("tooltipEnabled");
  }
  set tooltipEnabled(value) {
    this._setOption("tooltipEnabled", value);
  }
  get tooltipTemplate() {
    return this._getOption("tooltipTemplate");
  }
  set tooltipTemplate(value) {
    this._setOption("tooltipTemplate", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get wordWrap() {
    return this._getOption("wordWrap");
  }
  set wordWrap(value) {
    this._setOption("wordWrap", value);
  }
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get angle() {
    return this._getOption("angle");
  }
  set angle(value) {
    this._setOption("angle", value);
  }
  get radius() {
    return this._getOption("radius");
  }
  set radius(value) {
    this._setOption("radius", value);
  }
  get coordinates() {
    return this._getOption("coordinates");
  }
  set coordinates(value) {
    this._setOption("coordinates", value);
  }
};
DxoChartCommonAnnotationConfig.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoChartCommonAnnotationConfig_BaseFactory;
  return function DxoChartCommonAnnotationConfig_Factory(t) {
    return (ɵDxoChartCommonAnnotationConfig_BaseFactory || (ɵDxoChartCommonAnnotationConfig_BaseFactory = ɵɵgetInheritedFactory(DxoChartCommonAnnotationConfig)))(t || DxoChartCommonAnnotationConfig);
  };
}();
DxoChartCommonAnnotationConfig.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoChartCommonAnnotationConfig, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoChartCommonAnnotationConfig_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoChartCommonAnnotationConfig, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoCommonAnnotationSettingsComponent = class extends DxoChartCommonAnnotationConfig {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "commonAnnotationSettings";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoCommonAnnotationSettingsComponent.ɵfac = function DxoCommonAnnotationSettingsComponent_Factory(t) {
  return new (t || DxoCommonAnnotationSettingsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoCommonAnnotationSettingsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoCommonAnnotationSettingsComponent, selectors: [["dxo-common-annotation-settings"]], inputs: { allowDragging: "allowDragging", argument: "argument", arrowLength: "arrowLength", arrowWidth: "arrowWidth", axis: "axis", border: "border", color: "color", customizeTooltip: "customizeTooltip", data: "data", description: "description", font: "font", height: "height", image: "image", offsetX: "offsetX", offsetY: "offsetY", opacity: "opacity", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", series: "series", shadow: "shadow", template: "template", text: "text", textOverflow: "textOverflow", tooltipEnabled: "tooltipEnabled", tooltipTemplate: "tooltipTemplate", type: "type", value: "value", width: "width", wordWrap: "wordWrap", x: "x", y: "y", location: "location", angle: "angle", radius: "radius", coordinates: "coordinates" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoCommonAnnotationSettingsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonAnnotationSettingsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-common-annotation-settings",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "allowDragging",
        "argument",
        "arrowLength",
        "arrowWidth",
        "axis",
        "border",
        "color",
        "customizeTooltip",
        "data",
        "description",
        "font",
        "height",
        "image",
        "offsetX",
        "offsetY",
        "opacity",
        "paddingLeftRight",
        "paddingTopBottom",
        "series",
        "shadow",
        "template",
        "text",
        "textOverflow",
        "tooltipEnabled",
        "tooltipTemplate",
        "type",
        "value",
        "width",
        "wordWrap",
        "x",
        "y",
        "location",
        "angle",
        "radius",
        "coordinates"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoCommonAnnotationSettingsModule = class {
};
DxoCommonAnnotationSettingsModule.ɵfac = function DxoCommonAnnotationSettingsModule_Factory(t) {
  return new (t || DxoCommonAnnotationSettingsModule)();
};
DxoCommonAnnotationSettingsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoCommonAnnotationSettingsModule });
DxoCommonAnnotationSettingsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonAnnotationSettingsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoCommonAnnotationSettingsComponent
      ],
      exports: [
        DxoCommonAnnotationSettingsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoCommonAnnotationSettingsModule, { declarations: [DxoCommonAnnotationSettingsComponent], exports: [DxoCommonAnnotationSettingsComponent] });
})();
var DxoCommonAxisSettingsComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get aggregatedPointsPosition() {
    return this._getOption("aggregatedPointsPosition");
  }
  set aggregatedPointsPosition(value) {
    this._setOption("aggregatedPointsPosition", value);
  }
  get allowDecimals() {
    return this._getOption("allowDecimals");
  }
  set allowDecimals(value) {
    this._setOption("allowDecimals", value);
  }
  get breakStyle() {
    return this._getOption("breakStyle");
  }
  set breakStyle(value) {
    this._setOption("breakStyle", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get constantLineStyle() {
    return this._getOption("constantLineStyle");
  }
  set constantLineStyle(value) {
    this._setOption("constantLineStyle", value);
  }
  get discreteAxisDivisionMode() {
    return this._getOption("discreteAxisDivisionMode");
  }
  set discreteAxisDivisionMode(value) {
    this._setOption("discreteAxisDivisionMode", value);
  }
  get endOnTick() {
    return this._getOption("endOnTick");
  }
  set endOnTick(value) {
    this._setOption("endOnTick", value);
  }
  get grid() {
    return this._getOption("grid");
  }
  set grid(value) {
    this._setOption("grid", value);
  }
  get inverted() {
    return this._getOption("inverted");
  }
  set inverted(value) {
    this._setOption("inverted", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get maxValueMargin() {
    return this._getOption("maxValueMargin");
  }
  set maxValueMargin(value) {
    this._setOption("maxValueMargin", value);
  }
  get minorGrid() {
    return this._getOption("minorGrid");
  }
  set minorGrid(value) {
    this._setOption("minorGrid", value);
  }
  get minorTick() {
    return this._getOption("minorTick");
  }
  set minorTick(value) {
    this._setOption("minorTick", value);
  }
  get minValueMargin() {
    return this._getOption("minValueMargin");
  }
  set minValueMargin(value) {
    this._setOption("minValueMargin", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get placeholderSize() {
    return this._getOption("placeholderSize");
  }
  set placeholderSize(value) {
    this._setOption("placeholderSize", value);
  }
  get stripStyle() {
    return this._getOption("stripStyle");
  }
  set stripStyle(value) {
    this._setOption("stripStyle", value);
  }
  get tick() {
    return this._getOption("tick");
  }
  set tick(value) {
    this._setOption("tick", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get valueMarginsEnabled() {
    return this._getOption("valueMarginsEnabled");
  }
  set valueMarginsEnabled(value) {
    this._setOption("valueMarginsEnabled", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "commonAxisSettings";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoCommonAxisSettingsComponent.ɵfac = function DxoCommonAxisSettingsComponent_Factory(t) {
  return new (t || DxoCommonAxisSettingsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoCommonAxisSettingsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoCommonAxisSettingsComponent, selectors: [["dxo-common-axis-settings"]], inputs: { aggregatedPointsPosition: "aggregatedPointsPosition", allowDecimals: "allowDecimals", breakStyle: "breakStyle", color: "color", constantLineStyle: "constantLineStyle", discreteAxisDivisionMode: "discreteAxisDivisionMode", endOnTick: "endOnTick", grid: "grid", inverted: "inverted", label: "label", maxValueMargin: "maxValueMargin", minorGrid: "minorGrid", minorTick: "minorTick", minValueMargin: "minValueMargin", opacity: "opacity", placeholderSize: "placeholderSize", stripStyle: "stripStyle", tick: "tick", title: "title", valueMarginsEnabled: "valueMarginsEnabled", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoCommonAxisSettingsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonAxisSettingsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-common-axis-settings",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { aggregatedPointsPosition: [{
    type: Input
  }], allowDecimals: [{
    type: Input
  }], breakStyle: [{
    type: Input
  }], color: [{
    type: Input
  }], constantLineStyle: [{
    type: Input
  }], discreteAxisDivisionMode: [{
    type: Input
  }], endOnTick: [{
    type: Input
  }], grid: [{
    type: Input
  }], inverted: [{
    type: Input
  }], label: [{
    type: Input
  }], maxValueMargin: [{
    type: Input
  }], minorGrid: [{
    type: Input
  }], minorTick: [{
    type: Input
  }], minValueMargin: [{
    type: Input
  }], opacity: [{
    type: Input
  }], placeholderSize: [{
    type: Input
  }], stripStyle: [{
    type: Input
  }], tick: [{
    type: Input
  }], title: [{
    type: Input
  }], valueMarginsEnabled: [{
    type: Input
  }], visible: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoCommonAxisSettingsModule = class {
};
DxoCommonAxisSettingsModule.ɵfac = function DxoCommonAxisSettingsModule_Factory(t) {
  return new (t || DxoCommonAxisSettingsModule)();
};
DxoCommonAxisSettingsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoCommonAxisSettingsModule });
DxoCommonAxisSettingsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonAxisSettingsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoCommonAxisSettingsComponent
      ],
      exports: [
        DxoCommonAxisSettingsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoCommonAxisSettingsModule, { declarations: [DxoCommonAxisSettingsComponent], exports: [DxoCommonAxisSettingsComponent] });
})();
var DxoCommonPaneSettingsComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get _optionPath() {
    return "commonPaneSettings";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoCommonPaneSettingsComponent.ɵfac = function DxoCommonPaneSettingsComponent_Factory(t) {
  return new (t || DxoCommonPaneSettingsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoCommonPaneSettingsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoCommonPaneSettingsComponent, selectors: [["dxo-common-pane-settings"]], inputs: { backgroundColor: "backgroundColor", border: "border" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoCommonPaneSettingsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonPaneSettingsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-common-pane-settings",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { backgroundColor: [{
    type: Input
  }], border: [{
    type: Input
  }] });
})();
var DxoCommonPaneSettingsModule = class {
};
DxoCommonPaneSettingsModule.ɵfac = function DxoCommonPaneSettingsModule_Factory(t) {
  return new (t || DxoCommonPaneSettingsModule)();
};
DxoCommonPaneSettingsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoCommonPaneSettingsModule });
DxoCommonPaneSettingsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonPaneSettingsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoCommonPaneSettingsComponent
      ],
      exports: [
        DxoCommonPaneSettingsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoCommonPaneSettingsModule, { declarations: [DxoCommonPaneSettingsComponent], exports: [DxoCommonPaneSettingsComponent] });
})();
var DxoCommonSeriesSettingsComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "commonSeriesSettings";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoCommonSeriesSettingsComponent.ɵfac = function DxoCommonSeriesSettingsComponent_Factory(t) {
  return new (t || DxoCommonSeriesSettingsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoCommonSeriesSettingsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoCommonSeriesSettingsComponent, selectors: [["dxo-common-series-settings"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", argumentType: "argumentType", minSegmentSize: "minSegmentSize", smallValuesGrouping: "smallValuesGrouping", closed: "closed" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoCommonSeriesSettingsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonSeriesSettingsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-common-series-settings",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width",
        "argumentType",
        "minSegmentSize",
        "smallValuesGrouping",
        "closed"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoCommonSeriesSettingsModule = class {
};
DxoCommonSeriesSettingsModule.ɵfac = function DxoCommonSeriesSettingsModule_Factory(t) {
  return new (t || DxoCommonSeriesSettingsModule)();
};
DxoCommonSeriesSettingsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoCommonSeriesSettingsModule });
DxoCommonSeriesSettingsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCommonSeriesSettingsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoCommonSeriesSettingsComponent
      ],
      exports: [
        DxoCommonSeriesSettingsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoCommonSeriesSettingsModule, { declarations: [DxoCommonSeriesSettingsComponent], exports: [DxoCommonSeriesSettingsComponent] });
})();
var DxiConnectionPointComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get _optionPath() {
    return "connectionPoints";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiConnectionPointComponent.ɵfac = function DxiConnectionPointComponent_Factory(t) {
  return new (t || DxiConnectionPointComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiConnectionPointComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiConnectionPointComponent, selectors: [["dxi-connection-point"]], inputs: { x: "x", y: "y" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiConnectionPointComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiConnectionPointComponent, [{
    type: Component,
    args: [{
      selector: "dxi-connection-point",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { x: [{
    type: Input
  }], y: [{
    type: Input
  }] });
})();
var DxiConnectionPointModule = class {
};
DxiConnectionPointModule.ɵfac = function DxiConnectionPointModule_Factory(t) {
  return new (t || DxiConnectionPointModule)();
};
DxiConnectionPointModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiConnectionPointModule });
DxiConnectionPointModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiConnectionPointModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiConnectionPointComponent
      ],
      exports: [
        DxiConnectionPointComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiConnectionPointModule, { declarations: [DxiConnectionPointComponent], exports: [DxiConnectionPointComponent] });
})();
var DxoConnectorComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get _optionPath() {
    return "connector";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoConnectorComponent.ɵfac = function DxoConnectorComponent_Factory(t) {
  return new (t || DxoConnectorComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoConnectorComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoConnectorComponent, selectors: [["dxo-connector"]], inputs: { color: "color", visible: "visible", width: "width", opacity: "opacity" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoConnectorComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoConnectorComponent, [{
    type: Component,
    args: [{
      selector: "dxo-connector",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], visible: [{
    type: Input
  }], width: [{
    type: Input
  }], opacity: [{
    type: Input
  }] });
})();
var DxoConnectorModule = class {
};
DxoConnectorModule.ɵfac = function DxoConnectorModule_Factory(t) {
  return new (t || DxoConnectorModule)();
};
DxoConnectorModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoConnectorModule });
DxoConnectorModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoConnectorModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoConnectorComponent
      ],
      exports: [
        DxoConnectorComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoConnectorModule, { declarations: [DxoConnectorComponent], exports: [DxoConnectorComponent] });
})();
var DxoConstantLineStyleComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "constantLineStyle";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoConstantLineStyleComponent.ɵfac = function DxoConstantLineStyleComponent_Factory(t) {
  return new (t || DxoConstantLineStyleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoConstantLineStyleComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoConstantLineStyleComponent, selectors: [["dxo-constant-line-style"]], inputs: { color: "color", dashStyle: "dashStyle", label: "label", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoConstantLineStyleComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoConstantLineStyleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-constant-line-style",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], dashStyle: [{
    type: Input
  }], label: [{
    type: Input
  }], paddingLeftRight: [{
    type: Input
  }], paddingTopBottom: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoConstantLineStyleModule = class {
};
DxoConstantLineStyleModule.ɵfac = function DxoConstantLineStyleModule_Factory(t) {
  return new (t || DxoConstantLineStyleModule)();
};
DxoConstantLineStyleModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoConstantLineStyleModule });
DxoConstantLineStyleModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoConstantLineStyleModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoConstantLineStyleComponent
      ],
      exports: [
        DxoConstantLineStyleComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoConstantLineStyleModule, { declarations: [DxoConstantLineStyleComponent], exports: [DxoConstantLineStyleComponent] });
})();
var DxoFileManagerContextMenu = class extends NestedOption {
  get commands() {
    return this._getOption("commands");
  }
  set commands(value) {
    this._setOption("commands", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
};
DxoFileManagerContextMenu.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoFileManagerContextMenu_BaseFactory;
  return function DxoFileManagerContextMenu_Factory(t) {
    return (ɵDxoFileManagerContextMenu_BaseFactory || (ɵDxoFileManagerContextMenu_BaseFactory = ɵɵgetInheritedFactory(DxoFileManagerContextMenu)))(t || DxoFileManagerContextMenu);
  };
}();
DxoFileManagerContextMenu.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFileManagerContextMenu, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFileManagerContextMenu_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFileManagerContextMenu, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoContextMenuComponent = class extends DxoFileManagerContextMenu {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "contextMenu";
  }
  get commandsChildren() {
    return this._getOption("commands");
  }
  set commandsChildren(value) {
    this.setChildren("commands", value);
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoContextMenuComponent.ɵfac = function DxoContextMenuComponent_Factory(t) {
  return new (t || DxoContextMenuComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoContextMenuComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoContextMenuComponent, selectors: [["dxo-context-menu"]], contentQueries: function DxoContextMenuComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiCommandComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.commandsChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
  }
}, inputs: { commands: "commands", enabled: "enabled", items: "items" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoContextMenuComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoContextMenuComponent, [{
    type: Component,
    args: [{
      selector: "dxo-context-menu",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "commands",
        "enabled",
        "items"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { commandsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiCommandComponent)]
  }], itemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiItemComponent)]
  }] });
})();
var DxoContextMenuModule = class {
};
DxoContextMenuModule.ɵfac = function DxoContextMenuModule_Factory(t) {
  return new (t || DxoContextMenuModule)();
};
DxoContextMenuModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoContextMenuModule });
DxoContextMenuModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoContextMenuModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoContextMenuComponent
      ],
      exports: [
        DxoContextMenuComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoContextMenuModule, { declarations: [DxoContextMenuComponent], exports: [DxoContextMenuComponent] });
})();
var DxoContextToolboxComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get category() {
    return this._getOption("category");
  }
  set category(value) {
    this._setOption("category", value);
  }
  get displayMode() {
    return this._getOption("displayMode");
  }
  set displayMode(value) {
    this._setOption("displayMode", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get shapeIconsPerRow() {
    return this._getOption("shapeIconsPerRow");
  }
  set shapeIconsPerRow(value) {
    this._setOption("shapeIconsPerRow", value);
  }
  get shapes() {
    return this._getOption("shapes");
  }
  set shapes(value) {
    this._setOption("shapes", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "contextToolbox";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoContextToolboxComponent.ɵfac = function DxoContextToolboxComponent_Factory(t) {
  return new (t || DxoContextToolboxComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoContextToolboxComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoContextToolboxComponent, selectors: [["dxo-context-toolbox"]], inputs: { category: "category", displayMode: "displayMode", enabled: "enabled", shapeIconsPerRow: "shapeIconsPerRow", shapes: "shapes", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoContextToolboxComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoContextToolboxComponent, [{
    type: Component,
    args: [{
      selector: "dxo-context-toolbox",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { category: [{
    type: Input
  }], displayMode: [{
    type: Input
  }], enabled: [{
    type: Input
  }], shapeIconsPerRow: [{
    type: Input
  }], shapes: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoContextToolboxModule = class {
};
DxoContextToolboxModule.ɵfac = function DxoContextToolboxModule_Factory(t) {
  return new (t || DxoContextToolboxModule)();
};
DxoContextToolboxModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoContextToolboxModule });
DxoContextToolboxModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoContextToolboxModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoContextToolboxComponent
      ],
      exports: [
        DxoContextToolboxComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoContextToolboxModule, { declarations: [DxoContextToolboxComponent], exports: [DxoContextToolboxComponent] });
})();
var DxoControlBarComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get borderColor() {
    return this._getOption("borderColor");
  }
  set borderColor(value) {
    this._setOption("borderColor", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get horizontalAlignment() {
    return this._getOption("horizontalAlignment");
  }
  set horizontalAlignment(value) {
    this._setOption("horizontalAlignment", value);
  }
  get margin() {
    return this._getOption("margin");
  }
  set margin(value) {
    this._setOption("margin", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get panVisible() {
    return this._getOption("panVisible");
  }
  set panVisible(value) {
    this._setOption("panVisible", value);
  }
  get verticalAlignment() {
    return this._getOption("verticalAlignment");
  }
  set verticalAlignment(value) {
    this._setOption("verticalAlignment", value);
  }
  get zoomVisible() {
    return this._getOption("zoomVisible");
  }
  set zoomVisible(value) {
    this._setOption("zoomVisible", value);
  }
  get _optionPath() {
    return "controlBar";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoControlBarComponent.ɵfac = function DxoControlBarComponent_Factory(t) {
  return new (t || DxoControlBarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoControlBarComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoControlBarComponent, selectors: [["dxo-control-bar"]], inputs: { borderColor: "borderColor", color: "color", enabled: "enabled", horizontalAlignment: "horizontalAlignment", margin: "margin", opacity: "opacity", panVisible: "panVisible", verticalAlignment: "verticalAlignment", zoomVisible: "zoomVisible" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoControlBarComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoControlBarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-control-bar",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { borderColor: [{
    type: Input
  }], color: [{
    type: Input
  }], enabled: [{
    type: Input
  }], horizontalAlignment: [{
    type: Input
  }], margin: [{
    type: Input
  }], opacity: [{
    type: Input
  }], panVisible: [{
    type: Input
  }], verticalAlignment: [{
    type: Input
  }], zoomVisible: [{
    type: Input
  }] });
})();
var DxoControlBarModule = class {
};
DxoControlBarModule.ɵfac = function DxoControlBarModule_Factory(t) {
  return new (t || DxoControlBarModule)();
};
DxoControlBarModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoControlBarModule });
DxoControlBarModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoControlBarModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoControlBarComponent
      ],
      exports: [
        DxoControlBarComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoControlBarModule, { declarations: [DxoControlBarComponent], exports: [DxoControlBarComponent] });
})();
var DxoCrosshairComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get horizontalLine() {
    return this._getOption("horizontalLine");
  }
  set horizontalLine(value) {
    this._setOption("horizontalLine", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get verticalLine() {
    return this._getOption("verticalLine");
  }
  set verticalLine(value) {
    this._setOption("verticalLine", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "crosshair";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoCrosshairComponent.ɵfac = function DxoCrosshairComponent_Factory(t) {
  return new (t || DxoCrosshairComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoCrosshairComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoCrosshairComponent, selectors: [["dxo-crosshair"]], inputs: { color: "color", dashStyle: "dashStyle", enabled: "enabled", horizontalLine: "horizontalLine", label: "label", opacity: "opacity", verticalLine: "verticalLine", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoCrosshairComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCrosshairComponent, [{
    type: Component,
    args: [{
      selector: "dxo-crosshair",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], dashStyle: [{
    type: Input
  }], enabled: [{
    type: Input
  }], horizontalLine: [{
    type: Input
  }], label: [{
    type: Input
  }], opacity: [{
    type: Input
  }], verticalLine: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoCrosshairModule = class {
};
DxoCrosshairModule.ɵfac = function DxoCrosshairModule_Factory(t) {
  return new (t || DxoCrosshairModule)();
};
DxoCrosshairModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoCrosshairModule });
DxoCrosshairModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCrosshairModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoCrosshairComponent
      ],
      exports: [
        DxoCrosshairComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoCrosshairModule, { declarations: [DxoCrosshairComponent], exports: [DxoCrosshairComponent] });
})();
var DxoCursorOffsetComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get _optionPath() {
    return "cursorOffset";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoCursorOffsetComponent.ɵfac = function DxoCursorOffsetComponent_Factory(t) {
  return new (t || DxoCursorOffsetComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoCursorOffsetComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoCursorOffsetComponent, selectors: [["dxo-cursor-offset"]], inputs: { x: "x", y: "y" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoCursorOffsetComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCursorOffsetComponent, [{
    type: Component,
    args: [{
      selector: "dxo-cursor-offset",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { x: [{
    type: Input
  }], y: [{
    type: Input
  }] });
})();
var DxoCursorOffsetModule = class {
};
DxoCursorOffsetModule.ɵfac = function DxoCursorOffsetModule_Factory(t) {
  return new (t || DxoCursorOffsetModule)();
};
DxoCursorOffsetModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoCursorOffsetModule });
DxoCursorOffsetModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoCursorOffsetModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoCursorOffsetComponent
      ],
      exports: [
        DxoCursorOffsetComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoCursorOffsetModule, { declarations: [DxoCursorOffsetComponent], exports: [DxoCursorOffsetComponent] });
})();
var DxiFilterBuilderCustomOperation = class extends CollectionNestedOption {
  get calculateFilterExpression() {
    return this._getOption("calculateFilterExpression");
  }
  set calculateFilterExpression(value) {
    this._setOption("calculateFilterExpression", value);
  }
  get caption() {
    return this._getOption("caption");
  }
  set caption(value) {
    this._setOption("caption", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get dataTypes() {
    return this._getOption("dataTypes");
  }
  set dataTypes(value) {
    this._setOption("dataTypes", value);
  }
  get editorTemplate() {
    return this._getOption("editorTemplate");
  }
  set editorTemplate(value) {
    this._setOption("editorTemplate", value);
  }
  get hasValue() {
    return this._getOption("hasValue");
  }
  set hasValue(value) {
    this._setOption("hasValue", value);
  }
  get icon() {
    return this._getOption("icon");
  }
  set icon(value) {
    this._setOption("icon", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
};
DxiFilterBuilderCustomOperation.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxiFilterBuilderCustomOperation_BaseFactory;
  return function DxiFilterBuilderCustomOperation_Factory(t) {
    return (ɵDxiFilterBuilderCustomOperation_BaseFactory || (ɵDxiFilterBuilderCustomOperation_BaseFactory = ɵɵgetInheritedFactory(DxiFilterBuilderCustomOperation)))(t || DxiFilterBuilderCustomOperation);
  };
}();
DxiFilterBuilderCustomOperation.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiFilterBuilderCustomOperation, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiFilterBuilderCustomOperation_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiFilterBuilderCustomOperation, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiCustomOperationComponent = class extends DxiFilterBuilderCustomOperation {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "customOperations";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiCustomOperationComponent.ɵfac = function DxiCustomOperationComponent_Factory(t) {
  return new (t || DxiCustomOperationComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiCustomOperationComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiCustomOperationComponent, selectors: [["dxi-custom-operation"]], inputs: { calculateFilterExpression: "calculateFilterExpression", caption: "caption", customizeText: "customizeText", dataTypes: "dataTypes", editorTemplate: "editorTemplate", hasValue: "hasValue", icon: "icon", name: "name" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiCustomOperationComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCustomOperationComponent, [{
    type: Component,
    args: [{
      selector: "dxi-custom-operation",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "calculateFilterExpression",
        "caption",
        "customizeText",
        "dataTypes",
        "editorTemplate",
        "hasValue",
        "icon",
        "name"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxiCustomOperationModule = class {
};
DxiCustomOperationModule.ɵfac = function DxiCustomOperationModule_Factory(t) {
  return new (t || DxiCustomOperationModule)();
};
DxiCustomOperationModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiCustomOperationModule });
DxiCustomOperationModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCustomOperationModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiCustomOperationComponent
      ],
      exports: [
        DxiCustomOperationComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiCustomOperationModule, { declarations: [DxiCustomOperationComponent], exports: [DxiCustomOperationComponent] });
})();
var _c0$2 = ["*"];
var DxiCustomShapeComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
    super();
    this.renderer = renderer;
    this.document = document;
    this.element = element;
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
    templateHost.setHost(this);
  }
  get allowEditImage() {
    return this._getOption("allowEditImage");
  }
  set allowEditImage(value) {
    this._setOption("allowEditImage", value);
  }
  get allowEditText() {
    return this._getOption("allowEditText");
  }
  set allowEditText(value) {
    this._setOption("allowEditText", value);
  }
  get allowResize() {
    return this._getOption("allowResize");
  }
  set allowResize(value) {
    this._setOption("allowResize", value);
  }
  get backgroundImageHeight() {
    return this._getOption("backgroundImageHeight");
  }
  set backgroundImageHeight(value) {
    this._setOption("backgroundImageHeight", value);
  }
  get backgroundImageLeft() {
    return this._getOption("backgroundImageLeft");
  }
  set backgroundImageLeft(value) {
    this._setOption("backgroundImageLeft", value);
  }
  get backgroundImageToolboxUrl() {
    return this._getOption("backgroundImageToolboxUrl");
  }
  set backgroundImageToolboxUrl(value) {
    this._setOption("backgroundImageToolboxUrl", value);
  }
  get backgroundImageTop() {
    return this._getOption("backgroundImageTop");
  }
  set backgroundImageTop(value) {
    this._setOption("backgroundImageTop", value);
  }
  get backgroundImageUrl() {
    return this._getOption("backgroundImageUrl");
  }
  set backgroundImageUrl(value) {
    this._setOption("backgroundImageUrl", value);
  }
  get backgroundImageWidth() {
    return this._getOption("backgroundImageWidth");
  }
  set backgroundImageWidth(value) {
    this._setOption("backgroundImageWidth", value);
  }
  get baseType() {
    return this._getOption("baseType");
  }
  set baseType(value) {
    this._setOption("baseType", value);
  }
  get category() {
    return this._getOption("category");
  }
  set category(value) {
    this._setOption("category", value);
  }
  get connectionPoints() {
    return this._getOption("connectionPoints");
  }
  set connectionPoints(value) {
    this._setOption("connectionPoints", value);
  }
  get defaultHeight() {
    return this._getOption("defaultHeight");
  }
  set defaultHeight(value) {
    this._setOption("defaultHeight", value);
  }
  get defaultImageUrl() {
    return this._getOption("defaultImageUrl");
  }
  set defaultImageUrl(value) {
    this._setOption("defaultImageUrl", value);
  }
  get defaultText() {
    return this._getOption("defaultText");
  }
  set defaultText(value) {
    this._setOption("defaultText", value);
  }
  get defaultWidth() {
    return this._getOption("defaultWidth");
  }
  set defaultWidth(value) {
    this._setOption("defaultWidth", value);
  }
  get imageHeight() {
    return this._getOption("imageHeight");
  }
  set imageHeight(value) {
    this._setOption("imageHeight", value);
  }
  get imageLeft() {
    return this._getOption("imageLeft");
  }
  set imageLeft(value) {
    this._setOption("imageLeft", value);
  }
  get imageTop() {
    return this._getOption("imageTop");
  }
  set imageTop(value) {
    this._setOption("imageTop", value);
  }
  get imageWidth() {
    return this._getOption("imageWidth");
  }
  set imageWidth(value) {
    this._setOption("imageWidth", value);
  }
  get keepRatioOnAutoSize() {
    return this._getOption("keepRatioOnAutoSize");
  }
  set keepRatioOnAutoSize(value) {
    this._setOption("keepRatioOnAutoSize", value);
  }
  get maxHeight() {
    return this._getOption("maxHeight");
  }
  set maxHeight(value) {
    this._setOption("maxHeight", value);
  }
  get maxWidth() {
    return this._getOption("maxWidth");
  }
  set maxWidth(value) {
    this._setOption("maxWidth", value);
  }
  get minHeight() {
    return this._getOption("minHeight");
  }
  set minHeight(value) {
    this._setOption("minHeight", value);
  }
  get minWidth() {
    return this._getOption("minWidth");
  }
  set minWidth(value) {
    this._setOption("minWidth", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get templateHeight() {
    return this._getOption("templateHeight");
  }
  set templateHeight(value) {
    this._setOption("templateHeight", value);
  }
  get templateLeft() {
    return this._getOption("templateLeft");
  }
  set templateLeft(value) {
    this._setOption("templateLeft", value);
  }
  get templateTop() {
    return this._getOption("templateTop");
  }
  set templateTop(value) {
    this._setOption("templateTop", value);
  }
  get templateWidth() {
    return this._getOption("templateWidth");
  }
  set templateWidth(value) {
    this._setOption("templateWidth", value);
  }
  get textHeight() {
    return this._getOption("textHeight");
  }
  set textHeight(value) {
    this._setOption("textHeight", value);
  }
  get textLeft() {
    return this._getOption("textLeft");
  }
  set textLeft(value) {
    this._setOption("textLeft", value);
  }
  get textTop() {
    return this._getOption("textTop");
  }
  set textTop(value) {
    this._setOption("textTop", value);
  }
  get textWidth() {
    return this._getOption("textWidth");
  }
  set textWidth(value) {
    this._setOption("textWidth", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get toolboxTemplate() {
    return this._getOption("toolboxTemplate");
  }
  set toolboxTemplate(value) {
    this._setOption("toolboxTemplate", value);
  }
  get toolboxWidthToHeightRatio() {
    return this._getOption("toolboxWidthToHeightRatio");
  }
  set toolboxWidthToHeightRatio(value) {
    this._setOption("toolboxWidthToHeightRatio", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get _optionPath() {
    return "customShapes";
  }
  get connectionPointsChildren() {
    return this._getOption("connectionPoints");
  }
  set connectionPointsChildren(value) {
    this.setChildren("connectionPoints", value);
  }
  setTemplate(template) {
    this.template = template;
  }
  ngAfterViewInit() {
    extractTemplate(this, this.element, this.renderer, this.document);
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiCustomShapeComponent.ɵfac = function DxiCustomShapeComponent_Factory(t) {
  return new (t || DxiCustomShapeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(DxTemplateHost, 1), ɵɵdirectiveInject(ElementRef));
};
DxiCustomShapeComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiCustomShapeComponent, selectors: [["dxi-custom-shape"]], contentQueries: function DxiCustomShapeComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiConnectionPointComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.connectionPointsChildren = _t);
  }
}, inputs: { allowEditImage: "allowEditImage", allowEditText: "allowEditText", allowResize: "allowResize", backgroundImageHeight: "backgroundImageHeight", backgroundImageLeft: "backgroundImageLeft", backgroundImageToolboxUrl: "backgroundImageToolboxUrl", backgroundImageTop: "backgroundImageTop", backgroundImageUrl: "backgroundImageUrl", backgroundImageWidth: "backgroundImageWidth", baseType: "baseType", category: "category", connectionPoints: "connectionPoints", defaultHeight: "defaultHeight", defaultImageUrl: "defaultImageUrl", defaultText: "defaultText", defaultWidth: "defaultWidth", imageHeight: "imageHeight", imageLeft: "imageLeft", imageTop: "imageTop", imageWidth: "imageWidth", keepRatioOnAutoSize: "keepRatioOnAutoSize", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", template: "template", templateHeight: "templateHeight", templateLeft: "templateLeft", templateTop: "templateTop", templateWidth: "templateWidth", textHeight: "textHeight", textLeft: "textLeft", textTop: "textTop", textWidth: "textWidth", title: "title", toolboxTemplate: "toolboxTemplate", toolboxWidthToHeightRatio: "toolboxWidthToHeightRatio", type: "type" }, features: [ɵɵProvidersFeature([NestedOptionHost, DxTemplateHost]), ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$2, decls: 1, vars: 0, template: function DxiCustomShapeComponent_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojectionDef();
    ɵɵprojection(0);
  }
}, styles: ["[_nghost-%COMP%] { display: block; }"] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCustomShapeComponent, [{
    type: Component,
    args: [{
      selector: "dxi-custom-shape",
      template: "<ng-content></ng-content>",
      styles: [":host { display: block; }"],
      providers: [NestedOptionHost, DxTemplateHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }, { type: Renderer2 }, { type: void 0, decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }] }, { type: DxTemplateHost, decorators: [{
      type: Host
    }] }, { type: ElementRef }];
  }, { allowEditImage: [{
    type: Input
  }], allowEditText: [{
    type: Input
  }], allowResize: [{
    type: Input
  }], backgroundImageHeight: [{
    type: Input
  }], backgroundImageLeft: [{
    type: Input
  }], backgroundImageToolboxUrl: [{
    type: Input
  }], backgroundImageTop: [{
    type: Input
  }], backgroundImageUrl: [{
    type: Input
  }], backgroundImageWidth: [{
    type: Input
  }], baseType: [{
    type: Input
  }], category: [{
    type: Input
  }], connectionPoints: [{
    type: Input
  }], defaultHeight: [{
    type: Input
  }], defaultImageUrl: [{
    type: Input
  }], defaultText: [{
    type: Input
  }], defaultWidth: [{
    type: Input
  }], imageHeight: [{
    type: Input
  }], imageLeft: [{
    type: Input
  }], imageTop: [{
    type: Input
  }], imageWidth: [{
    type: Input
  }], keepRatioOnAutoSize: [{
    type: Input
  }], maxHeight: [{
    type: Input
  }], maxWidth: [{
    type: Input
  }], minHeight: [{
    type: Input
  }], minWidth: [{
    type: Input
  }], template: [{
    type: Input
  }], templateHeight: [{
    type: Input
  }], templateLeft: [{
    type: Input
  }], templateTop: [{
    type: Input
  }], templateWidth: [{
    type: Input
  }], textHeight: [{
    type: Input
  }], textLeft: [{
    type: Input
  }], textTop: [{
    type: Input
  }], textWidth: [{
    type: Input
  }], title: [{
    type: Input
  }], toolboxTemplate: [{
    type: Input
  }], toolboxWidthToHeightRatio: [{
    type: Input
  }], type: [{
    type: Input
  }], connectionPointsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiConnectionPointComponent)]
  }] });
})();
var DxiCustomShapeModule = class {
};
DxiCustomShapeModule.ɵfac = function DxiCustomShapeModule_Factory(t) {
  return new (t || DxiCustomShapeModule)();
};
DxiCustomShapeModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiCustomShapeModule });
DxiCustomShapeModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiCustomShapeModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiCustomShapeComponent
      ],
      exports: [
        DxiCustomShapeComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiCustomShapeModule, { declarations: [DxiCustomShapeComponent], exports: [DxiCustomShapeComponent] });
})();
var DxoDataPrepareSettingsComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get checkTypeForAllData() {
    return this._getOption("checkTypeForAllData");
  }
  set checkTypeForAllData(value) {
    this._setOption("checkTypeForAllData", value);
  }
  get convertToAxisDataType() {
    return this._getOption("convertToAxisDataType");
  }
  set convertToAxisDataType(value) {
    this._setOption("convertToAxisDataType", value);
  }
  get sortingMethod() {
    return this._getOption("sortingMethod");
  }
  set sortingMethod(value) {
    this._setOption("sortingMethod", value);
  }
  get _optionPath() {
    return "dataPrepareSettings";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoDataPrepareSettingsComponent.ɵfac = function DxoDataPrepareSettingsComponent_Factory(t) {
  return new (t || DxoDataPrepareSettingsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoDataPrepareSettingsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoDataPrepareSettingsComponent, selectors: [["dxo-data-prepare-settings"]], inputs: { checkTypeForAllData: "checkTypeForAllData", convertToAxisDataType: "convertToAxisDataType", sortingMethod: "sortingMethod" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoDataPrepareSettingsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDataPrepareSettingsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-data-prepare-settings",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { checkTypeForAllData: [{
    type: Input
  }], convertToAxisDataType: [{
    type: Input
  }], sortingMethod: [{
    type: Input
  }] });
})();
var DxoDataPrepareSettingsModule = class {
};
DxoDataPrepareSettingsModule.ɵfac = function DxoDataPrepareSettingsModule_Factory(t) {
  return new (t || DxoDataPrepareSettingsModule)();
};
DxoDataPrepareSettingsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoDataPrepareSettingsModule });
DxoDataPrepareSettingsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDataPrepareSettingsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoDataPrepareSettingsComponent
      ],
      exports: [
        DxoDataPrepareSettingsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoDataPrepareSettingsModule, { declarations: [DxoDataPrepareSettingsComponent], exports: [DxoDataPrepareSettingsComponent] });
})();
var DxoPivotGridDataSource = class extends NestedOption {
  get fields() {
    return this._getOption("fields");
  }
  set fields(value) {
    this._setOption("fields", value);
  }
  get filter() {
    return this._getOption("filter");
  }
  set filter(value) {
    this._setOption("filter", value);
  }
  get onChanged() {
    return this._getOption("onChanged");
  }
  set onChanged(value) {
    this._setOption("onChanged", value);
  }
  get onFieldsPrepared() {
    return this._getOption("onFieldsPrepared");
  }
  set onFieldsPrepared(value) {
    this._setOption("onFieldsPrepared", value);
  }
  get onLoadError() {
    return this._getOption("onLoadError");
  }
  set onLoadError(value) {
    this._setOption("onLoadError", value);
  }
  get onLoadingChanged() {
    return this._getOption("onLoadingChanged");
  }
  set onLoadingChanged(value) {
    this._setOption("onLoadingChanged", value);
  }
  get remoteOperations() {
    return this._getOption("remoteOperations");
  }
  set remoteOperations(value) {
    this._setOption("remoteOperations", value);
  }
  get retrieveFields() {
    return this._getOption("retrieveFields");
  }
  set retrieveFields(value) {
    this._setOption("retrieveFields", value);
  }
  get store() {
    return this._getOption("store");
  }
  set store(value) {
    this._setOption("store", value);
  }
};
DxoPivotGridDataSource.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoPivotGridDataSource_BaseFactory;
  return function DxoPivotGridDataSource_Factory(t) {
    return (ɵDxoPivotGridDataSource_BaseFactory || (ɵDxoPivotGridDataSource_BaseFactory = ɵɵgetInheritedFactory(DxoPivotGridDataSource)))(t || DxoPivotGridDataSource);
  };
}();
DxoPivotGridDataSource.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoPivotGridDataSource, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoPivotGridDataSource_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPivotGridDataSource, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiFilterBuilderField = class extends CollectionNestedOption {
  get calculateFilterExpression() {
    return this._getOption("calculateFilterExpression");
  }
  set calculateFilterExpression(value) {
    this._setOption("calculateFilterExpression", value);
  }
  get caption() {
    return this._getOption("caption");
  }
  set caption(value) {
    this._setOption("caption", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get dataField() {
    return this._getOption("dataField");
  }
  set dataField(value) {
    this._setOption("dataField", value);
  }
  get dataType() {
    return this._getOption("dataType");
  }
  set dataType(value) {
    this._setOption("dataType", value);
  }
  get editorOptions() {
    return this._getOption("editorOptions");
  }
  set editorOptions(value) {
    this._setOption("editorOptions", value);
  }
  get editorTemplate() {
    return this._getOption("editorTemplate");
  }
  set editorTemplate(value) {
    this._setOption("editorTemplate", value);
  }
  get falseText() {
    return this._getOption("falseText");
  }
  set falseText(value) {
    this._setOption("falseText", value);
  }
  get filterOperations() {
    return this._getOption("filterOperations");
  }
  set filterOperations(value) {
    this._setOption("filterOperations", value);
  }
  get format() {
    return this._getOption("format");
  }
  set format(value) {
    this._setOption("format", value);
  }
  get lookup() {
    return this._getOption("lookup");
  }
  set lookup(value) {
    this._setOption("lookup", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get trueText() {
    return this._getOption("trueText");
  }
  set trueText(value) {
    this._setOption("trueText", value);
  }
  get allowCrossGroupCalculation() {
    return this._getOption("allowCrossGroupCalculation");
  }
  set allowCrossGroupCalculation(value) {
    this._setOption("allowCrossGroupCalculation", value);
  }
  get allowExpandAll() {
    return this._getOption("allowExpandAll");
  }
  set allowExpandAll(value) {
    this._setOption("allowExpandAll", value);
  }
  get allowFiltering() {
    return this._getOption("allowFiltering");
  }
  set allowFiltering(value) {
    this._setOption("allowFiltering", value);
  }
  get allowSorting() {
    return this._getOption("allowSorting");
  }
  set allowSorting(value) {
    this._setOption("allowSorting", value);
  }
  get allowSortingBySummary() {
    return this._getOption("allowSortingBySummary");
  }
  set allowSortingBySummary(value) {
    this._setOption("allowSortingBySummary", value);
  }
  get area() {
    return this._getOption("area");
  }
  set area(value) {
    this._setOption("area", value);
  }
  get areaIndex() {
    return this._getOption("areaIndex");
  }
  set areaIndex(value) {
    this._setOption("areaIndex", value);
  }
  get calculateCustomSummary() {
    return this._getOption("calculateCustomSummary");
  }
  set calculateCustomSummary(value) {
    this._setOption("calculateCustomSummary", value);
  }
  get calculateSummaryValue() {
    return this._getOption("calculateSummaryValue");
  }
  set calculateSummaryValue(value) {
    this._setOption("calculateSummaryValue", value);
  }
  get displayFolder() {
    return this._getOption("displayFolder");
  }
  set displayFolder(value) {
    this._setOption("displayFolder", value);
  }
  get expanded() {
    return this._getOption("expanded");
  }
  set expanded(value) {
    this._setOption("expanded", value);
  }
  get filterType() {
    return this._getOption("filterType");
  }
  set filterType(value) {
    this._setOption("filterType", value);
  }
  get filterValues() {
    return this._getOption("filterValues");
  }
  set filterValues(value) {
    this._setOption("filterValues", value);
  }
  get groupIndex() {
    return this._getOption("groupIndex");
  }
  set groupIndex(value) {
    this._setOption("groupIndex", value);
  }
  get groupInterval() {
    return this._getOption("groupInterval");
  }
  set groupInterval(value) {
    this._setOption("groupInterval", value);
  }
  get groupName() {
    return this._getOption("groupName");
  }
  set groupName(value) {
    this._setOption("groupName", value);
  }
  get headerFilter() {
    return this._getOption("headerFilter");
  }
  set headerFilter(value) {
    this._setOption("headerFilter", value);
  }
  get isMeasure() {
    return this._getOption("isMeasure");
  }
  set isMeasure(value) {
    this._setOption("isMeasure", value);
  }
  get precision() {
    return this._getOption("precision");
  }
  set precision(value) {
    this._setOption("precision", value);
  }
  get runningTotal() {
    return this._getOption("runningTotal");
  }
  set runningTotal(value) {
    this._setOption("runningTotal", value);
  }
  get selector() {
    return this._getOption("selector");
  }
  set selector(value) {
    this._setOption("selector", value);
  }
  get showGrandTotals() {
    return this._getOption("showGrandTotals");
  }
  set showGrandTotals(value) {
    this._setOption("showGrandTotals", value);
  }
  get showTotals() {
    return this._getOption("showTotals");
  }
  set showTotals(value) {
    this._setOption("showTotals", value);
  }
  get showValues() {
    return this._getOption("showValues");
  }
  set showValues(value) {
    this._setOption("showValues", value);
  }
  get sortBy() {
    return this._getOption("sortBy");
  }
  set sortBy(value) {
    this._setOption("sortBy", value);
  }
  get sortBySummaryField() {
    return this._getOption("sortBySummaryField");
  }
  set sortBySummaryField(value) {
    this._setOption("sortBySummaryField", value);
  }
  get sortBySummaryPath() {
    return this._getOption("sortBySummaryPath");
  }
  set sortBySummaryPath(value) {
    this._setOption("sortBySummaryPath", value);
  }
  get sortingMethod() {
    return this._getOption("sortingMethod");
  }
  set sortingMethod(value) {
    this._setOption("sortingMethod", value);
  }
  get sortOrder() {
    return this._getOption("sortOrder");
  }
  set sortOrder(value) {
    this._setOption("sortOrder", value);
  }
  get summaryDisplayMode() {
    return this._getOption("summaryDisplayMode");
  }
  set summaryDisplayMode(value) {
    this._setOption("summaryDisplayMode", value);
  }
  get summaryType() {
    return this._getOption("summaryType");
  }
  set summaryType(value) {
    this._setOption("summaryType", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get wordWrapEnabled() {
    return this._getOption("wordWrapEnabled");
  }
  set wordWrapEnabled(value) {
    this._setOption("wordWrapEnabled", value);
  }
};
DxiFilterBuilderField.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxiFilterBuilderField_BaseFactory;
  return function DxiFilterBuilderField_Factory(t) {
    return (ɵDxiFilterBuilderField_BaseFactory || (ɵDxiFilterBuilderField_BaseFactory = ɵɵgetInheritedFactory(DxiFilterBuilderField)))(t || DxiFilterBuilderField);
  };
}();
DxiFilterBuilderField.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiFilterBuilderField, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiFilterBuilderField_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiFilterBuilderField, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiFieldComponent = class extends DxiFilterBuilderField {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "fields";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiFieldComponent.ɵfac = function DxiFieldComponent_Factory(t) {
  return new (t || DxiFieldComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiFieldComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiFieldComponent, selectors: [["dxi-field"]], inputs: { calculateFilterExpression: "calculateFilterExpression", caption: "caption", customizeText: "customizeText", dataField: "dataField", dataType: "dataType", editorOptions: "editorOptions", editorTemplate: "editorTemplate", falseText: "falseText", filterOperations: "filterOperations", format: "format", lookup: "lookup", name: "name", trueText: "trueText", allowCrossGroupCalculation: "allowCrossGroupCalculation", allowExpandAll: "allowExpandAll", allowFiltering: "allowFiltering", allowSorting: "allowSorting", allowSortingBySummary: "allowSortingBySummary", area: "area", areaIndex: "areaIndex", calculateCustomSummary: "calculateCustomSummary", calculateSummaryValue: "calculateSummaryValue", displayFolder: "displayFolder", expanded: "expanded", filterType: "filterType", filterValues: "filterValues", groupIndex: "groupIndex", groupInterval: "groupInterval", groupName: "groupName", headerFilter: "headerFilter", isMeasure: "isMeasure", precision: "precision", runningTotal: "runningTotal", selector: "selector", showGrandTotals: "showGrandTotals", showTotals: "showTotals", showValues: "showValues", sortBy: "sortBy", sortBySummaryField: "sortBySummaryField", sortBySummaryPath: "sortBySummaryPath", sortingMethod: "sortingMethod", sortOrder: "sortOrder", summaryDisplayMode: "summaryDisplayMode", summaryType: "summaryType", visible: "visible", width: "width", wordWrapEnabled: "wordWrapEnabled" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiFieldComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiFieldComponent, [{
    type: Component,
    args: [{
      selector: "dxi-field",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "calculateFilterExpression",
        "caption",
        "customizeText",
        "dataField",
        "dataType",
        "editorOptions",
        "editorTemplate",
        "falseText",
        "filterOperations",
        "format",
        "lookup",
        "name",
        "trueText",
        "allowCrossGroupCalculation",
        "allowExpandAll",
        "allowFiltering",
        "allowSorting",
        "allowSortingBySummary",
        "area",
        "areaIndex",
        "calculateCustomSummary",
        "calculateSummaryValue",
        "displayFolder",
        "expanded",
        "filterType",
        "filterValues",
        "groupIndex",
        "groupInterval",
        "groupName",
        "headerFilter",
        "isMeasure",
        "precision",
        "runningTotal",
        "selector",
        "showGrandTotals",
        "showTotals",
        "showValues",
        "sortBy",
        "sortBySummaryField",
        "sortBySummaryPath",
        "sortingMethod",
        "sortOrder",
        "summaryDisplayMode",
        "summaryType",
        "visible",
        "width",
        "wordWrapEnabled"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxiFieldModule = class {
};
DxiFieldModule.ɵfac = function DxiFieldModule_Factory(t) {
  return new (t || DxiFieldModule)();
};
DxiFieldModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiFieldModule });
DxiFieldModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiFieldModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiFieldComponent
      ],
      exports: [
        DxiFieldComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiFieldModule, { declarations: [DxiFieldComponent], exports: [DxiFieldComponent] });
})();
var DxoDataSourceComponent = class extends DxoPivotGridDataSource {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
    if (console && console.warn) {
      console.warn("The nested 'dxo-data-source' component is deprecated in 17.2. Use the 'dataSource' option instead. See:\nhttps://github.com/DevExpress/devextreme-angular/blob/master/CHANGELOG.md#17.2.3");
    }
  }
  get _optionPath() {
    return "dataSource";
  }
  get fieldsChildren() {
    return this._getOption("fields");
  }
  set fieldsChildren(value) {
    this.setChildren("fields", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoDataSourceComponent.ɵfac = function DxoDataSourceComponent_Factory(t) {
  return new (t || DxoDataSourceComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoDataSourceComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoDataSourceComponent, selectors: [["dxo-data-source"]], contentQueries: function DxoDataSourceComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiFieldComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.fieldsChildren = _t);
  }
}, inputs: { fields: "fields", filter: "filter", onChanged: "onChanged", onFieldsPrepared: "onFieldsPrepared", onLoadError: "onLoadError", onLoadingChanged: "onLoadingChanged", remoteOperations: "remoteOperations", retrieveFields: "retrieveFields", store: "store" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoDataSourceComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDataSourceComponent, [{
    type: Component,
    args: [{
      selector: "dxo-data-source",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "fields",
        "filter",
        "onChanged",
        "onFieldsPrepared",
        "onLoadError",
        "onLoadingChanged",
        "remoteOperations",
        "retrieveFields",
        "store"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { fieldsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiFieldComponent)]
  }] });
})();
var DxoDataSourceModule = class {
};
DxoDataSourceModule.ɵfac = function DxoDataSourceModule_Factory(t) {
  return new (t || DxoDataSourceModule)();
};
DxoDataSourceModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoDataSourceModule });
DxoDataSourceModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDataSourceModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoDataSourceComponent
      ],
      exports: [
        DxoDataSourceComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoDataSourceModule, { declarations: [DxoDataSourceComponent], exports: [DxoDataSourceComponent] });
})();
var DxoDefaultItemPropertiesComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get connectorLineEnd() {
    return this._getOption("connectorLineEnd");
  }
  set connectorLineEnd(value) {
    this._setOption("connectorLineEnd", value);
  }
  get connectorLineStart() {
    return this._getOption("connectorLineStart");
  }
  set connectorLineStart(value) {
    this._setOption("connectorLineStart", value);
  }
  get connectorLineType() {
    return this._getOption("connectorLineType");
  }
  set connectorLineType(value) {
    this._setOption("connectorLineType", value);
  }
  get shapeMaxHeight() {
    return this._getOption("shapeMaxHeight");
  }
  set shapeMaxHeight(value) {
    this._setOption("shapeMaxHeight", value);
  }
  get shapeMaxWidth() {
    return this._getOption("shapeMaxWidth");
  }
  set shapeMaxWidth(value) {
    this._setOption("shapeMaxWidth", value);
  }
  get shapeMinHeight() {
    return this._getOption("shapeMinHeight");
  }
  set shapeMinHeight(value) {
    this._setOption("shapeMinHeight", value);
  }
  get shapeMinWidth() {
    return this._getOption("shapeMinWidth");
  }
  set shapeMinWidth(value) {
    this._setOption("shapeMinWidth", value);
  }
  get style() {
    return this._getOption("style");
  }
  set style(value) {
    this._setOption("style", value);
  }
  get textStyle() {
    return this._getOption("textStyle");
  }
  set textStyle(value) {
    this._setOption("textStyle", value);
  }
  get _optionPath() {
    return "defaultItemProperties";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoDefaultItemPropertiesComponent.ɵfac = function DxoDefaultItemPropertiesComponent_Factory(t) {
  return new (t || DxoDefaultItemPropertiesComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoDefaultItemPropertiesComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoDefaultItemPropertiesComponent, selectors: [["dxo-default-item-properties"]], inputs: { connectorLineEnd: "connectorLineEnd", connectorLineStart: "connectorLineStart", connectorLineType: "connectorLineType", shapeMaxHeight: "shapeMaxHeight", shapeMaxWidth: "shapeMaxWidth", shapeMinHeight: "shapeMinHeight", shapeMinWidth: "shapeMinWidth", style: "style", textStyle: "textStyle" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoDefaultItemPropertiesComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDefaultItemPropertiesComponent, [{
    type: Component,
    args: [{
      selector: "dxo-default-item-properties",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { connectorLineEnd: [{
    type: Input
  }], connectorLineStart: [{
    type: Input
  }], connectorLineType: [{
    type: Input
  }], shapeMaxHeight: [{
    type: Input
  }], shapeMaxWidth: [{
    type: Input
  }], shapeMinHeight: [{
    type: Input
  }], shapeMinWidth: [{
    type: Input
  }], style: [{
    type: Input
  }], textStyle: [{
    type: Input
  }] });
})();
var DxoDefaultItemPropertiesModule = class {
};
DxoDefaultItemPropertiesModule.ɵfac = function DxoDefaultItemPropertiesModule_Factory(t) {
  return new (t || DxoDefaultItemPropertiesModule)();
};
DxoDefaultItemPropertiesModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoDefaultItemPropertiesModule });
DxoDefaultItemPropertiesModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDefaultItemPropertiesModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoDefaultItemPropertiesComponent
      ],
      exports: [
        DxoDefaultItemPropertiesComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoDefaultItemPropertiesModule, { declarations: [DxoDefaultItemPropertiesComponent], exports: [DxoDefaultItemPropertiesComponent] });
})();
var DxoDelayComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get hide() {
    return this._getOption("hide");
  }
  set hide(value) {
    this._setOption("hide", value);
  }
  get show() {
    return this._getOption("show");
  }
  set show(value) {
    this._setOption("show", value);
  }
  get _optionPath() {
    return "delay";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoDelayComponent.ɵfac = function DxoDelayComponent_Factory(t) {
  return new (t || DxoDelayComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoDelayComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoDelayComponent, selectors: [["dxo-delay"]], inputs: { hide: "hide", show: "show" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoDelayComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDelayComponent, [{
    type: Component,
    args: [{
      selector: "dxo-delay",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { hide: [{
    type: Input
  }], show: [{
    type: Input
  }] });
})();
var DxoDelayModule = class {
};
DxoDelayModule.ɵfac = function DxoDelayModule_Factory(t) {
  return new (t || DxoDelayModule)();
};
DxoDelayModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoDelayModule });
DxoDelayModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDelayModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoDelayComponent
      ],
      exports: [
        DxoDelayComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoDelayModule, { declarations: [DxoDelayComponent], exports: [DxoDelayComponent] });
})();
var DxoDependenciesComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get keyExpr() {
    return this._getOption("keyExpr");
  }
  set keyExpr(value) {
    this._setOption("keyExpr", value);
  }
  get predecessorIdExpr() {
    return this._getOption("predecessorIdExpr");
  }
  set predecessorIdExpr(value) {
    this._setOption("predecessorIdExpr", value);
  }
  get successorIdExpr() {
    return this._getOption("successorIdExpr");
  }
  set successorIdExpr(value) {
    this._setOption("successorIdExpr", value);
  }
  get typeExpr() {
    return this._getOption("typeExpr");
  }
  set typeExpr(value) {
    this._setOption("typeExpr", value);
  }
  get _optionPath() {
    return "dependencies";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoDependenciesComponent.ɵfac = function DxoDependenciesComponent_Factory(t) {
  return new (t || DxoDependenciesComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoDependenciesComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoDependenciesComponent, selectors: [["dxo-dependencies"]], inputs: { dataSource: "dataSource", keyExpr: "keyExpr", predecessorIdExpr: "predecessorIdExpr", successorIdExpr: "successorIdExpr", typeExpr: "typeExpr" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoDependenciesComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDependenciesComponent, [{
    type: Component,
    args: [{
      selector: "dxo-dependencies",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { dataSource: [{
    type: Input
  }], keyExpr: [{
    type: Input
  }], predecessorIdExpr: [{
    type: Input
  }], successorIdExpr: [{
    type: Input
  }], typeExpr: [{
    type: Input
  }] });
})();
var DxoDependenciesModule = class {
};
DxoDependenciesModule.ɵfac = function DxoDependenciesModule_Factory(t) {
  return new (t || DxoDependenciesModule)();
};
DxoDependenciesModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoDependenciesModule });
DxoDependenciesModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDependenciesModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoDependenciesComponent
      ],
      exports: [
        DxoDependenciesComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoDependenciesModule, { declarations: [DxoDependenciesComponent], exports: [DxoDependenciesComponent] });
})();
var DxoDetailsComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get columns() {
    return this._getOption("columns");
  }
  set columns(value) {
    this._setOption("columns", value);
  }
  get _optionPath() {
    return "details";
  }
  get columnsChildren() {
    return this._getOption("columns");
  }
  set columnsChildren(value) {
    this.setChildren("columns", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoDetailsComponent.ɵfac = function DxoDetailsComponent_Factory(t) {
  return new (t || DxoDetailsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoDetailsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoDetailsComponent, selectors: [["dxo-details"]], contentQueries: function DxoDetailsComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiColumnComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.columnsChildren = _t);
  }
}, inputs: { columns: "columns" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoDetailsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDetailsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-details",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { columns: [{
    type: Input
  }], columnsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiColumnComponent)]
  }] });
})();
var DxoDetailsModule = class {
};
DxoDetailsModule.ɵfac = function DxoDetailsModule_Factory(t) {
  return new (t || DxoDetailsModule)();
};
DxoDetailsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoDetailsModule });
DxoDetailsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDetailsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoDetailsComponent
      ],
      exports: [
        DxoDetailsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoDetailsModule, { declarations: [DxoDetailsComponent], exports: [DxoDetailsComponent] });
})();
var DxoDisplayFormatComponent = class extends DxoFormat {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "displayFormat";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoDisplayFormatComponent.ɵfac = function DxoDisplayFormatComponent_Factory(t) {
  return new (t || DxoDisplayFormatComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoDisplayFormatComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoDisplayFormatComponent, selectors: [["dxo-display-format"]], inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type", useCurrencyAccountingStyle: "useCurrencyAccountingStyle" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoDisplayFormatComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDisplayFormatComponent, [{
    type: Component,
    args: [{
      selector: "dxo-display-format",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "currency",
        "formatter",
        "parser",
        "precision",
        "type",
        "useCurrencyAccountingStyle"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoDisplayFormatModule = class {
};
DxoDisplayFormatModule.ɵfac = function DxoDisplayFormatModule_Factory(t) {
  return new (t || DxoDisplayFormatModule)();
};
DxoDisplayFormatModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoDisplayFormatModule });
DxoDisplayFormatModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDisplayFormatModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoDisplayFormatComponent
      ],
      exports: [
        DxoDisplayFormatComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoDisplayFormatModule, { declarations: [DxoDisplayFormatComponent], exports: [DxoDisplayFormatComponent] });
})();
var DxoDragBoxStyleComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get _optionPath() {
    return "dragBoxStyle";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoDragBoxStyleComponent.ɵfac = function DxoDragBoxStyleComponent_Factory(t) {
  return new (t || DxoDragBoxStyleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoDragBoxStyleComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoDragBoxStyleComponent, selectors: [["dxo-drag-box-style"]], inputs: { color: "color", opacity: "opacity" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoDragBoxStyleComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDragBoxStyleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-drag-box-style",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], opacity: [{
    type: Input
  }] });
})();
var DxoDragBoxStyleModule = class {
};
DxoDragBoxStyleModule.ɵfac = function DxoDragBoxStyleModule_Factory(t) {
  return new (t || DxoDragBoxStyleModule)();
};
DxoDragBoxStyleModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoDragBoxStyleModule });
DxoDragBoxStyleModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDragBoxStyleModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoDragBoxStyleComponent
      ],
      exports: [
        DxoDragBoxStyleComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoDragBoxStyleModule, { declarations: [DxoDragBoxStyleComponent], exports: [DxoDragBoxStyleComponent] });
})();
var DxoPopupOptions = class extends NestedOption {
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get animation() {
    return this._getOption("animation");
  }
  set animation(value) {
    this._setOption("animation", value);
  }
  get closeOnOutsideClick() {
    return this._getOption("closeOnOutsideClick");
  }
  set closeOnOutsideClick(value) {
    this._setOption("closeOnOutsideClick", value);
  }
  get container() {
    return this._getOption("container");
  }
  set container(value) {
    this._setOption("container", value);
  }
  get contentTemplate() {
    return this._getOption("contentTemplate");
  }
  set contentTemplate(value) {
    this._setOption("contentTemplate", value);
  }
  get copyRootClassesToWrapper() {
    return this._getOption("copyRootClassesToWrapper");
  }
  set copyRootClassesToWrapper(value) {
    this._setOption("copyRootClassesToWrapper", value);
  }
  get deferRendering() {
    return this._getOption("deferRendering");
  }
  set deferRendering(value) {
    this._setOption("deferRendering", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get dragAndResizeArea() {
    return this._getOption("dragAndResizeArea");
  }
  set dragAndResizeArea(value) {
    this._setOption("dragAndResizeArea", value);
  }
  get dragEnabled() {
    return this._getOption("dragEnabled");
  }
  set dragEnabled(value) {
    this._setOption("dragEnabled", value);
  }
  get dragOutsideBoundary() {
    return this._getOption("dragOutsideBoundary");
  }
  set dragOutsideBoundary(value) {
    this._setOption("dragOutsideBoundary", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get enableBodyScroll() {
    return this._getOption("enableBodyScroll");
  }
  set enableBodyScroll(value) {
    this._setOption("enableBodyScroll", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get fullScreen() {
    return this._getOption("fullScreen");
  }
  set fullScreen(value) {
    this._setOption("fullScreen", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hideOnOutsideClick() {
    return this._getOption("hideOnOutsideClick");
  }
  set hideOnOutsideClick(value) {
    this._setOption("hideOnOutsideClick", value);
  }
  get hideOnParentScroll() {
    return this._getOption("hideOnParentScroll");
  }
  set hideOnParentScroll(value) {
    this._setOption("hideOnParentScroll", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get maxHeight() {
    return this._getOption("maxHeight");
  }
  set maxHeight(value) {
    this._setOption("maxHeight", value);
  }
  get maxWidth() {
    return this._getOption("maxWidth");
  }
  set maxWidth(value) {
    this._setOption("maxWidth", value);
  }
  get minHeight() {
    return this._getOption("minHeight");
  }
  set minHeight(value) {
    this._setOption("minHeight", value);
  }
  get minWidth() {
    return this._getOption("minWidth");
  }
  set minWidth(value) {
    this._setOption("minWidth", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onHidden() {
    return this._getOption("onHidden");
  }
  set onHidden(value) {
    this._setOption("onHidden", value);
  }
  get onHiding() {
    return this._getOption("onHiding");
  }
  set onHiding(value) {
    this._setOption("onHiding", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get onResize() {
    return this._getOption("onResize");
  }
  set onResize(value) {
    this._setOption("onResize", value);
  }
  get onResizeEnd() {
    return this._getOption("onResizeEnd");
  }
  set onResizeEnd(value) {
    this._setOption("onResizeEnd", value);
  }
  get onResizeStart() {
    return this._getOption("onResizeStart");
  }
  set onResizeStart(value) {
    this._setOption("onResizeStart", value);
  }
  get onShowing() {
    return this._getOption("onShowing");
  }
  set onShowing(value) {
    this._setOption("onShowing", value);
  }
  get onShown() {
    return this._getOption("onShown");
  }
  set onShown(value) {
    this._setOption("onShown", value);
  }
  get onTitleRendered() {
    return this._getOption("onTitleRendered");
  }
  set onTitleRendered(value) {
    this._setOption("onTitleRendered", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get resizeEnabled() {
    return this._getOption("resizeEnabled");
  }
  set resizeEnabled(value) {
    this._setOption("resizeEnabled", value);
  }
  get restorePosition() {
    return this._getOption("restorePosition");
  }
  set restorePosition(value) {
    this._setOption("restorePosition", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get shading() {
    return this._getOption("shading");
  }
  set shading(value) {
    this._setOption("shading", value);
  }
  get shadingColor() {
    return this._getOption("shadingColor");
  }
  set shadingColor(value) {
    this._setOption("shadingColor", value);
  }
  get showCloseButton() {
    return this._getOption("showCloseButton");
  }
  set showCloseButton(value) {
    this._setOption("showCloseButton", value);
  }
  get showTitle() {
    return this._getOption("showTitle");
  }
  set showTitle(value) {
    this._setOption("showTitle", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get titleTemplate() {
    return this._getOption("titleTemplate");
  }
  set titleTemplate(value) {
    this._setOption("titleTemplate", value);
  }
  get toolbarItems() {
    return this._getOption("toolbarItems");
  }
  set toolbarItems(value) {
    this._setOption("toolbarItems", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get wrapperAttr() {
    return this._getOption("wrapperAttr");
  }
  set wrapperAttr(value) {
    this._setOption("wrapperAttr", value);
  }
  get hideEvent() {
    return this._getOption("hideEvent");
  }
  set hideEvent(value) {
    this._setOption("hideEvent", value);
  }
  get showEvent() {
    return this._getOption("showEvent");
  }
  set showEvent(value) {
    this._setOption("showEvent", value);
  }
  get target() {
    return this._getOption("target");
  }
  set target(value) {
    this._setOption("target", value);
  }
};
DxoPopupOptions.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoPopupOptions_BaseFactory;
  return function DxoPopupOptions_Factory(t) {
    return (ɵDxoPopupOptions_BaseFactory || (ɵDxoPopupOptions_BaseFactory = ɵɵgetInheritedFactory(DxoPopupOptions)))(t || DxoPopupOptions);
  };
}();
DxoPopupOptions.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoPopupOptions, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoPopupOptions_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPopupOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var _c0$1 = ["*"];
var DxiToolbarItemComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
    super();
    this.renderer = renderer;
    this.document = document;
    this.element = element;
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
    templateHost.setHost(this);
  }
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get html() {
    return this._getOption("html");
  }
  set html(value) {
    this._setOption("html", value);
  }
  get locateInMenu() {
    return this._getOption("locateInMenu");
  }
  set locateInMenu(value) {
    this._setOption("locateInMenu", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get menuItemTemplate() {
    return this._getOption("menuItemTemplate");
  }
  set menuItemTemplate(value) {
    this._setOption("menuItemTemplate", value);
  }
  get options() {
    return this._getOption("options");
  }
  set options(value) {
    this._setOption("options", value);
  }
  get showText() {
    return this._getOption("showText");
  }
  set showText(value) {
    this._setOption("showText", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get toolbar() {
    return this._getOption("toolbar");
  }
  set toolbar(value) {
    this._setOption("toolbar", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get widget() {
    return this._getOption("widget");
  }
  set widget(value) {
    this._setOption("widget", value);
  }
  get _optionPath() {
    return "toolbarItems";
  }
  setTemplate(template) {
    this.template = template;
  }
  ngAfterViewInit() {
    extractTemplate(this, this.element, this.renderer, this.document);
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiToolbarItemComponent.ɵfac = function DxiToolbarItemComponent_Factory(t) {
  return new (t || DxiToolbarItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(DxTemplateHost, 1), ɵɵdirectiveInject(ElementRef));
};
DxiToolbarItemComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiToolbarItemComponent, selectors: [["dxi-toolbar-item"]], inputs: { cssClass: "cssClass", disabled: "disabled", html: "html", locateInMenu: "locateInMenu", location: "location", menuItemTemplate: "menuItemTemplate", options: "options", showText: "showText", template: "template", text: "text", toolbar: "toolbar", visible: "visible", widget: "widget" }, features: [ɵɵProvidersFeature([NestedOptionHost, DxTemplateHost]), ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$1, decls: 1, vars: 0, template: function DxiToolbarItemComponent_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojectionDef();
    ɵɵprojection(0);
  }
}, styles: ["[_nghost-%COMP%] { display: block; }"] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiToolbarItemComponent, [{
    type: Component,
    args: [{
      selector: "dxi-toolbar-item",
      template: "<ng-content></ng-content>",
      styles: [":host { display: block; }"],
      providers: [NestedOptionHost, DxTemplateHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }, { type: Renderer2 }, { type: void 0, decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }] }, { type: DxTemplateHost, decorators: [{
      type: Host
    }] }, { type: ElementRef }];
  }, { cssClass: [{
    type: Input
  }], disabled: [{
    type: Input
  }], html: [{
    type: Input
  }], locateInMenu: [{
    type: Input
  }], location: [{
    type: Input
  }], menuItemTemplate: [{
    type: Input
  }], options: [{
    type: Input
  }], showText: [{
    type: Input
  }], template: [{
    type: Input
  }], text: [{
    type: Input
  }], toolbar: [{
    type: Input
  }], visible: [{
    type: Input
  }], widget: [{
    type: Input
  }] });
})();
var DxiToolbarItemModule = class {
};
DxiToolbarItemModule.ɵfac = function DxiToolbarItemModule_Factory(t) {
  return new (t || DxiToolbarItemModule)();
};
DxiToolbarItemModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiToolbarItemModule });
DxiToolbarItemModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiToolbarItemModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiToolbarItemComponent
      ],
      exports: [
        DxiToolbarItemComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiToolbarItemModule, { declarations: [DxiToolbarItemComponent], exports: [DxiToolbarItemComponent] });
})();
var DxoDropDownOptionsComponent = class extends DxoPopupOptions {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "heightChange" },
      { emit: "positionChange" },
      { emit: "visibleChange" },
      { emit: "widthChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "dropDownOptions";
  }
  get toolbarItemsChildren() {
    return this._getOption("toolbarItems");
  }
  set toolbarItemsChildren(value) {
    this.setChildren("toolbarItems", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoDropDownOptionsComponent.ɵfac = function DxoDropDownOptionsComponent_Factory(t) {
  return new (t || DxoDropDownOptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoDropDownOptionsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoDropDownOptionsComponent, selectors: [["dxo-drop-down-options"]], contentQueries: function DxoDropDownOptionsComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiToolbarItemComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.toolbarItemsChildren = _t);
  }
}, inputs: { accessKey: "accessKey", animation: "animation", closeOnOutsideClick: "closeOnOutsideClick", container: "container", contentTemplate: "contentTemplate", copyRootClassesToWrapper: "copyRootClassesToWrapper", deferRendering: "deferRendering", disabled: "disabled", dragAndResizeArea: "dragAndResizeArea", dragEnabled: "dragEnabled", dragOutsideBoundary: "dragOutsideBoundary", elementAttr: "elementAttr", enableBodyScroll: "enableBodyScroll", focusStateEnabled: "focusStateEnabled", fullScreen: "fullScreen", height: "height", hideOnOutsideClick: "hideOnOutsideClick", hideOnParentScroll: "hideOnParentScroll", hint: "hint", hoverStateEnabled: "hoverStateEnabled", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", onContentReady: "onContentReady", onDisposing: "onDisposing", onHidden: "onHidden", onHiding: "onHiding", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onResize: "onResize", onResizeEnd: "onResizeEnd", onResizeStart: "onResizeStart", onShowing: "onShowing", onShown: "onShown", onTitleRendered: "onTitleRendered", position: "position", resizeEnabled: "resizeEnabled", restorePosition: "restorePosition", rtlEnabled: "rtlEnabled", shading: "shading", shadingColor: "shadingColor", showCloseButton: "showCloseButton", showTitle: "showTitle", tabIndex: "tabIndex", title: "title", titleTemplate: "titleTemplate", toolbarItems: "toolbarItems", visible: "visible", width: "width", wrapperAttr: "wrapperAttr", hideEvent: "hideEvent", showEvent: "showEvent", target: "target" }, outputs: { heightChange: "heightChange", positionChange: "positionChange", visibleChange: "visibleChange", widthChange: "widthChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoDropDownOptionsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDropDownOptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-drop-down-options",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "accessKey",
        "animation",
        "closeOnOutsideClick",
        "container",
        "contentTemplate",
        "copyRootClassesToWrapper",
        "deferRendering",
        "disabled",
        "dragAndResizeArea",
        "dragEnabled",
        "dragOutsideBoundary",
        "elementAttr",
        "enableBodyScroll",
        "focusStateEnabled",
        "fullScreen",
        "height",
        "hideOnOutsideClick",
        "hideOnParentScroll",
        "hint",
        "hoverStateEnabled",
        "maxHeight",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onContentReady",
        "onDisposing",
        "onHidden",
        "onHiding",
        "onInitialized",
        "onOptionChanged",
        "onResize",
        "onResizeEnd",
        "onResizeStart",
        "onShowing",
        "onShown",
        "onTitleRendered",
        "position",
        "resizeEnabled",
        "restorePosition",
        "rtlEnabled",
        "shading",
        "shadingColor",
        "showCloseButton",
        "showTitle",
        "tabIndex",
        "title",
        "titleTemplate",
        "toolbarItems",
        "visible",
        "width",
        "wrapperAttr",
        "hideEvent",
        "showEvent",
        "target"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { heightChange: [{
    type: Output
  }], positionChange: [{
    type: Output
  }], visibleChange: [{
    type: Output
  }], widthChange: [{
    type: Output
  }], toolbarItemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiToolbarItemComponent)]
  }] });
})();
var DxoDropDownOptionsModule = class {
};
DxoDropDownOptionsModule.ɵfac = function DxoDropDownOptionsModule_Factory(t) {
  return new (t || DxoDropDownOptionsModule)();
};
DxoDropDownOptionsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoDropDownOptionsModule });
DxoDropDownOptionsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDropDownOptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoDropDownOptionsComponent
      ],
      exports: [
        DxoDropDownOptionsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoDropDownOptionsModule, { declarations: [DxoDropDownOptionsComponent], exports: [DxoDropDownOptionsComponent] });
})();
var DxoEdgesComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get customDataExpr() {
    return this._getOption("customDataExpr");
  }
  set customDataExpr(value) {
    this._setOption("customDataExpr", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get fromExpr() {
    return this._getOption("fromExpr");
  }
  set fromExpr(value) {
    this._setOption("fromExpr", value);
  }
  get fromLineEndExpr() {
    return this._getOption("fromLineEndExpr");
  }
  set fromLineEndExpr(value) {
    this._setOption("fromLineEndExpr", value);
  }
  get fromPointIndexExpr() {
    return this._getOption("fromPointIndexExpr");
  }
  set fromPointIndexExpr(value) {
    this._setOption("fromPointIndexExpr", value);
  }
  get keyExpr() {
    return this._getOption("keyExpr");
  }
  set keyExpr(value) {
    this._setOption("keyExpr", value);
  }
  get lineTypeExpr() {
    return this._getOption("lineTypeExpr");
  }
  set lineTypeExpr(value) {
    this._setOption("lineTypeExpr", value);
  }
  get lockedExpr() {
    return this._getOption("lockedExpr");
  }
  set lockedExpr(value) {
    this._setOption("lockedExpr", value);
  }
  get pointsExpr() {
    return this._getOption("pointsExpr");
  }
  set pointsExpr(value) {
    this._setOption("pointsExpr", value);
  }
  get styleExpr() {
    return this._getOption("styleExpr");
  }
  set styleExpr(value) {
    this._setOption("styleExpr", value);
  }
  get textExpr() {
    return this._getOption("textExpr");
  }
  set textExpr(value) {
    this._setOption("textExpr", value);
  }
  get textStyleExpr() {
    return this._getOption("textStyleExpr");
  }
  set textStyleExpr(value) {
    this._setOption("textStyleExpr", value);
  }
  get toExpr() {
    return this._getOption("toExpr");
  }
  set toExpr(value) {
    this._setOption("toExpr", value);
  }
  get toLineEndExpr() {
    return this._getOption("toLineEndExpr");
  }
  set toLineEndExpr(value) {
    this._setOption("toLineEndExpr", value);
  }
  get toPointIndexExpr() {
    return this._getOption("toPointIndexExpr");
  }
  set toPointIndexExpr(value) {
    this._setOption("toPointIndexExpr", value);
  }
  get zIndexExpr() {
    return this._getOption("zIndexExpr");
  }
  set zIndexExpr(value) {
    this._setOption("zIndexExpr", value);
  }
  get _optionPath() {
    return "edges";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoEdgesComponent.ɵfac = function DxoEdgesComponent_Factory(t) {
  return new (t || DxoEdgesComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoEdgesComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoEdgesComponent, selectors: [["dxo-edges"]], inputs: { customDataExpr: "customDataExpr", dataSource: "dataSource", fromExpr: "fromExpr", fromLineEndExpr: "fromLineEndExpr", fromPointIndexExpr: "fromPointIndexExpr", keyExpr: "keyExpr", lineTypeExpr: "lineTypeExpr", lockedExpr: "lockedExpr", pointsExpr: "pointsExpr", styleExpr: "styleExpr", textExpr: "textExpr", textStyleExpr: "textStyleExpr", toExpr: "toExpr", toLineEndExpr: "toLineEndExpr", toPointIndexExpr: "toPointIndexExpr", zIndexExpr: "zIndexExpr" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoEdgesComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoEdgesComponent, [{
    type: Component,
    args: [{
      selector: "dxo-edges",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { customDataExpr: [{
    type: Input
  }], dataSource: [{
    type: Input
  }], fromExpr: [{
    type: Input
  }], fromLineEndExpr: [{
    type: Input
  }], fromPointIndexExpr: [{
    type: Input
  }], keyExpr: [{
    type: Input
  }], lineTypeExpr: [{
    type: Input
  }], lockedExpr: [{
    type: Input
  }], pointsExpr: [{
    type: Input
  }], styleExpr: [{
    type: Input
  }], textExpr: [{
    type: Input
  }], textStyleExpr: [{
    type: Input
  }], toExpr: [{
    type: Input
  }], toLineEndExpr: [{
    type: Input
  }], toPointIndexExpr: [{
    type: Input
  }], zIndexExpr: [{
    type: Input
  }] });
})();
var DxoEdgesModule = class {
};
DxoEdgesModule.ɵfac = function DxoEdgesModule_Factory(t) {
  return new (t || DxoEdgesModule)();
};
DxoEdgesModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoEdgesModule });
DxoEdgesModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoEdgesModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoEdgesComponent
      ],
      exports: [
        DxoEdgesComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoEdgesModule, { declarations: [DxoEdgesComponent], exports: [DxoEdgesComponent] });
})();
var DxoEditingComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "changesChange" },
      { emit: "editColumnNameChange" },
      { emit: "editRowKeyChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get allowAdding() {
    return this._getOption("allowAdding");
  }
  set allowAdding(value) {
    this._setOption("allowAdding", value);
  }
  get allowDeleting() {
    return this._getOption("allowDeleting");
  }
  set allowDeleting(value) {
    this._setOption("allowDeleting", value);
  }
  get allowUpdating() {
    return this._getOption("allowUpdating");
  }
  set allowUpdating(value) {
    this._setOption("allowUpdating", value);
  }
  get changes() {
    return this._getOption("changes");
  }
  set changes(value) {
    this._setOption("changes", value);
  }
  get confirmDelete() {
    return this._getOption("confirmDelete");
  }
  set confirmDelete(value) {
    this._setOption("confirmDelete", value);
  }
  get editColumnName() {
    return this._getOption("editColumnName");
  }
  set editColumnName(value) {
    this._setOption("editColumnName", value);
  }
  get editRowKey() {
    return this._getOption("editRowKey");
  }
  set editRowKey(value) {
    this._setOption("editRowKey", value);
  }
  get form() {
    return this._getOption("form");
  }
  set form(value) {
    this._setOption("form", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get newRowPosition() {
    return this._getOption("newRowPosition");
  }
  set newRowPosition(value) {
    this._setOption("newRowPosition", value);
  }
  get popup() {
    return this._getOption("popup");
  }
  set popup(value) {
    this._setOption("popup", value);
  }
  get refreshMode() {
    return this._getOption("refreshMode");
  }
  set refreshMode(value) {
    this._setOption("refreshMode", value);
  }
  get selectTextOnEditStart() {
    return this._getOption("selectTextOnEditStart");
  }
  set selectTextOnEditStart(value) {
    this._setOption("selectTextOnEditStart", value);
  }
  get startEditAction() {
    return this._getOption("startEditAction");
  }
  set startEditAction(value) {
    this._setOption("startEditAction", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get useIcons() {
    return this._getOption("useIcons");
  }
  set useIcons(value) {
    this._setOption("useIcons", value);
  }
  get allowAddShape() {
    return this._getOption("allowAddShape");
  }
  set allowAddShape(value) {
    this._setOption("allowAddShape", value);
  }
  get allowChangeConnection() {
    return this._getOption("allowChangeConnection");
  }
  set allowChangeConnection(value) {
    this._setOption("allowChangeConnection", value);
  }
  get allowChangeConnectorPoints() {
    return this._getOption("allowChangeConnectorPoints");
  }
  set allowChangeConnectorPoints(value) {
    this._setOption("allowChangeConnectorPoints", value);
  }
  get allowChangeConnectorText() {
    return this._getOption("allowChangeConnectorText");
  }
  set allowChangeConnectorText(value) {
    this._setOption("allowChangeConnectorText", value);
  }
  get allowChangeShapeText() {
    return this._getOption("allowChangeShapeText");
  }
  set allowChangeShapeText(value) {
    this._setOption("allowChangeShapeText", value);
  }
  get allowDeleteConnector() {
    return this._getOption("allowDeleteConnector");
  }
  set allowDeleteConnector(value) {
    this._setOption("allowDeleteConnector", value);
  }
  get allowDeleteShape() {
    return this._getOption("allowDeleteShape");
  }
  set allowDeleteShape(value) {
    this._setOption("allowDeleteShape", value);
  }
  get allowMoveShape() {
    return this._getOption("allowMoveShape");
  }
  set allowMoveShape(value) {
    this._setOption("allowMoveShape", value);
  }
  get allowResizeShape() {
    return this._getOption("allowResizeShape");
  }
  set allowResizeShape(value) {
    this._setOption("allowResizeShape", value);
  }
  get allowDependencyAdding() {
    return this._getOption("allowDependencyAdding");
  }
  set allowDependencyAdding(value) {
    this._setOption("allowDependencyAdding", value);
  }
  get allowDependencyDeleting() {
    return this._getOption("allowDependencyDeleting");
  }
  set allowDependencyDeleting(value) {
    this._setOption("allowDependencyDeleting", value);
  }
  get allowResourceAdding() {
    return this._getOption("allowResourceAdding");
  }
  set allowResourceAdding(value) {
    this._setOption("allowResourceAdding", value);
  }
  get allowResourceDeleting() {
    return this._getOption("allowResourceDeleting");
  }
  set allowResourceDeleting(value) {
    this._setOption("allowResourceDeleting", value);
  }
  get allowResourceUpdating() {
    return this._getOption("allowResourceUpdating");
  }
  set allowResourceUpdating(value) {
    this._setOption("allowResourceUpdating", value);
  }
  get allowTaskAdding() {
    return this._getOption("allowTaskAdding");
  }
  set allowTaskAdding(value) {
    this._setOption("allowTaskAdding", value);
  }
  get allowTaskDeleting() {
    return this._getOption("allowTaskDeleting");
  }
  set allowTaskDeleting(value) {
    this._setOption("allowTaskDeleting", value);
  }
  get allowTaskResourceUpdating() {
    return this._getOption("allowTaskResourceUpdating");
  }
  set allowTaskResourceUpdating(value) {
    this._setOption("allowTaskResourceUpdating", value);
  }
  get allowTaskUpdating() {
    return this._getOption("allowTaskUpdating");
  }
  set allowTaskUpdating(value) {
    this._setOption("allowTaskUpdating", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get allowDragging() {
    return this._getOption("allowDragging");
  }
  set allowDragging(value) {
    this._setOption("allowDragging", value);
  }
  get allowResizing() {
    return this._getOption("allowResizing");
  }
  set allowResizing(value) {
    this._setOption("allowResizing", value);
  }
  get allowTimeZoneEditing() {
    return this._getOption("allowTimeZoneEditing");
  }
  set allowTimeZoneEditing(value) {
    this._setOption("allowTimeZoneEditing", value);
  }
  get _optionPath() {
    return "editing";
  }
  get changesChildren() {
    return this._getOption("changes");
  }
  set changesChildren(value) {
    this.setChildren("changes", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoEditingComponent.ɵfac = function DxoEditingComponent_Factory(t) {
  return new (t || DxoEditingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoEditingComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoEditingComponent, selectors: [["dxo-editing"]], contentQueries: function DxoEditingComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiChangeComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.changesChildren = _t);
  }
}, inputs: { allowAdding: "allowAdding", allowDeleting: "allowDeleting", allowUpdating: "allowUpdating", changes: "changes", confirmDelete: "confirmDelete", editColumnName: "editColumnName", editRowKey: "editRowKey", form: "form", mode: "mode", newRowPosition: "newRowPosition", popup: "popup", refreshMode: "refreshMode", selectTextOnEditStart: "selectTextOnEditStart", startEditAction: "startEditAction", texts: "texts", useIcons: "useIcons", allowAddShape: "allowAddShape", allowChangeConnection: "allowChangeConnection", allowChangeConnectorPoints: "allowChangeConnectorPoints", allowChangeConnectorText: "allowChangeConnectorText", allowChangeShapeText: "allowChangeShapeText", allowDeleteConnector: "allowDeleteConnector", allowDeleteShape: "allowDeleteShape", allowMoveShape: "allowMoveShape", allowResizeShape: "allowResizeShape", allowDependencyAdding: "allowDependencyAdding", allowDependencyDeleting: "allowDependencyDeleting", allowResourceAdding: "allowResourceAdding", allowResourceDeleting: "allowResourceDeleting", allowResourceUpdating: "allowResourceUpdating", allowTaskAdding: "allowTaskAdding", allowTaskDeleting: "allowTaskDeleting", allowTaskResourceUpdating: "allowTaskResourceUpdating", allowTaskUpdating: "allowTaskUpdating", enabled: "enabled", allowDragging: "allowDragging", allowResizing: "allowResizing", allowTimeZoneEditing: "allowTimeZoneEditing" }, outputs: { changesChange: "changesChange", editColumnNameChange: "editColumnNameChange", editRowKeyChange: "editRowKeyChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoEditingComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoEditingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-editing",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { allowAdding: [{
    type: Input
  }], allowDeleting: [{
    type: Input
  }], allowUpdating: [{
    type: Input
  }], changes: [{
    type: Input
  }], confirmDelete: [{
    type: Input
  }], editColumnName: [{
    type: Input
  }], editRowKey: [{
    type: Input
  }], form: [{
    type: Input
  }], mode: [{
    type: Input
  }], newRowPosition: [{
    type: Input
  }], popup: [{
    type: Input
  }], refreshMode: [{
    type: Input
  }], selectTextOnEditStart: [{
    type: Input
  }], startEditAction: [{
    type: Input
  }], texts: [{
    type: Input
  }], useIcons: [{
    type: Input
  }], allowAddShape: [{
    type: Input
  }], allowChangeConnection: [{
    type: Input
  }], allowChangeConnectorPoints: [{
    type: Input
  }], allowChangeConnectorText: [{
    type: Input
  }], allowChangeShapeText: [{
    type: Input
  }], allowDeleteConnector: [{
    type: Input
  }], allowDeleteShape: [{
    type: Input
  }], allowMoveShape: [{
    type: Input
  }], allowResizeShape: [{
    type: Input
  }], allowDependencyAdding: [{
    type: Input
  }], allowDependencyDeleting: [{
    type: Input
  }], allowResourceAdding: [{
    type: Input
  }], allowResourceDeleting: [{
    type: Input
  }], allowResourceUpdating: [{
    type: Input
  }], allowTaskAdding: [{
    type: Input
  }], allowTaskDeleting: [{
    type: Input
  }], allowTaskResourceUpdating: [{
    type: Input
  }], allowTaskUpdating: [{
    type: Input
  }], enabled: [{
    type: Input
  }], allowDragging: [{
    type: Input
  }], allowResizing: [{
    type: Input
  }], allowTimeZoneEditing: [{
    type: Input
  }], changesChange: [{
    type: Output
  }], editColumnNameChange: [{
    type: Output
  }], editRowKeyChange: [{
    type: Output
  }], changesChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiChangeComponent)]
  }] });
})();
var DxoEditingModule = class {
};
DxoEditingModule.ɵfac = function DxoEditingModule_Factory(t) {
  return new (t || DxoEditingModule)();
};
DxoEditingModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoEditingModule });
DxoEditingModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoEditingModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoEditingComponent
      ],
      exports: [
        DxoEditingComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoEditingModule, { declarations: [DxoEditingComponent], exports: [DxoEditingComponent] });
})();
var DxoExportComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get fileName() {
    return this._getOption("fileName");
  }
  set fileName(value) {
    this._setOption("fileName", value);
  }
  get formats() {
    return this._getOption("formats");
  }
  set formats(value) {
    this._setOption("formats", value);
  }
  get margin() {
    return this._getOption("margin");
  }
  set margin(value) {
    this._setOption("margin", value);
  }
  get printingEnabled() {
    return this._getOption("printingEnabled");
  }
  set printingEnabled(value) {
    this._setOption("printingEnabled", value);
  }
  get svgToCanvas() {
    return this._getOption("svgToCanvas");
  }
  set svgToCanvas(value) {
    this._setOption("svgToCanvas", value);
  }
  get allowExportSelectedData() {
    return this._getOption("allowExportSelectedData");
  }
  set allowExportSelectedData(value) {
    this._setOption("allowExportSelectedData", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get _optionPath() {
    return "export";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoExportComponent.ɵfac = function DxoExportComponent_Factory(t) {
  return new (t || DxoExportComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoExportComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoExportComponent, selectors: [["dxo-export"]], inputs: { backgroundColor: "backgroundColor", enabled: "enabled", fileName: "fileName", formats: "formats", margin: "margin", printingEnabled: "printingEnabled", svgToCanvas: "svgToCanvas", allowExportSelectedData: "allowExportSelectedData", texts: "texts" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoExportComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoExportComponent, [{
    type: Component,
    args: [{
      selector: "dxo-export",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { backgroundColor: [{
    type: Input
  }], enabled: [{
    type: Input
  }], fileName: [{
    type: Input
  }], formats: [{
    type: Input
  }], margin: [{
    type: Input
  }], printingEnabled: [{
    type: Input
  }], svgToCanvas: [{
    type: Input
  }], allowExportSelectedData: [{
    type: Input
  }], texts: [{
    type: Input
  }] });
})();
var DxoExportModule = class {
};
DxoExportModule.ɵfac = function DxoExportModule_Factory(t) {
  return new (t || DxoExportModule)();
};
DxoExportModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoExportModule });
DxoExportModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoExportModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoExportComponent
      ],
      exports: [
        DxoExportComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoExportModule, { declarations: [DxoExportComponent], exports: [DxoExportComponent] });
})();
var DxoFieldChooserComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get allowSearch() {
    return this._getOption("allowSearch");
  }
  set allowSearch(value) {
    this._setOption("allowSearch", value);
  }
  get applyChangesMode() {
    return this._getOption("applyChangesMode");
  }
  set applyChangesMode(value) {
    this._setOption("applyChangesMode", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get layout() {
    return this._getOption("layout");
  }
  set layout(value) {
    this._setOption("layout", value);
  }
  get searchTimeout() {
    return this._getOption("searchTimeout");
  }
  set searchTimeout(value) {
    this._setOption("searchTimeout", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "fieldChooser";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFieldChooserComponent.ɵfac = function DxoFieldChooserComponent_Factory(t) {
  return new (t || DxoFieldChooserComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFieldChooserComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFieldChooserComponent, selectors: [["dxo-field-chooser"]], inputs: { allowSearch: "allowSearch", applyChangesMode: "applyChangesMode", enabled: "enabled", height: "height", layout: "layout", searchTimeout: "searchTimeout", texts: "texts", title: "title", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFieldChooserComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFieldChooserComponent, [{
    type: Component,
    args: [{
      selector: "dxo-field-chooser",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { allowSearch: [{
    type: Input
  }], applyChangesMode: [{
    type: Input
  }], enabled: [{
    type: Input
  }], height: [{
    type: Input
  }], layout: [{
    type: Input
  }], searchTimeout: [{
    type: Input
  }], texts: [{
    type: Input
  }], title: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoFieldChooserModule = class {
};
DxoFieldChooserModule.ɵfac = function DxoFieldChooserModule_Factory(t) {
  return new (t || DxoFieldChooserModule)();
};
DxoFieldChooserModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFieldChooserModule });
DxoFieldChooserModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFieldChooserModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFieldChooserComponent
      ],
      exports: [
        DxoFieldChooserComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFieldChooserModule, { declarations: [DxoFieldChooserComponent], exports: [DxoFieldChooserComponent] });
})();
var DxoFieldPanelComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get allowFieldDragging() {
    return this._getOption("allowFieldDragging");
  }
  set allowFieldDragging(value) {
    this._setOption("allowFieldDragging", value);
  }
  get showColumnFields() {
    return this._getOption("showColumnFields");
  }
  set showColumnFields(value) {
    this._setOption("showColumnFields", value);
  }
  get showDataFields() {
    return this._getOption("showDataFields");
  }
  set showDataFields(value) {
    this._setOption("showDataFields", value);
  }
  get showFilterFields() {
    return this._getOption("showFilterFields");
  }
  set showFilterFields(value) {
    this._setOption("showFilterFields", value);
  }
  get showRowFields() {
    return this._getOption("showRowFields");
  }
  set showRowFields(value) {
    this._setOption("showRowFields", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "fieldPanel";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFieldPanelComponent.ɵfac = function DxoFieldPanelComponent_Factory(t) {
  return new (t || DxoFieldPanelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFieldPanelComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFieldPanelComponent, selectors: [["dxo-field-panel"]], inputs: { allowFieldDragging: "allowFieldDragging", showColumnFields: "showColumnFields", showDataFields: "showDataFields", showFilterFields: "showFilterFields", showRowFields: "showRowFields", texts: "texts", visible: "visible" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFieldPanelComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFieldPanelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-field-panel",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { allowFieldDragging: [{
    type: Input
  }], showColumnFields: [{
    type: Input
  }], showDataFields: [{
    type: Input
  }], showFilterFields: [{
    type: Input
  }], showRowFields: [{
    type: Input
  }], texts: [{
    type: Input
  }], visible: [{
    type: Input
  }] });
})();
var DxoFieldPanelModule = class {
};
DxoFieldPanelModule.ɵfac = function DxoFieldPanelModule_Factory(t) {
  return new (t || DxoFieldPanelModule)();
};
DxoFieldPanelModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFieldPanelModule });
DxoFieldPanelModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFieldPanelModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFieldPanelComponent
      ],
      exports: [
        DxoFieldPanelComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFieldPanelModule, { declarations: [DxoFieldPanelComponent], exports: [DxoFieldPanelComponent] });
})();
var DxiFileManagerToolbarItem = class extends CollectionNestedOption {
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get icon() {
    return this._getOption("icon");
  }
  set icon(value) {
    this._setOption("icon", value);
  }
  get locateInMenu() {
    return this._getOption("locateInMenu");
  }
  set locateInMenu(value) {
    this._setOption("locateInMenu", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get options() {
    return this._getOption("options");
  }
  set options(value) {
    this._setOption("options", value);
  }
  get showText() {
    return this._getOption("showText");
  }
  set showText(value) {
    this._setOption("showText", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get widget() {
    return this._getOption("widget");
  }
  set widget(value) {
    this._setOption("widget", value);
  }
};
DxiFileManagerToolbarItem.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxiFileManagerToolbarItem_BaseFactory;
  return function DxiFileManagerToolbarItem_Factory(t) {
    return (ɵDxiFileManagerToolbarItem_BaseFactory || (ɵDxiFileManagerToolbarItem_BaseFactory = ɵɵgetInheritedFactory(DxiFileManagerToolbarItem)))(t || DxiFileManagerToolbarItem);
  };
}();
DxiFileManagerToolbarItem.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiFileManagerToolbarItem, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiFileManagerToolbarItem_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiFileManagerToolbarItem, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiFileSelectionItemComponent = class extends DxiFileManagerToolbarItem {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "fileSelectionItems";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiFileSelectionItemComponent.ɵfac = function DxiFileSelectionItemComponent_Factory(t) {
  return new (t || DxiFileSelectionItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiFileSelectionItemComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiFileSelectionItemComponent, selectors: [["dxi-file-selection-item"]], inputs: { cssClass: "cssClass", disabled: "disabled", icon: "icon", locateInMenu: "locateInMenu", location: "location", name: "name", options: "options", showText: "showText", text: "text", visible: "visible", widget: "widget" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiFileSelectionItemComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiFileSelectionItemComponent, [{
    type: Component,
    args: [{
      selector: "dxi-file-selection-item",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "cssClass",
        "disabled",
        "icon",
        "locateInMenu",
        "location",
        "name",
        "options",
        "showText",
        "text",
        "visible",
        "widget"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxiFileSelectionItemModule = class {
};
DxiFileSelectionItemModule.ɵfac = function DxiFileSelectionItemModule_Factory(t) {
  return new (t || DxiFileSelectionItemModule)();
};
DxiFileSelectionItemModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiFileSelectionItemModule });
DxiFileSelectionItemModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiFileSelectionItemModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiFileSelectionItemComponent
      ],
      exports: [
        DxiFileSelectionItemComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiFileSelectionItemModule, { declarations: [DxiFileSelectionItemComponent], exports: [DxiFileSelectionItemComponent] });
})();
var DxoFileUploaderOptions = class extends NestedOption {
  get abortUpload() {
    return this._getOption("abortUpload");
  }
  set abortUpload(value) {
    this._setOption("abortUpload", value);
  }
  get accept() {
    return this._getOption("accept");
  }
  set accept(value) {
    this._setOption("accept", value);
  }
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get activeStateEnabled() {
    return this._getOption("activeStateEnabled");
  }
  set activeStateEnabled(value) {
    this._setOption("activeStateEnabled", value);
  }
  get allowCanceling() {
    return this._getOption("allowCanceling");
  }
  set allowCanceling(value) {
    this._setOption("allowCanceling", value);
  }
  get allowedFileExtensions() {
    return this._getOption("allowedFileExtensions");
  }
  set allowedFileExtensions(value) {
    this._setOption("allowedFileExtensions", value);
  }
  get chunkSize() {
    return this._getOption("chunkSize");
  }
  set chunkSize(value) {
    this._setOption("chunkSize", value);
  }
  get dialogTrigger() {
    return this._getOption("dialogTrigger");
  }
  set dialogTrigger(value) {
    this._setOption("dialogTrigger", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get dropZone() {
    return this._getOption("dropZone");
  }
  set dropZone(value) {
    this._setOption("dropZone", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get inputAttr() {
    return this._getOption("inputAttr");
  }
  set inputAttr(value) {
    this._setOption("inputAttr", value);
  }
  get invalidFileExtensionMessage() {
    return this._getOption("invalidFileExtensionMessage");
  }
  set invalidFileExtensionMessage(value) {
    this._setOption("invalidFileExtensionMessage", value);
  }
  get invalidMaxFileSizeMessage() {
    return this._getOption("invalidMaxFileSizeMessage");
  }
  set invalidMaxFileSizeMessage(value) {
    this._setOption("invalidMaxFileSizeMessage", value);
  }
  get invalidMinFileSizeMessage() {
    return this._getOption("invalidMinFileSizeMessage");
  }
  set invalidMinFileSizeMessage(value) {
    this._setOption("invalidMinFileSizeMessage", value);
  }
  get isDirty() {
    return this._getOption("isDirty");
  }
  set isDirty(value) {
    this._setOption("isDirty", value);
  }
  get isValid() {
    return this._getOption("isValid");
  }
  set isValid(value) {
    this._setOption("isValid", value);
  }
  get labelText() {
    return this._getOption("labelText");
  }
  set labelText(value) {
    this._setOption("labelText", value);
  }
  get maxFileSize() {
    return this._getOption("maxFileSize");
  }
  set maxFileSize(value) {
    this._setOption("maxFileSize", value);
  }
  get minFileSize() {
    return this._getOption("minFileSize");
  }
  set minFileSize(value) {
    this._setOption("minFileSize", value);
  }
  get multiple() {
    return this._getOption("multiple");
  }
  set multiple(value) {
    this._setOption("multiple", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get onBeforeSend() {
    return this._getOption("onBeforeSend");
  }
  set onBeforeSend(value) {
    this._setOption("onBeforeSend", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onDropZoneEnter() {
    return this._getOption("onDropZoneEnter");
  }
  set onDropZoneEnter(value) {
    this._setOption("onDropZoneEnter", value);
  }
  get onDropZoneLeave() {
    return this._getOption("onDropZoneLeave");
  }
  set onDropZoneLeave(value) {
    this._setOption("onDropZoneLeave", value);
  }
  get onFilesUploaded() {
    return this._getOption("onFilesUploaded");
  }
  set onFilesUploaded(value) {
    this._setOption("onFilesUploaded", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get onProgress() {
    return this._getOption("onProgress");
  }
  set onProgress(value) {
    this._setOption("onProgress", value);
  }
  get onUploadAborted() {
    return this._getOption("onUploadAborted");
  }
  set onUploadAborted(value) {
    this._setOption("onUploadAborted", value);
  }
  get onUploaded() {
    return this._getOption("onUploaded");
  }
  set onUploaded(value) {
    this._setOption("onUploaded", value);
  }
  get onUploadError() {
    return this._getOption("onUploadError");
  }
  set onUploadError(value) {
    this._setOption("onUploadError", value);
  }
  get onUploadStarted() {
    return this._getOption("onUploadStarted");
  }
  set onUploadStarted(value) {
    this._setOption("onUploadStarted", value);
  }
  get onValueChanged() {
    return this._getOption("onValueChanged");
  }
  set onValueChanged(value) {
    this._setOption("onValueChanged", value);
  }
  get progress() {
    return this._getOption("progress");
  }
  set progress(value) {
    this._setOption("progress", value);
  }
  get readOnly() {
    return this._getOption("readOnly");
  }
  set readOnly(value) {
    this._setOption("readOnly", value);
  }
  get readyToUploadMessage() {
    return this._getOption("readyToUploadMessage");
  }
  set readyToUploadMessage(value) {
    this._setOption("readyToUploadMessage", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get selectButtonText() {
    return this._getOption("selectButtonText");
  }
  set selectButtonText(value) {
    this._setOption("selectButtonText", value);
  }
  get showFileList() {
    return this._getOption("showFileList");
  }
  set showFileList(value) {
    this._setOption("showFileList", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get uploadAbortedMessage() {
    return this._getOption("uploadAbortedMessage");
  }
  set uploadAbortedMessage(value) {
    this._setOption("uploadAbortedMessage", value);
  }
  get uploadButtonText() {
    return this._getOption("uploadButtonText");
  }
  set uploadButtonText(value) {
    this._setOption("uploadButtonText", value);
  }
  get uploadChunk() {
    return this._getOption("uploadChunk");
  }
  set uploadChunk(value) {
    this._setOption("uploadChunk", value);
  }
  get uploadCustomData() {
    return this._getOption("uploadCustomData");
  }
  set uploadCustomData(value) {
    this._setOption("uploadCustomData", value);
  }
  get uploadedMessage() {
    return this._getOption("uploadedMessage");
  }
  set uploadedMessage(value) {
    this._setOption("uploadedMessage", value);
  }
  get uploadFailedMessage() {
    return this._getOption("uploadFailedMessage");
  }
  set uploadFailedMessage(value) {
    this._setOption("uploadFailedMessage", value);
  }
  get uploadFile() {
    return this._getOption("uploadFile");
  }
  set uploadFile(value) {
    this._setOption("uploadFile", value);
  }
  get uploadHeaders() {
    return this._getOption("uploadHeaders");
  }
  set uploadHeaders(value) {
    this._setOption("uploadHeaders", value);
  }
  get uploadMethod() {
    return this._getOption("uploadMethod");
  }
  set uploadMethod(value) {
    this._setOption("uploadMethod", value);
  }
  get uploadMode() {
    return this._getOption("uploadMode");
  }
  set uploadMode(value) {
    this._setOption("uploadMode", value);
  }
  get uploadUrl() {
    return this._getOption("uploadUrl");
  }
  set uploadUrl(value) {
    this._setOption("uploadUrl", value);
  }
  get validationError() {
    return this._getOption("validationError");
  }
  set validationError(value) {
    this._setOption("validationError", value);
  }
  get validationErrors() {
    return this._getOption("validationErrors");
  }
  set validationErrors(value) {
    this._setOption("validationErrors", value);
  }
  get validationStatus() {
    return this._getOption("validationStatus");
  }
  set validationStatus(value) {
    this._setOption("validationStatus", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
};
DxoFileUploaderOptions.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoFileUploaderOptions_BaseFactory;
  return function DxoFileUploaderOptions_Factory(t) {
    return (ɵDxoFileUploaderOptions_BaseFactory || (ɵDxoFileUploaderOptions_BaseFactory = ɵɵgetInheritedFactory(DxoFileUploaderOptions)))(t || DxoFileUploaderOptions);
  };
}();
DxoFileUploaderOptions.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFileUploaderOptions, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFileUploaderOptions_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFileUploaderOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoFileUploaderOptionsComponent = class extends DxoFileUploaderOptions {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "valueChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "fileUploaderOptions";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFileUploaderOptionsComponent.ɵfac = function DxoFileUploaderOptionsComponent_Factory(t) {
  return new (t || DxoFileUploaderOptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFileUploaderOptionsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFileUploaderOptionsComponent, selectors: [["dxo-file-uploader-options"]], inputs: { abortUpload: "abortUpload", accept: "accept", accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", allowCanceling: "allowCanceling", allowedFileExtensions: "allowedFileExtensions", chunkSize: "chunkSize", dialogTrigger: "dialogTrigger", disabled: "disabled", dropZone: "dropZone", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", inputAttr: "inputAttr", invalidFileExtensionMessage: "invalidFileExtensionMessage", invalidMaxFileSizeMessage: "invalidMaxFileSizeMessage", invalidMinFileSizeMessage: "invalidMinFileSizeMessage", isDirty: "isDirty", isValid: "isValid", labelText: "labelText", maxFileSize: "maxFileSize", minFileSize: "minFileSize", multiple: "multiple", name: "name", onBeforeSend: "onBeforeSend", onContentReady: "onContentReady", onDisposing: "onDisposing", onDropZoneEnter: "onDropZoneEnter", onDropZoneLeave: "onDropZoneLeave", onFilesUploaded: "onFilesUploaded", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onProgress: "onProgress", onUploadAborted: "onUploadAborted", onUploaded: "onUploaded", onUploadError: "onUploadError", onUploadStarted: "onUploadStarted", onValueChanged: "onValueChanged", progress: "progress", readOnly: "readOnly", readyToUploadMessage: "readyToUploadMessage", rtlEnabled: "rtlEnabled", selectButtonText: "selectButtonText", showFileList: "showFileList", tabIndex: "tabIndex", uploadAbortedMessage: "uploadAbortedMessage", uploadButtonText: "uploadButtonText", uploadChunk: "uploadChunk", uploadCustomData: "uploadCustomData", uploadedMessage: "uploadedMessage", uploadFailedMessage: "uploadFailedMessage", uploadFile: "uploadFile", uploadHeaders: "uploadHeaders", uploadMethod: "uploadMethod", uploadMode: "uploadMode", uploadUrl: "uploadUrl", validationError: "validationError", validationErrors: "validationErrors", validationStatus: "validationStatus", value: "value", visible: "visible", width: "width" }, outputs: { valueChange: "valueChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFileUploaderOptionsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFileUploaderOptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-file-uploader-options",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "abortUpload",
        "accept",
        "accessKey",
        "activeStateEnabled",
        "allowCanceling",
        "allowedFileExtensions",
        "chunkSize",
        "dialogTrigger",
        "disabled",
        "dropZone",
        "elementAttr",
        "focusStateEnabled",
        "height",
        "hint",
        "hoverStateEnabled",
        "inputAttr",
        "invalidFileExtensionMessage",
        "invalidMaxFileSizeMessage",
        "invalidMinFileSizeMessage",
        "isDirty",
        "isValid",
        "labelText",
        "maxFileSize",
        "minFileSize",
        "multiple",
        "name",
        "onBeforeSend",
        "onContentReady",
        "onDisposing",
        "onDropZoneEnter",
        "onDropZoneLeave",
        "onFilesUploaded",
        "onInitialized",
        "onOptionChanged",
        "onProgress",
        "onUploadAborted",
        "onUploaded",
        "onUploadError",
        "onUploadStarted",
        "onValueChanged",
        "progress",
        "readOnly",
        "readyToUploadMessage",
        "rtlEnabled",
        "selectButtonText",
        "showFileList",
        "tabIndex",
        "uploadAbortedMessage",
        "uploadButtonText",
        "uploadChunk",
        "uploadCustomData",
        "uploadedMessage",
        "uploadFailedMessage",
        "uploadFile",
        "uploadHeaders",
        "uploadMethod",
        "uploadMode",
        "uploadUrl",
        "validationError",
        "validationErrors",
        "validationStatus",
        "value",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { valueChange: [{
    type: Output
  }] });
})();
var DxoFileUploaderOptionsModule = class {
};
DxoFileUploaderOptionsModule.ɵfac = function DxoFileUploaderOptionsModule_Factory(t) {
  return new (t || DxoFileUploaderOptionsModule)();
};
DxoFileUploaderOptionsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFileUploaderOptionsModule });
DxoFileUploaderOptionsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFileUploaderOptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFileUploaderOptionsComponent
      ],
      exports: [
        DxoFileUploaderOptionsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFileUploaderOptionsModule, { declarations: [DxoFileUploaderOptionsComponent], exports: [DxoFileUploaderOptionsComponent] });
})();
var DxoFilterBuilderPopupComponent = class extends DxoPopupOptions {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "heightChange" },
      { emit: "positionChange" },
      { emit: "visibleChange" },
      { emit: "widthChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "filterBuilderPopup";
  }
  get toolbarItemsChildren() {
    return this._getOption("toolbarItems");
  }
  set toolbarItemsChildren(value) {
    this.setChildren("toolbarItems", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFilterBuilderPopupComponent.ɵfac = function DxoFilterBuilderPopupComponent_Factory(t) {
  return new (t || DxoFilterBuilderPopupComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFilterBuilderPopupComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFilterBuilderPopupComponent, selectors: [["dxo-filter-builder-popup"]], contentQueries: function DxoFilterBuilderPopupComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiToolbarItemComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.toolbarItemsChildren = _t);
  }
}, inputs: { accessKey: "accessKey", animation: "animation", closeOnOutsideClick: "closeOnOutsideClick", container: "container", contentTemplate: "contentTemplate", copyRootClassesToWrapper: "copyRootClassesToWrapper", deferRendering: "deferRendering", disabled: "disabled", dragAndResizeArea: "dragAndResizeArea", dragEnabled: "dragEnabled", dragOutsideBoundary: "dragOutsideBoundary", elementAttr: "elementAttr", enableBodyScroll: "enableBodyScroll", focusStateEnabled: "focusStateEnabled", fullScreen: "fullScreen", height: "height", hideOnOutsideClick: "hideOnOutsideClick", hideOnParentScroll: "hideOnParentScroll", hint: "hint", hoverStateEnabled: "hoverStateEnabled", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", onContentReady: "onContentReady", onDisposing: "onDisposing", onHidden: "onHidden", onHiding: "onHiding", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onResize: "onResize", onResizeEnd: "onResizeEnd", onResizeStart: "onResizeStart", onShowing: "onShowing", onShown: "onShown", onTitleRendered: "onTitleRendered", position: "position", resizeEnabled: "resizeEnabled", restorePosition: "restorePosition", rtlEnabled: "rtlEnabled", shading: "shading", shadingColor: "shadingColor", showCloseButton: "showCloseButton", showTitle: "showTitle", tabIndex: "tabIndex", title: "title", titleTemplate: "titleTemplate", toolbarItems: "toolbarItems", visible: "visible", width: "width", wrapperAttr: "wrapperAttr" }, outputs: { heightChange: "heightChange", positionChange: "positionChange", visibleChange: "visibleChange", widthChange: "widthChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFilterBuilderPopupComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterBuilderPopupComponent, [{
    type: Component,
    args: [{
      selector: "dxo-filter-builder-popup",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "accessKey",
        "animation",
        "closeOnOutsideClick",
        "container",
        "contentTemplate",
        "copyRootClassesToWrapper",
        "deferRendering",
        "disabled",
        "dragAndResizeArea",
        "dragEnabled",
        "dragOutsideBoundary",
        "elementAttr",
        "enableBodyScroll",
        "focusStateEnabled",
        "fullScreen",
        "height",
        "hideOnOutsideClick",
        "hideOnParentScroll",
        "hint",
        "hoverStateEnabled",
        "maxHeight",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onContentReady",
        "onDisposing",
        "onHidden",
        "onHiding",
        "onInitialized",
        "onOptionChanged",
        "onResize",
        "onResizeEnd",
        "onResizeStart",
        "onShowing",
        "onShown",
        "onTitleRendered",
        "position",
        "resizeEnabled",
        "restorePosition",
        "rtlEnabled",
        "shading",
        "shadingColor",
        "showCloseButton",
        "showTitle",
        "tabIndex",
        "title",
        "titleTemplate",
        "toolbarItems",
        "visible",
        "width",
        "wrapperAttr"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { heightChange: [{
    type: Output
  }], positionChange: [{
    type: Output
  }], visibleChange: [{
    type: Output
  }], widthChange: [{
    type: Output
  }], toolbarItemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiToolbarItemComponent)]
  }] });
})();
var DxoFilterBuilderPopupModule = class {
};
DxoFilterBuilderPopupModule.ɵfac = function DxoFilterBuilderPopupModule_Factory(t) {
  return new (t || DxoFilterBuilderPopupModule)();
};
DxoFilterBuilderPopupModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFilterBuilderPopupModule });
DxoFilterBuilderPopupModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterBuilderPopupModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFilterBuilderPopupComponent
      ],
      exports: [
        DxoFilterBuilderPopupComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFilterBuilderPopupModule, { declarations: [DxoFilterBuilderPopupComponent], exports: [DxoFilterBuilderPopupComponent] });
})();
var DxoFilterBuilderOptions = class extends NestedOption {
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get activeStateEnabled() {
    return this._getOption("activeStateEnabled");
  }
  set activeStateEnabled(value) {
    this._setOption("activeStateEnabled", value);
  }
  get allowHierarchicalFields() {
    return this._getOption("allowHierarchicalFields");
  }
  set allowHierarchicalFields(value) {
    this._setOption("allowHierarchicalFields", value);
  }
  get customOperations() {
    return this._getOption("customOperations");
  }
  set customOperations(value) {
    this._setOption("customOperations", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get fields() {
    return this._getOption("fields");
  }
  set fields(value) {
    this._setOption("fields", value);
  }
  get filterOperationDescriptions() {
    return this._getOption("filterOperationDescriptions");
  }
  set filterOperationDescriptions(value) {
    this._setOption("filterOperationDescriptions", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get groupOperationDescriptions() {
    return this._getOption("groupOperationDescriptions");
  }
  set groupOperationDescriptions(value) {
    this._setOption("groupOperationDescriptions", value);
  }
  get groupOperations() {
    return this._getOption("groupOperations");
  }
  set groupOperations(value) {
    this._setOption("groupOperations", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get maxGroupLevel() {
    return this._getOption("maxGroupLevel");
  }
  set maxGroupLevel(value) {
    this._setOption("maxGroupLevel", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onEditorPrepared() {
    return this._getOption("onEditorPrepared");
  }
  set onEditorPrepared(value) {
    this._setOption("onEditorPrepared", value);
  }
  get onEditorPreparing() {
    return this._getOption("onEditorPreparing");
  }
  set onEditorPreparing(value) {
    this._setOption("onEditorPreparing", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get onValueChanged() {
    return this._getOption("onValueChanged");
  }
  set onValueChanged(value) {
    this._setOption("onValueChanged", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
};
DxoFilterBuilderOptions.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoFilterBuilderOptions_BaseFactory;
  return function DxoFilterBuilderOptions_Factory(t) {
    return (ɵDxoFilterBuilderOptions_BaseFactory || (ɵDxoFilterBuilderOptions_BaseFactory = ɵɵgetInheritedFactory(DxoFilterBuilderOptions)))(t || DxoFilterBuilderOptions);
  };
}();
DxoFilterBuilderOptions.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFilterBuilderOptions, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFilterBuilderOptions_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterBuilderOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoFilterBuilderComponent = class extends DxoFilterBuilderOptions {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "valueChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "filterBuilder";
  }
  get customOperationsChildren() {
    return this._getOption("customOperations");
  }
  set customOperationsChildren(value) {
    this.setChildren("customOperations", value);
  }
  get fieldsChildren() {
    return this._getOption("fields");
  }
  set fieldsChildren(value) {
    this.setChildren("fields", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFilterBuilderComponent.ɵfac = function DxoFilterBuilderComponent_Factory(t) {
  return new (t || DxoFilterBuilderComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFilterBuilderComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFilterBuilderComponent, selectors: [["dxo-filter-builder"]], contentQueries: function DxoFilterBuilderComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiCustomOperationComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiFieldComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.customOperationsChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.fieldsChildren = _t);
  }
}, inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", allowHierarchicalFields: "allowHierarchicalFields", customOperations: "customOperations", disabled: "disabled", elementAttr: "elementAttr", fields: "fields", filterOperationDescriptions: "filterOperationDescriptions", focusStateEnabled: "focusStateEnabled", groupOperationDescriptions: "groupOperationDescriptions", groupOperations: "groupOperations", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", maxGroupLevel: "maxGroupLevel", onContentReady: "onContentReady", onDisposing: "onDisposing", onEditorPrepared: "onEditorPrepared", onEditorPreparing: "onEditorPreparing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onValueChanged: "onValueChanged", rtlEnabled: "rtlEnabled", tabIndex: "tabIndex", value: "value", visible: "visible", width: "width" }, outputs: { valueChange: "valueChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFilterBuilderComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterBuilderComponent, [{
    type: Component,
    args: [{
      selector: "dxo-filter-builder",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "accessKey",
        "activeStateEnabled",
        "allowHierarchicalFields",
        "customOperations",
        "disabled",
        "elementAttr",
        "fields",
        "filterOperationDescriptions",
        "focusStateEnabled",
        "groupOperationDescriptions",
        "groupOperations",
        "height",
        "hint",
        "hoverStateEnabled",
        "maxGroupLevel",
        "onContentReady",
        "onDisposing",
        "onEditorPrepared",
        "onEditorPreparing",
        "onInitialized",
        "onOptionChanged",
        "onValueChanged",
        "rtlEnabled",
        "tabIndex",
        "value",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { valueChange: [{
    type: Output
  }], customOperationsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiCustomOperationComponent)]
  }], fieldsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiFieldComponent)]
  }] });
})();
var DxoFilterBuilderModule = class {
};
DxoFilterBuilderModule.ɵfac = function DxoFilterBuilderModule_Factory(t) {
  return new (t || DxoFilterBuilderModule)();
};
DxoFilterBuilderModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFilterBuilderModule });
DxoFilterBuilderModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterBuilderModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFilterBuilderComponent
      ],
      exports: [
        DxoFilterBuilderComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFilterBuilderModule, { declarations: [DxoFilterBuilderComponent], exports: [DxoFilterBuilderComponent] });
})();
var DxoFilterOperationDescriptionsComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get between() {
    return this._getOption("between");
  }
  set between(value) {
    this._setOption("between", value);
  }
  get contains() {
    return this._getOption("contains");
  }
  set contains(value) {
    this._setOption("contains", value);
  }
  get endsWith() {
    return this._getOption("endsWith");
  }
  set endsWith(value) {
    this._setOption("endsWith", value);
  }
  get equal() {
    return this._getOption("equal");
  }
  set equal(value) {
    this._setOption("equal", value);
  }
  get greaterThan() {
    return this._getOption("greaterThan");
  }
  set greaterThan(value) {
    this._setOption("greaterThan", value);
  }
  get greaterThanOrEqual() {
    return this._getOption("greaterThanOrEqual");
  }
  set greaterThanOrEqual(value) {
    this._setOption("greaterThanOrEqual", value);
  }
  get isBlank() {
    return this._getOption("isBlank");
  }
  set isBlank(value) {
    this._setOption("isBlank", value);
  }
  get isNotBlank() {
    return this._getOption("isNotBlank");
  }
  set isNotBlank(value) {
    this._setOption("isNotBlank", value);
  }
  get lessThan() {
    return this._getOption("lessThan");
  }
  set lessThan(value) {
    this._setOption("lessThan", value);
  }
  get lessThanOrEqual() {
    return this._getOption("lessThanOrEqual");
  }
  set lessThanOrEqual(value) {
    this._setOption("lessThanOrEqual", value);
  }
  get notContains() {
    return this._getOption("notContains");
  }
  set notContains(value) {
    this._setOption("notContains", value);
  }
  get notEqual() {
    return this._getOption("notEqual");
  }
  set notEqual(value) {
    this._setOption("notEqual", value);
  }
  get startsWith() {
    return this._getOption("startsWith");
  }
  set startsWith(value) {
    this._setOption("startsWith", value);
  }
  get _optionPath() {
    return "filterOperationDescriptions";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFilterOperationDescriptionsComponent.ɵfac = function DxoFilterOperationDescriptionsComponent_Factory(t) {
  return new (t || DxoFilterOperationDescriptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFilterOperationDescriptionsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFilterOperationDescriptionsComponent, selectors: [["dxo-filter-operation-descriptions"]], inputs: { between: "between", contains: "contains", endsWith: "endsWith", equal: "equal", greaterThan: "greaterThan", greaterThanOrEqual: "greaterThanOrEqual", isBlank: "isBlank", isNotBlank: "isNotBlank", lessThan: "lessThan", lessThanOrEqual: "lessThanOrEqual", notContains: "notContains", notEqual: "notEqual", startsWith: "startsWith" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFilterOperationDescriptionsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterOperationDescriptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-filter-operation-descriptions",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { between: [{
    type: Input
  }], contains: [{
    type: Input
  }], endsWith: [{
    type: Input
  }], equal: [{
    type: Input
  }], greaterThan: [{
    type: Input
  }], greaterThanOrEqual: [{
    type: Input
  }], isBlank: [{
    type: Input
  }], isNotBlank: [{
    type: Input
  }], lessThan: [{
    type: Input
  }], lessThanOrEqual: [{
    type: Input
  }], notContains: [{
    type: Input
  }], notEqual: [{
    type: Input
  }], startsWith: [{
    type: Input
  }] });
})();
var DxoFilterOperationDescriptionsModule = class {
};
DxoFilterOperationDescriptionsModule.ɵfac = function DxoFilterOperationDescriptionsModule_Factory(t) {
  return new (t || DxoFilterOperationDescriptionsModule)();
};
DxoFilterOperationDescriptionsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFilterOperationDescriptionsModule });
DxoFilterOperationDescriptionsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterOperationDescriptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFilterOperationDescriptionsComponent
      ],
      exports: [
        DxoFilterOperationDescriptionsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFilterOperationDescriptionsModule, { declarations: [DxoFilterOperationDescriptionsComponent], exports: [DxoFilterOperationDescriptionsComponent] });
})();
var DxoFilterPanelComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "filterEnabledChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get filterEnabled() {
    return this._getOption("filterEnabled");
  }
  set filterEnabled(value) {
    this._setOption("filterEnabled", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "filterPanel";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFilterPanelComponent.ɵfac = function DxoFilterPanelComponent_Factory(t) {
  return new (t || DxoFilterPanelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFilterPanelComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFilterPanelComponent, selectors: [["dxo-filter-panel"]], inputs: { customizeText: "customizeText", filterEnabled: "filterEnabled", texts: "texts", visible: "visible" }, outputs: { filterEnabledChange: "filterEnabledChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFilterPanelComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterPanelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-filter-panel",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { customizeText: [{
    type: Input
  }], filterEnabled: [{
    type: Input
  }], texts: [{
    type: Input
  }], visible: [{
    type: Input
  }], filterEnabledChange: [{
    type: Output
  }] });
})();
var DxoFilterPanelModule = class {
};
DxoFilterPanelModule.ɵfac = function DxoFilterPanelModule_Factory(t) {
  return new (t || DxoFilterPanelModule)();
};
DxoFilterPanelModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFilterPanelModule });
DxoFilterPanelModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterPanelModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFilterPanelComponent
      ],
      exports: [
        DxoFilterPanelComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFilterPanelModule, { declarations: [DxoFilterPanelComponent], exports: [DxoFilterPanelComponent] });
})();
var DxoGanttFilterRow = class extends NestedOption {
  get applyFilter() {
    return this._getOption("applyFilter");
  }
  set applyFilter(value) {
    this._setOption("applyFilter", value);
  }
  get applyFilterText() {
    return this._getOption("applyFilterText");
  }
  set applyFilterText(value) {
    this._setOption("applyFilterText", value);
  }
  get betweenEndText() {
    return this._getOption("betweenEndText");
  }
  set betweenEndText(value) {
    this._setOption("betweenEndText", value);
  }
  get betweenStartText() {
    return this._getOption("betweenStartText");
  }
  set betweenStartText(value) {
    this._setOption("betweenStartText", value);
  }
  get operationDescriptions() {
    return this._getOption("operationDescriptions");
  }
  set operationDescriptions(value) {
    this._setOption("operationDescriptions", value);
  }
  get resetOperationText() {
    return this._getOption("resetOperationText");
  }
  set resetOperationText(value) {
    this._setOption("resetOperationText", value);
  }
  get showAllText() {
    return this._getOption("showAllText");
  }
  set showAllText(value) {
    this._setOption("showAllText", value);
  }
  get showOperationChooser() {
    return this._getOption("showOperationChooser");
  }
  set showOperationChooser(value) {
    this._setOption("showOperationChooser", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
};
DxoGanttFilterRow.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoGanttFilterRow_BaseFactory;
  return function DxoGanttFilterRow_Factory(t) {
    return (ɵDxoGanttFilterRow_BaseFactory || (ɵDxoGanttFilterRow_BaseFactory = ɵɵgetInheritedFactory(DxoGanttFilterRow)))(t || DxoGanttFilterRow);
  };
}();
DxoGanttFilterRow.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoGanttFilterRow, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoGanttFilterRow_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGanttFilterRow, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoFilterRowComponent = class extends DxoGanttFilterRow {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "filterRow";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFilterRowComponent.ɵfac = function DxoFilterRowComponent_Factory(t) {
  return new (t || DxoFilterRowComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFilterRowComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFilterRowComponent, selectors: [["dxo-filter-row"]], inputs: { applyFilter: "applyFilter", applyFilterText: "applyFilterText", betweenEndText: "betweenEndText", betweenStartText: "betweenStartText", operationDescriptions: "operationDescriptions", resetOperationText: "resetOperationText", showAllText: "showAllText", showOperationChooser: "showOperationChooser", visible: "visible" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFilterRowComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterRowComponent, [{
    type: Component,
    args: [{
      selector: "dxo-filter-row",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "applyFilter",
        "applyFilterText",
        "betweenEndText",
        "betweenStartText",
        "operationDescriptions",
        "resetOperationText",
        "showAllText",
        "showOperationChooser",
        "visible"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoFilterRowModule = class {
};
DxoFilterRowModule.ɵfac = function DxoFilterRowModule_Factory(t) {
  return new (t || DxoFilterRowModule)();
};
DxoFilterRowModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFilterRowModule });
DxoFilterRowModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFilterRowModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFilterRowComponent
      ],
      exports: [
        DxoFilterRowComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFilterRowModule, { declarations: [DxoFilterRowComponent], exports: [DxoFilterRowComponent] });
})();
var DxoVizFont = class extends NestedOption {
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get family() {
    return this._getOption("family");
  }
  set family(value) {
    this._setOption("family", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get size() {
    return this._getOption("size");
  }
  set size(value) {
    this._setOption("size", value);
  }
  get weight() {
    return this._getOption("weight");
  }
  set weight(value) {
    this._setOption("weight", value);
  }
};
DxoVizFont.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoVizFont_BaseFactory;
  return function DxoVizFont_Factory(t) {
    return (ɵDxoVizFont_BaseFactory || (ɵDxoVizFont_BaseFactory = ɵɵgetInheritedFactory(DxoVizFont)))(t || DxoVizFont);
  };
}();
DxoVizFont.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoVizFont, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoVizFont_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoVizFont, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoFontComponent = class extends DxoVizFont {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "font";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFontComponent.ɵfac = function DxoFontComponent_Factory(t) {
  return new (t || DxoFontComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFontComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFontComponent, selectors: [["dxo-font"]], inputs: { color: "color", family: "family", opacity: "opacity", size: "size", weight: "weight" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFontComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFontComponent, [{
    type: Component,
    args: [{
      selector: "dxo-font",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "color",
        "family",
        "opacity",
        "size",
        "weight"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoFontModule = class {
};
DxoFontModule.ɵfac = function DxoFontModule_Factory(t) {
  return new (t || DxoFontModule)();
};
DxoFontModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFontModule });
DxoFontModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFontModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFontComponent
      ],
      exports: [
        DxoFontComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFontModule, { declarations: [DxoFontComponent], exports: [DxoFontComponent] });
})();
var DxoFormSimpleItem = class extends NestedOption {
  get colSpan() {
    return this._getOption("colSpan");
  }
  set colSpan(value) {
    this._setOption("colSpan", value);
  }
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get dataField() {
    return this._getOption("dataField");
  }
  set dataField(value) {
    this._setOption("dataField", value);
  }
  get editorOptions() {
    return this._getOption("editorOptions");
  }
  set editorOptions(value) {
    this._setOption("editorOptions", value);
  }
  get editorType() {
    return this._getOption("editorType");
  }
  set editorType(value) {
    this._setOption("editorType", value);
  }
  get helpText() {
    return this._getOption("helpText");
  }
  set helpText(value) {
    this._setOption("helpText", value);
  }
  get isRequired() {
    return this._getOption("isRequired");
  }
  set isRequired(value) {
    this._setOption("isRequired", value);
  }
  get itemType() {
    return this._getOption("itemType");
  }
  set itemType(value) {
    this._setOption("itemType", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get validationRules() {
    return this._getOption("validationRules");
  }
  set validationRules(value) {
    this._setOption("validationRules", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get visibleIndex() {
    return this._getOption("visibleIndex");
  }
  set visibleIndex(value) {
    this._setOption("visibleIndex", value);
  }
};
DxoFormSimpleItem.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoFormSimpleItem_BaseFactory;
  return function DxoFormSimpleItem_Factory(t) {
    return (ɵDxoFormSimpleItem_BaseFactory || (ɵDxoFormSimpleItem_BaseFactory = ɵɵgetInheritedFactory(DxoFormSimpleItem)))(t || DxoFormSimpleItem);
  };
}();
DxoFormSimpleItem.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFormSimpleItem, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFormSimpleItem_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormSimpleItem, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoFormItemComponent = class extends DxoFormSimpleItem {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "formItem";
  }
  get validationRulesChildren() {
    return this._getOption("validationRules");
  }
  set validationRulesChildren(value) {
    this.setChildren("validationRules", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFormItemComponent.ɵfac = function DxoFormItemComponent_Factory(t) {
  return new (t || DxoFormItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFormItemComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFormItemComponent, selectors: [["dxo-form-item"]], contentQueries: function DxoFormItemComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiValidationRuleComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.validationRulesChildren = _t);
  }
}, inputs: { colSpan: "colSpan", cssClass: "cssClass", dataField: "dataField", editorOptions: "editorOptions", editorType: "editorType", helpText: "helpText", isRequired: "isRequired", itemType: "itemType", label: "label", name: "name", template: "template", validationRules: "validationRules", visible: "visible", visibleIndex: "visibleIndex" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFormItemComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormItemComponent, [{
    type: Component,
    args: [{
      selector: "dxo-form-item",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "colSpan",
        "cssClass",
        "dataField",
        "editorOptions",
        "editorType",
        "helpText",
        "isRequired",
        "itemType",
        "label",
        "name",
        "template",
        "validationRules",
        "visible",
        "visibleIndex"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { validationRulesChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiValidationRuleComponent)]
  }] });
})();
var DxoFormItemModule = class {
};
DxoFormItemModule.ɵfac = function DxoFormItemModule_Factory(t) {
  return new (t || DxoFormItemModule)();
};
DxoFormItemModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFormItemModule });
DxoFormItemModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormItemModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFormItemComponent
      ],
      exports: [
        DxoFormItemComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFormItemModule, { declarations: [DxoFormItemComponent], exports: [DxoFormItemComponent] });
})();
var DxoFormOptions = class extends NestedOption {
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get activeStateEnabled() {
    return this._getOption("activeStateEnabled");
  }
  set activeStateEnabled(value) {
    this._setOption("activeStateEnabled", value);
  }
  get alignItemLabels() {
    return this._getOption("alignItemLabels");
  }
  set alignItemLabels(value) {
    this._setOption("alignItemLabels", value);
  }
  get alignItemLabelsInAllGroups() {
    return this._getOption("alignItemLabelsInAllGroups");
  }
  set alignItemLabelsInAllGroups(value) {
    this._setOption("alignItemLabelsInAllGroups", value);
  }
  get colCount() {
    return this._getOption("colCount");
  }
  set colCount(value) {
    this._setOption("colCount", value);
  }
  get colCountByScreen() {
    return this._getOption("colCountByScreen");
  }
  set colCountByScreen(value) {
    this._setOption("colCountByScreen", value);
  }
  get customizeItem() {
    return this._getOption("customizeItem");
  }
  set customizeItem(value) {
    this._setOption("customizeItem", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get formData() {
    return this._getOption("formData");
  }
  set formData(value) {
    this._setOption("formData", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get isDirty() {
    return this._getOption("isDirty");
  }
  set isDirty(value) {
    this._setOption("isDirty", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get labelLocation() {
    return this._getOption("labelLocation");
  }
  set labelLocation(value) {
    this._setOption("labelLocation", value);
  }
  get labelMode() {
    return this._getOption("labelMode");
  }
  set labelMode(value) {
    this._setOption("labelMode", value);
  }
  get minColWidth() {
    return this._getOption("minColWidth");
  }
  set minColWidth(value) {
    this._setOption("minColWidth", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onEditorEnterKey() {
    return this._getOption("onEditorEnterKey");
  }
  set onEditorEnterKey(value) {
    this._setOption("onEditorEnterKey", value);
  }
  get onFieldDataChanged() {
    return this._getOption("onFieldDataChanged");
  }
  set onFieldDataChanged(value) {
    this._setOption("onFieldDataChanged", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get optionalMark() {
    return this._getOption("optionalMark");
  }
  set optionalMark(value) {
    this._setOption("optionalMark", value);
  }
  get readOnly() {
    return this._getOption("readOnly");
  }
  set readOnly(value) {
    this._setOption("readOnly", value);
  }
  get requiredMark() {
    return this._getOption("requiredMark");
  }
  set requiredMark(value) {
    this._setOption("requiredMark", value);
  }
  get requiredMessage() {
    return this._getOption("requiredMessage");
  }
  set requiredMessage(value) {
    this._setOption("requiredMessage", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get screenByWidth() {
    return this._getOption("screenByWidth");
  }
  set screenByWidth(value) {
    this._setOption("screenByWidth", value);
  }
  get scrollingEnabled() {
    return this._getOption("scrollingEnabled");
  }
  set scrollingEnabled(value) {
    this._setOption("scrollingEnabled", value);
  }
  get showColonAfterLabel() {
    return this._getOption("showColonAfterLabel");
  }
  set showColonAfterLabel(value) {
    this._setOption("showColonAfterLabel", value);
  }
  get showOptionalMark() {
    return this._getOption("showOptionalMark");
  }
  set showOptionalMark(value) {
    this._setOption("showOptionalMark", value);
  }
  get showRequiredMark() {
    return this._getOption("showRequiredMark");
  }
  set showRequiredMark(value) {
    this._setOption("showRequiredMark", value);
  }
  get showValidationSummary() {
    return this._getOption("showValidationSummary");
  }
  set showValidationSummary(value) {
    this._setOption("showValidationSummary", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get validationGroup() {
    return this._getOption("validationGroup");
  }
  set validationGroup(value) {
    this._setOption("validationGroup", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
};
DxoFormOptions.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoFormOptions_BaseFactory;
  return function DxoFormOptions_Factory(t) {
    return (ɵDxoFormOptions_BaseFactory || (ɵDxoFormOptions_BaseFactory = ɵɵgetInheritedFactory(DxoFormOptions)))(t || DxoFormOptions);
  };
}();
DxoFormOptions.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFormOptions, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFormOptions_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoFormComponent = class extends DxoFormOptions {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "formDataChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "form";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFormComponent.ɵfac = function DxoFormComponent_Factory(t) {
  return new (t || DxoFormComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFormComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFormComponent, selectors: [["dxo-form"]], contentQueries: function DxoFormComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
  }
}, inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", alignItemLabels: "alignItemLabels", alignItemLabelsInAllGroups: "alignItemLabelsInAllGroups", colCount: "colCount", colCountByScreen: "colCountByScreen", customizeItem: "customizeItem", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", formData: "formData", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", isDirty: "isDirty", items: "items", labelLocation: "labelLocation", labelMode: "labelMode", minColWidth: "minColWidth", onContentReady: "onContentReady", onDisposing: "onDisposing", onEditorEnterKey: "onEditorEnterKey", onFieldDataChanged: "onFieldDataChanged", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", optionalMark: "optionalMark", readOnly: "readOnly", requiredMark: "requiredMark", requiredMessage: "requiredMessage", rtlEnabled: "rtlEnabled", screenByWidth: "screenByWidth", scrollingEnabled: "scrollingEnabled", showColonAfterLabel: "showColonAfterLabel", showOptionalMark: "showOptionalMark", showRequiredMark: "showRequiredMark", showValidationSummary: "showValidationSummary", tabIndex: "tabIndex", validationGroup: "validationGroup", visible: "visible", width: "width" }, outputs: { formDataChange: "formDataChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFormComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormComponent, [{
    type: Component,
    args: [{
      selector: "dxo-form",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "accessKey",
        "activeStateEnabled",
        "alignItemLabels",
        "alignItemLabelsInAllGroups",
        "colCount",
        "colCountByScreen",
        "customizeItem",
        "disabled",
        "elementAttr",
        "focusStateEnabled",
        "formData",
        "height",
        "hint",
        "hoverStateEnabled",
        "isDirty",
        "items",
        "labelLocation",
        "labelMode",
        "minColWidth",
        "onContentReady",
        "onDisposing",
        "onEditorEnterKey",
        "onFieldDataChanged",
        "onInitialized",
        "onOptionChanged",
        "optionalMark",
        "readOnly",
        "requiredMark",
        "requiredMessage",
        "rtlEnabled",
        "screenByWidth",
        "scrollingEnabled",
        "showColonAfterLabel",
        "showOptionalMark",
        "showRequiredMark",
        "showValidationSummary",
        "tabIndex",
        "validationGroup",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { formDataChange: [{
    type: Output
  }], itemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiItemComponent)]
  }] });
})();
var DxoFormModule = class {
};
DxoFormModule.ɵfac = function DxoFormModule_Factory(t) {
  return new (t || DxoFormModule)();
};
DxoFormModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFormModule });
DxoFormModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFormComponent
      ],
      exports: [
        DxoFormComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFormModule, { declarations: [DxoFormComponent], exports: [DxoFormComponent] });
})();
var DxoFormatComponent = class extends DxoFormat {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "format";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFormatComponent.ɵfac = function DxoFormatComponent_Factory(t) {
  return new (t || DxoFormatComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFormatComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFormatComponent, selectors: [["dxo-format"]], inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type", useCurrencyAccountingStyle: "useCurrencyAccountingStyle" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFormatComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormatComponent, [{
    type: Component,
    args: [{
      selector: "dxo-format",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "currency",
        "formatter",
        "parser",
        "precision",
        "type",
        "useCurrencyAccountingStyle"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoFormatModule = class {
};
DxoFormatModule.ɵfac = function DxoFormatModule_Factory(t) {
  return new (t || DxoFormatModule)();
};
DxoFormatModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFormatModule });
DxoFormatModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFormatModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFormatComponent
      ],
      exports: [
        DxoFormatComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFormatModule, { declarations: [DxoFormatComponent], exports: [DxoFormatComponent] });
})();
var DxoAnimationState = class extends NestedOption {
  get left() {
    return this._getOption("left");
  }
  set left(value) {
    this._setOption("left", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get scale() {
    return this._getOption("scale");
  }
  set scale(value) {
    this._setOption("scale", value);
  }
  get top() {
    return this._getOption("top");
  }
  set top(value) {
    this._setOption("top", value);
  }
};
DxoAnimationState.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoAnimationState_BaseFactory;
  return function DxoAnimationState_Factory(t) {
    return (ɵDxoAnimationState_BaseFactory || (ɵDxoAnimationState_BaseFactory = ɵɵgetInheritedFactory(DxoAnimationState)))(t || DxoAnimationState);
  };
}();
DxoAnimationState.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoAnimationState, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoAnimationState_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoAnimationState, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoFromComponent = class extends DxoAnimationState {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "from";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFromComponent.ɵfac = function DxoFromComponent_Factory(t) {
  return new (t || DxoFromComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFromComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFromComponent, selectors: [["dxo-from"]], inputs: { left: "left", opacity: "opacity", position: "position", scale: "scale", top: "top" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFromComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFromComponent, [{
    type: Component,
    args: [{
      selector: "dxo-from",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "left",
        "opacity",
        "position",
        "scale",
        "top"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoFromModule = class {
};
DxoFromModule.ɵfac = function DxoFromModule_Factory(t) {
  return new (t || DxoFromModule)();
};
DxoFromModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFromModule });
DxoFromModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFromModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFromComponent
      ],
      exports: [
        DxoFromComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFromModule, { declarations: [DxoFromComponent], exports: [DxoFromComponent] });
})();
var DxoFullstackedareaComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "fullstackedarea";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFullstackedareaComponent.ɵfac = function DxoFullstackedareaComponent_Factory(t) {
  return new (t || DxoFullstackedareaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFullstackedareaComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFullstackedareaComponent, selectors: [["dxo-fullstackedarea"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFullstackedareaComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedareaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-fullstackedarea",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoFullstackedareaModule = class {
};
DxoFullstackedareaModule.ɵfac = function DxoFullstackedareaModule_Factory(t) {
  return new (t || DxoFullstackedareaModule)();
};
DxoFullstackedareaModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFullstackedareaModule });
DxoFullstackedareaModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedareaModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFullstackedareaComponent
      ],
      exports: [
        DxoFullstackedareaComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFullstackedareaModule, { declarations: [DxoFullstackedareaComponent], exports: [DxoFullstackedareaComponent] });
})();
var DxoFullstackedbarComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "fullstackedbar";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFullstackedbarComponent.ɵfac = function DxoFullstackedbarComponent_Factory(t) {
  return new (t || DxoFullstackedbarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFullstackedbarComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFullstackedbarComponent, selectors: [["dxo-fullstackedbar"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFullstackedbarComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedbarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-fullstackedbar",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoFullstackedbarModule = class {
};
DxoFullstackedbarModule.ɵfac = function DxoFullstackedbarModule_Factory(t) {
  return new (t || DxoFullstackedbarModule)();
};
DxoFullstackedbarModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFullstackedbarModule });
DxoFullstackedbarModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedbarModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFullstackedbarComponent
      ],
      exports: [
        DxoFullstackedbarComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFullstackedbarModule, { declarations: [DxoFullstackedbarComponent], exports: [DxoFullstackedbarComponent] });
})();
var DxoFullstackedlineComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "fullstackedline";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFullstackedlineComponent.ɵfac = function DxoFullstackedlineComponent_Factory(t) {
  return new (t || DxoFullstackedlineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFullstackedlineComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFullstackedlineComponent, selectors: [["dxo-fullstackedline"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFullstackedlineComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedlineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-fullstackedline",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoFullstackedlineModule = class {
};
DxoFullstackedlineModule.ɵfac = function DxoFullstackedlineModule_Factory(t) {
  return new (t || DxoFullstackedlineModule)();
};
DxoFullstackedlineModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFullstackedlineModule });
DxoFullstackedlineModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedlineModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFullstackedlineComponent
      ],
      exports: [
        DxoFullstackedlineComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFullstackedlineModule, { declarations: [DxoFullstackedlineComponent], exports: [DxoFullstackedlineComponent] });
})();
var DxoFullstackedsplineComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "fullstackedspline";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFullstackedsplineComponent.ɵfac = function DxoFullstackedsplineComponent_Factory(t) {
  return new (t || DxoFullstackedsplineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFullstackedsplineComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFullstackedsplineComponent, selectors: [["dxo-fullstackedspline"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFullstackedsplineComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedsplineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-fullstackedspline",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoFullstackedsplineModule = class {
};
DxoFullstackedsplineModule.ɵfac = function DxoFullstackedsplineModule_Factory(t) {
  return new (t || DxoFullstackedsplineModule)();
};
DxoFullstackedsplineModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFullstackedsplineModule });
DxoFullstackedsplineModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedsplineModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFullstackedsplineComponent
      ],
      exports: [
        DxoFullstackedsplineComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFullstackedsplineModule, { declarations: [DxoFullstackedsplineComponent], exports: [DxoFullstackedsplineComponent] });
})();
var DxoFullstackedsplineareaComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "fullstackedsplinearea";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoFullstackedsplineareaComponent.ɵfac = function DxoFullstackedsplineareaComponent_Factory(t) {
  return new (t || DxoFullstackedsplineareaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoFullstackedsplineareaComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoFullstackedsplineareaComponent, selectors: [["dxo-fullstackedsplinearea"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoFullstackedsplineareaComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedsplineareaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-fullstackedsplinearea",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoFullstackedsplineareaModule = class {
};
DxoFullstackedsplineareaModule.ɵfac = function DxoFullstackedsplineareaModule_Factory(t) {
  return new (t || DxoFullstackedsplineareaModule)();
};
DxoFullstackedsplineareaModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoFullstackedsplineareaModule });
DxoFullstackedsplineareaModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoFullstackedsplineareaModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoFullstackedsplineareaComponent
      ],
      exports: [
        DxoFullstackedsplineareaComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoFullstackedsplineareaModule, { declarations: [DxoFullstackedsplineareaComponent], exports: [DxoFullstackedsplineareaComponent] });
})();
var DxoGeometryComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get endAngle() {
    return this._getOption("endAngle");
  }
  set endAngle(value) {
    this._setOption("endAngle", value);
  }
  get startAngle() {
    return this._getOption("startAngle");
  }
  set startAngle(value) {
    this._setOption("startAngle", value);
  }
  get orientation() {
    return this._getOption("orientation");
  }
  set orientation(value) {
    this._setOption("orientation", value);
  }
  get _optionPath() {
    return "geometry";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoGeometryComponent.ɵfac = function DxoGeometryComponent_Factory(t) {
  return new (t || DxoGeometryComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoGeometryComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoGeometryComponent, selectors: [["dxo-geometry"]], inputs: { endAngle: "endAngle", startAngle: "startAngle", orientation: "orientation" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoGeometryComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGeometryComponent, [{
    type: Component,
    args: [{
      selector: "dxo-geometry",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { endAngle: [{
    type: Input
  }], startAngle: [{
    type: Input
  }], orientation: [{
    type: Input
  }] });
})();
var DxoGeometryModule = class {
};
DxoGeometryModule.ɵfac = function DxoGeometryModule_Factory(t) {
  return new (t || DxoGeometryModule)();
};
DxoGeometryModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoGeometryModule });
DxoGeometryModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGeometryModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoGeometryComponent
      ],
      exports: [
        DxoGeometryComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoGeometryModule, { declarations: [DxoGeometryComponent], exports: [DxoGeometryComponent] });
})();
var DxoGridSizeComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "valueChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get _optionPath() {
    return "gridSize";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoGridSizeComponent.ɵfac = function DxoGridSizeComponent_Factory(t) {
  return new (t || DxoGridSizeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoGridSizeComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoGridSizeComponent, selectors: [["dxo-grid-size"]], inputs: { items: "items", value: "value" }, outputs: { valueChange: "valueChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoGridSizeComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGridSizeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-grid-size",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { items: [{
    type: Input
  }], value: [{
    type: Input
  }], valueChange: [{
    type: Output
  }] });
})();
var DxoGridSizeModule = class {
};
DxoGridSizeModule.ɵfac = function DxoGridSizeModule_Factory(t) {
  return new (t || DxoGridSizeModule)();
};
DxoGridSizeModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoGridSizeModule });
DxoGridSizeModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGridSizeModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoGridSizeComponent
      ],
      exports: [
        DxoGridSizeComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoGridSizeModule, { declarations: [DxoGridSizeComponent], exports: [DxoGridSizeComponent] });
})();
var DxoGridComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "grid";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoGridComponent.ɵfac = function DxoGridComponent_Factory(t) {
  return new (t || DxoGridComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoGridComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoGridComponent, selectors: [["dxo-grid"]], inputs: { color: "color", opacity: "opacity", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoGridComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGridComponent, [{
    type: Component,
    args: [{
      selector: "dxo-grid",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], opacity: [{
    type: Input
  }], visible: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoGridModule = class {
};
DxoGridModule.ɵfac = function DxoGridModule_Factory(t) {
  return new (t || DxoGridModule)();
};
DxoGridModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoGridModule });
DxoGridModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGridModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoGridComponent
      ],
      exports: [
        DxoGridComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoGridModule, { declarations: [DxoGridComponent], exports: [DxoGridComponent] });
})();
var DxiGroupItemComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get alignByColumn() {
    return this._getOption("alignByColumn");
  }
  set alignByColumn(value) {
    this._setOption("alignByColumn", value);
  }
  get column() {
    return this._getOption("column");
  }
  set column(value) {
    this._setOption("column", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get displayFormat() {
    return this._getOption("displayFormat");
  }
  set displayFormat(value) {
    this._setOption("displayFormat", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get showInColumn() {
    return this._getOption("showInColumn");
  }
  set showInColumn(value) {
    this._setOption("showInColumn", value);
  }
  get showInGroupFooter() {
    return this._getOption("showInGroupFooter");
  }
  set showInGroupFooter(value) {
    this._setOption("showInGroupFooter", value);
  }
  get skipEmptyValues() {
    return this._getOption("skipEmptyValues");
  }
  set skipEmptyValues(value) {
    this._setOption("skipEmptyValues", value);
  }
  get summaryType() {
    return this._getOption("summaryType");
  }
  set summaryType(value) {
    this._setOption("summaryType", value);
  }
  get valueFormat() {
    return this._getOption("valueFormat");
  }
  set valueFormat(value) {
    this._setOption("valueFormat", value);
  }
  get _optionPath() {
    return "groupItems";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiGroupItemComponent.ɵfac = function DxiGroupItemComponent_Factory(t) {
  return new (t || DxiGroupItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiGroupItemComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiGroupItemComponent, selectors: [["dxi-group-item"]], inputs: { alignByColumn: "alignByColumn", column: "column", customizeText: "customizeText", displayFormat: "displayFormat", name: "name", showInColumn: "showInColumn", showInGroupFooter: "showInGroupFooter", skipEmptyValues: "skipEmptyValues", summaryType: "summaryType", valueFormat: "valueFormat" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiGroupItemComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiGroupItemComponent, [{
    type: Component,
    args: [{
      selector: "dxi-group-item",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { alignByColumn: [{
    type: Input
  }], column: [{
    type: Input
  }], customizeText: [{
    type: Input
  }], displayFormat: [{
    type: Input
  }], name: [{
    type: Input
  }], showInColumn: [{
    type: Input
  }], showInGroupFooter: [{
    type: Input
  }], skipEmptyValues: [{
    type: Input
  }], summaryType: [{
    type: Input
  }], valueFormat: [{
    type: Input
  }] });
})();
var DxiGroupItemModule = class {
};
DxiGroupItemModule.ɵfac = function DxiGroupItemModule_Factory(t) {
  return new (t || DxiGroupItemModule)();
};
DxiGroupItemModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiGroupItemModule });
DxiGroupItemModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiGroupItemModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiGroupItemComponent
      ],
      exports: [
        DxiGroupItemComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiGroupItemModule, { declarations: [DxiGroupItemComponent], exports: [DxiGroupItemComponent] });
})();
var DxoGroupOperationDescriptionsComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get and() {
    return this._getOption("and");
  }
  set and(value) {
    this._setOption("and", value);
  }
  get notAnd() {
    return this._getOption("notAnd");
  }
  set notAnd(value) {
    this._setOption("notAnd", value);
  }
  get notOr() {
    return this._getOption("notOr");
  }
  set notOr(value) {
    this._setOption("notOr", value);
  }
  get or() {
    return this._getOption("or");
  }
  set or(value) {
    this._setOption("or", value);
  }
  get _optionPath() {
    return "groupOperationDescriptions";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoGroupOperationDescriptionsComponent.ɵfac = function DxoGroupOperationDescriptionsComponent_Factory(t) {
  return new (t || DxoGroupOperationDescriptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoGroupOperationDescriptionsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoGroupOperationDescriptionsComponent, selectors: [["dxo-group-operation-descriptions"]], inputs: { and: "and", notAnd: "notAnd", notOr: "notOr", or: "or" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoGroupOperationDescriptionsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupOperationDescriptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-group-operation-descriptions",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { and: [{
    type: Input
  }], notAnd: [{
    type: Input
  }], notOr: [{
    type: Input
  }], or: [{
    type: Input
  }] });
})();
var DxoGroupOperationDescriptionsModule = class {
};
DxoGroupOperationDescriptionsModule.ɵfac = function DxoGroupOperationDescriptionsModule_Factory(t) {
  return new (t || DxoGroupOperationDescriptionsModule)();
};
DxoGroupOperationDescriptionsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoGroupOperationDescriptionsModule });
DxoGroupOperationDescriptionsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupOperationDescriptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoGroupOperationDescriptionsComponent
      ],
      exports: [
        DxoGroupOperationDescriptionsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoGroupOperationDescriptionsModule, { declarations: [DxoGroupOperationDescriptionsComponent], exports: [DxoGroupOperationDescriptionsComponent] });
})();
var DxoGroupPanelComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "visibleChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get allowColumnDragging() {
    return this._getOption("allowColumnDragging");
  }
  set allowColumnDragging(value) {
    this._setOption("allowColumnDragging", value);
  }
  get emptyPanelText() {
    return this._getOption("emptyPanelText");
  }
  set emptyPanelText(value) {
    this._setOption("emptyPanelText", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "groupPanel";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoGroupPanelComponent.ɵfac = function DxoGroupPanelComponent_Factory(t) {
  return new (t || DxoGroupPanelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoGroupPanelComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoGroupPanelComponent, selectors: [["dxo-group-panel"]], inputs: { allowColumnDragging: "allowColumnDragging", emptyPanelText: "emptyPanelText", visible: "visible" }, outputs: { visibleChange: "visibleChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoGroupPanelComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupPanelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-group-panel",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { allowColumnDragging: [{
    type: Input
  }], emptyPanelText: [{
    type: Input
  }], visible: [{
    type: Input
  }], visibleChange: [{
    type: Output
  }] });
})();
var DxoGroupPanelModule = class {
};
DxoGroupPanelModule.ɵfac = function DxoGroupPanelModule_Factory(t) {
  return new (t || DxoGroupPanelModule)();
};
DxoGroupPanelModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoGroupPanelModule });
DxoGroupPanelModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupPanelModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoGroupPanelComponent
      ],
      exports: [
        DxoGroupPanelComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoGroupPanelModule, { declarations: [DxoGroupPanelComponent], exports: [DxoGroupPanelComponent] });
})();
var DxoGroupComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get headerHeight() {
    return this._getOption("headerHeight");
  }
  set headerHeight(value) {
    this._setOption("headerHeight", value);
  }
  get hoverEnabled() {
    return this._getOption("hoverEnabled");
  }
  set hoverEnabled(value) {
    this._setOption("hoverEnabled", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get padding() {
    return this._getOption("padding");
  }
  set padding(value) {
    this._setOption("padding", value);
  }
  get selectionStyle() {
    return this._getOption("selectionStyle");
  }
  set selectionStyle(value) {
    this._setOption("selectionStyle", value);
  }
  get _optionPath() {
    return "group";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoGroupComponent.ɵfac = function DxoGroupComponent_Factory(t) {
  return new (t || DxoGroupComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoGroupComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoGroupComponent, selectors: [["dxo-group"]], inputs: { border: "border", color: "color", headerHeight: "headerHeight", hoverEnabled: "hoverEnabled", hoverStyle: "hoverStyle", label: "label", padding: "padding", selectionStyle: "selectionStyle" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoGroupComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupComponent, [{
    type: Component,
    args: [{
      selector: "dxo-group",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { border: [{
    type: Input
  }], color: [{
    type: Input
  }], headerHeight: [{
    type: Input
  }], hoverEnabled: [{
    type: Input
  }], hoverStyle: [{
    type: Input
  }], label: [{
    type: Input
  }], padding: [{
    type: Input
  }], selectionStyle: [{
    type: Input
  }] });
})();
var DxoGroupModule = class {
};
DxoGroupModule.ɵfac = function DxoGroupModule_Factory(t) {
  return new (t || DxoGroupModule)();
};
DxoGroupModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoGroupModule });
DxoGroupModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoGroupComponent
      ],
      exports: [
        DxoGroupComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoGroupModule, { declarations: [DxoGroupComponent], exports: [DxoGroupComponent] });
})();
var DxoGroupingComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get allowCollapsing() {
    return this._getOption("allowCollapsing");
  }
  set allowCollapsing(value) {
    this._setOption("allowCollapsing", value);
  }
  get autoExpandAll() {
    return this._getOption("autoExpandAll");
  }
  set autoExpandAll(value) {
    this._setOption("autoExpandAll", value);
  }
  get contextMenuEnabled() {
    return this._getOption("contextMenuEnabled");
  }
  set contextMenuEnabled(value) {
    this._setOption("contextMenuEnabled", value);
  }
  get expandMode() {
    return this._getOption("expandMode");
  }
  set expandMode(value) {
    this._setOption("expandMode", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get _optionPath() {
    return "grouping";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoGroupingComponent.ɵfac = function DxoGroupingComponent_Factory(t) {
  return new (t || DxoGroupingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoGroupingComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoGroupingComponent, selectors: [["dxo-grouping"]], inputs: { allowCollapsing: "allowCollapsing", autoExpandAll: "autoExpandAll", contextMenuEnabled: "contextMenuEnabled", expandMode: "expandMode", texts: "texts" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoGroupingComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-grouping",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { allowCollapsing: [{
    type: Input
  }], autoExpandAll: [{
    type: Input
  }], contextMenuEnabled: [{
    type: Input
  }], expandMode: [{
    type: Input
  }], texts: [{
    type: Input
  }] });
})();
var DxoGroupingModule = class {
};
DxoGroupingModule.ɵfac = function DxoGroupingModule_Factory(t) {
  return new (t || DxoGroupingModule)();
};
DxoGroupingModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoGroupingModule });
DxoGroupingModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGroupingModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoGroupingComponent
      ],
      exports: [
        DxoGroupingComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoGroupingModule, { declarations: [DxoGroupingComponent], exports: [DxoGroupingComponent] });
})();
var DxoHatchingComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get direction() {
    return this._getOption("direction");
  }
  set direction(value) {
    this._setOption("direction", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get step() {
    return this._getOption("step");
  }
  set step(value) {
    this._setOption("step", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "hatching";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoHatchingComponent.ɵfac = function DxoHatchingComponent_Factory(t) {
  return new (t || DxoHatchingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoHatchingComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoHatchingComponent, selectors: [["dxo-hatching"]], inputs: { direction: "direction", opacity: "opacity", step: "step", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoHatchingComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHatchingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-hatching",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { direction: [{
    type: Input
  }], opacity: [{
    type: Input
  }], step: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoHatchingModule = class {
};
DxoHatchingModule.ɵfac = function DxoHatchingModule_Factory(t) {
  return new (t || DxoHatchingModule)();
};
DxoHatchingModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoHatchingModule });
DxoHatchingModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHatchingModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoHatchingComponent
      ],
      exports: [
        DxoHatchingComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoHatchingModule, { declarations: [DxoHatchingComponent], exports: [DxoHatchingComponent] });
})();
var DxoGanttHeaderFilter = class extends NestedOption {
  get allowSearch() {
    return this._getOption("allowSearch");
  }
  set allowSearch(value) {
    this._setOption("allowSearch", value);
  }
  get allowSelectAll() {
    return this._getOption("allowSelectAll");
  }
  set allowSelectAll(value) {
    this._setOption("allowSelectAll", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get groupInterval() {
    return this._getOption("groupInterval");
  }
  set groupInterval(value) {
    this._setOption("groupInterval", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get search() {
    return this._getOption("search");
  }
  set search(value) {
    this._setOption("search", value);
  }
  get searchMode() {
    return this._getOption("searchMode");
  }
  set searchMode(value) {
    this._setOption("searchMode", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get searchTimeout() {
    return this._getOption("searchTimeout");
  }
  set searchTimeout(value) {
    this._setOption("searchTimeout", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get showRelevantValues() {
    return this._getOption("showRelevantValues");
  }
  set showRelevantValues(value) {
    this._setOption("showRelevantValues", value);
  }
};
DxoGanttHeaderFilter.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoGanttHeaderFilter_BaseFactory;
  return function DxoGanttHeaderFilter_Factory(t) {
    return (ɵDxoGanttHeaderFilter_BaseFactory || (ɵDxoGanttHeaderFilter_BaseFactory = ɵɵgetInheritedFactory(DxoGanttHeaderFilter)))(t || DxoGanttHeaderFilter);
  };
}();
DxoGanttHeaderFilter.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoGanttHeaderFilter, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoGanttHeaderFilter_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGanttHeaderFilter, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoHeaderFilterComponent = class extends DxoGanttHeaderFilter {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "headerFilter";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoHeaderFilterComponent.ɵfac = function DxoHeaderFilterComponent_Factory(t) {
  return new (t || DxoHeaderFilterComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoHeaderFilterComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoHeaderFilterComponent, selectors: [["dxo-header-filter"]], inputs: { allowSearch: "allowSearch", allowSelectAll: "allowSelectAll", dataSource: "dataSource", groupInterval: "groupInterval", height: "height", search: "search", searchMode: "searchMode", width: "width", searchTimeout: "searchTimeout", texts: "texts", visible: "visible", showRelevantValues: "showRelevantValues" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoHeaderFilterComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHeaderFilterComponent, [{
    type: Component,
    args: [{
      selector: "dxo-header-filter",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "allowSearch",
        "allowSelectAll",
        "dataSource",
        "groupInterval",
        "height",
        "search",
        "searchMode",
        "width",
        "searchTimeout",
        "texts",
        "visible",
        "showRelevantValues"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoHeaderFilterModule = class {
};
DxoHeaderFilterModule.ɵfac = function DxoHeaderFilterModule_Factory(t) {
  return new (t || DxoHeaderFilterModule)();
};
DxoHeaderFilterModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoHeaderFilterModule });
DxoHeaderFilterModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHeaderFilterModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoHeaderFilterComponent
      ],
      exports: [
        DxoHeaderFilterComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoHeaderFilterModule, { declarations: [DxoHeaderFilterComponent], exports: [DxoHeaderFilterComponent] });
})();
var DxoHeightComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get rangeMaxPoint() {
    return this._getOption("rangeMaxPoint");
  }
  set rangeMaxPoint(value) {
    this._setOption("rangeMaxPoint", value);
  }
  get rangeMinPoint() {
    return this._getOption("rangeMinPoint");
  }
  set rangeMinPoint(value) {
    this._setOption("rangeMinPoint", value);
  }
  get _optionPath() {
    return "height";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoHeightComponent.ɵfac = function DxoHeightComponent_Factory(t) {
  return new (t || DxoHeightComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoHeightComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoHeightComponent, selectors: [["dxo-height"]], inputs: { rangeMaxPoint: "rangeMaxPoint", rangeMinPoint: "rangeMinPoint" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoHeightComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHeightComponent, [{
    type: Component,
    args: [{
      selector: "dxo-height",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { rangeMaxPoint: [{
    type: Input
  }], rangeMinPoint: [{
    type: Input
  }] });
})();
var DxoHeightModule = class {
};
DxoHeightModule.ɵfac = function DxoHeightModule_Factory(t) {
  return new (t || DxoHeightModule)();
};
DxoHeightModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoHeightModule });
DxoHeightModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHeightModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoHeightComponent
      ],
      exports: [
        DxoHeightComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoHeightModule, { declarations: [DxoHeightComponent], exports: [DxoHeightComponent] });
})();
var DxoHideEventComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get delay() {
    return this._getOption("delay");
  }
  set delay(value) {
    this._setOption("delay", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get _optionPath() {
    return "hideEvent";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoHideEventComponent.ɵfac = function DxoHideEventComponent_Factory(t) {
  return new (t || DxoHideEventComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoHideEventComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoHideEventComponent, selectors: [["dxo-hide-event"]], inputs: { delay: "delay", name: "name" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoHideEventComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHideEventComponent, [{
    type: Component,
    args: [{
      selector: "dxo-hide-event",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { delay: [{
    type: Input
  }], name: [{
    type: Input
  }] });
})();
var DxoHideEventModule = class {
};
DxoHideEventModule.ɵfac = function DxoHideEventModule_Factory(t) {
  return new (t || DxoHideEventModule)();
};
DxoHideEventModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoHideEventModule });
DxoHideEventModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHideEventModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoHideEventComponent
      ],
      exports: [
        DxoHideEventComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoHideEventModule, { declarations: [DxoHideEventComponent], exports: [DxoHideEventComponent] });
})();
var DxoHideComponent = class extends DxoAnimationConfig {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "hide";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoHideComponent.ɵfac = function DxoHideComponent_Factory(t) {
  return new (t || DxoHideComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoHideComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoHideComponent, selectors: [["dxo-hide"]], inputs: { complete: "complete", delay: "delay", direction: "direction", duration: "duration", easing: "easing", from: "from", staggerDelay: "staggerDelay", start: "start", to: "to", type: "type" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoHideComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHideComponent, [{
    type: Component,
    args: [{
      selector: "dxo-hide",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "complete",
        "delay",
        "direction",
        "duration",
        "easing",
        "from",
        "staggerDelay",
        "start",
        "to",
        "type"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoHideModule = class {
};
DxoHideModule.ɵfac = function DxoHideModule_Factory(t) {
  return new (t || DxoHideModule)();
};
DxoHideModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoHideModule });
DxoHideModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHideModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoHideComponent
      ],
      exports: [
        DxoHideComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoHideModule, { declarations: [DxoHideComponent], exports: [DxoHideComponent] });
})();
var DxoHistoryToolbarComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get commands() {
    return this._getOption("commands");
  }
  set commands(value) {
    this._setOption("commands", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "historyToolbar";
  }
  get commandsChildren() {
    return this._getOption("commands");
  }
  set commandsChildren(value) {
    this.setChildren("commands", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoHistoryToolbarComponent.ɵfac = function DxoHistoryToolbarComponent_Factory(t) {
  return new (t || DxoHistoryToolbarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoHistoryToolbarComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoHistoryToolbarComponent, selectors: [["dxo-history-toolbar"]], contentQueries: function DxoHistoryToolbarComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiCommandComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.commandsChildren = _t);
  }
}, inputs: { commands: "commands", visible: "visible" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoHistoryToolbarComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHistoryToolbarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-history-toolbar",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { commands: [{
    type: Input
  }], visible: [{
    type: Input
  }], commandsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiCommandComponent)]
  }] });
})();
var DxoHistoryToolbarModule = class {
};
DxoHistoryToolbarModule.ɵfac = function DxoHistoryToolbarModule_Factory(t) {
  return new (t || DxoHistoryToolbarModule)();
};
DxoHistoryToolbarModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoHistoryToolbarModule });
DxoHistoryToolbarModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHistoryToolbarModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoHistoryToolbarComponent
      ],
      exports: [
        DxoHistoryToolbarComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoHistoryToolbarModule, { declarations: [DxoHistoryToolbarComponent], exports: [DxoHistoryToolbarComponent] });
})();
var DxoHorizontalLineComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "horizontalLine";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoHorizontalLineComponent.ɵfac = function DxoHorizontalLineComponent_Factory(t) {
  return new (t || DxoHorizontalLineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoHorizontalLineComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoHorizontalLineComponent, selectors: [["dxo-horizontal-line"]], inputs: { color: "color", dashStyle: "dashStyle", label: "label", opacity: "opacity", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoHorizontalLineComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHorizontalLineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-horizontal-line",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], dashStyle: [{
    type: Input
  }], label: [{
    type: Input
  }], opacity: [{
    type: Input
  }], visible: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoHorizontalLineModule = class {
};
DxoHorizontalLineModule.ɵfac = function DxoHorizontalLineModule_Factory(t) {
  return new (t || DxoHorizontalLineModule)();
};
DxoHorizontalLineModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoHorizontalLineModule });
DxoHorizontalLineModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHorizontalLineModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoHorizontalLineComponent
      ],
      exports: [
        DxoHorizontalLineComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoHorizontalLineModule, { declarations: [DxoHorizontalLineComponent], exports: [DxoHorizontalLineComponent] });
})();
var DxoHoverStyleComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get hatching() {
    return this._getOption("hatching");
  }
  set hatching(value) {
    this._setOption("hatching", value);
  }
  get highlight() {
    return this._getOption("highlight");
  }
  set highlight(value) {
    this._setOption("highlight", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get size() {
    return this._getOption("size");
  }
  set size(value) {
    this._setOption("size", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get _optionPath() {
    return "hoverStyle";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoHoverStyleComponent.ɵfac = function DxoHoverStyleComponent_Factory(t) {
  return new (t || DxoHoverStyleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoHoverStyleComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoHoverStyleComponent, selectors: [["dxo-hover-style"]], inputs: { border: "border", color: "color", dashStyle: "dashStyle", hatching: "hatching", highlight: "highlight", width: "width", size: "size", opacity: "opacity" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoHoverStyleComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHoverStyleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-hover-style",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { border: [{
    type: Input
  }], color: [{
    type: Input
  }], dashStyle: [{
    type: Input
  }], hatching: [{
    type: Input
  }], highlight: [{
    type: Input
  }], width: [{
    type: Input
  }], size: [{
    type: Input
  }], opacity: [{
    type: Input
  }] });
})();
var DxoHoverStyleModule = class {
};
DxoHoverStyleModule.ɵfac = function DxoHoverStyleModule_Factory(t) {
  return new (t || DxoHoverStyleModule)();
};
DxoHoverStyleModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoHoverStyleModule });
DxoHoverStyleModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHoverStyleModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoHoverStyleComponent
      ],
      exports: [
        DxoHoverStyleComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoHoverStyleModule, { declarations: [DxoHoverStyleComponent], exports: [DxoHoverStyleComponent] });
})();
var DxoHtmlEditorImageUpload = class extends NestedOption {
  get fileUploaderOptions() {
    return this._getOption("fileUploaderOptions");
  }
  set fileUploaderOptions(value) {
    this._setOption("fileUploaderOptions", value);
  }
  get fileUploadMode() {
    return this._getOption("fileUploadMode");
  }
  set fileUploadMode(value) {
    this._setOption("fileUploadMode", value);
  }
  get tabs() {
    return this._getOption("tabs");
  }
  set tabs(value) {
    this._setOption("tabs", value);
  }
  get uploadDirectory() {
    return this._getOption("uploadDirectory");
  }
  set uploadDirectory(value) {
    this._setOption("uploadDirectory", value);
  }
  get uploadUrl() {
    return this._getOption("uploadUrl");
  }
  set uploadUrl(value) {
    this._setOption("uploadUrl", value);
  }
};
DxoHtmlEditorImageUpload.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoHtmlEditorImageUpload_BaseFactory;
  return function DxoHtmlEditorImageUpload_Factory(t) {
    return (ɵDxoHtmlEditorImageUpload_BaseFactory || (ɵDxoHtmlEditorImageUpload_BaseFactory = ɵɵgetInheritedFactory(DxoHtmlEditorImageUpload)))(t || DxoHtmlEditorImageUpload);
  };
}();
DxoHtmlEditorImageUpload.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoHtmlEditorImageUpload, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoHtmlEditorImageUpload_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHtmlEditorImageUpload, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoImageUploadComponent = class extends DxoHtmlEditorImageUpload {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "imageUpload";
  }
  get tabsChildren() {
    return this._getOption("tabs");
  }
  set tabsChildren(value) {
    this.setChildren("tabs", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoImageUploadComponent.ɵfac = function DxoImageUploadComponent_Factory(t) {
  return new (t || DxoImageUploadComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoImageUploadComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoImageUploadComponent, selectors: [["dxo-image-upload"]], contentQueries: function DxoImageUploadComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiTabComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.tabsChildren = _t);
  }
}, inputs: { fileUploaderOptions: "fileUploaderOptions", fileUploadMode: "fileUploadMode", tabs: "tabs", uploadDirectory: "uploadDirectory", uploadUrl: "uploadUrl" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoImageUploadComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoImageUploadComponent, [{
    type: Component,
    args: [{
      selector: "dxo-image-upload",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "fileUploaderOptions",
        "fileUploadMode",
        "tabs",
        "uploadDirectory",
        "uploadUrl"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { tabsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiTabComponent)]
  }] });
})();
var DxoImageUploadModule = class {
};
DxoImageUploadModule.ɵfac = function DxoImageUploadModule_Factory(t) {
  return new (t || DxoImageUploadModule)();
};
DxoImageUploadModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoImageUploadModule });
DxoImageUploadModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoImageUploadModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoImageUploadComponent
      ],
      exports: [
        DxoImageUploadComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoImageUploadModule, { declarations: [DxoImageUploadComponent], exports: [DxoImageUploadComponent] });
})();
var DxoImageComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get url() {
    return this._getOption("url");
  }
  set url(value) {
    this._setOption("url", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get _optionPath() {
    return "image";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoImageComponent.ɵfac = function DxoImageComponent_Factory(t) {
  return new (t || DxoImageComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoImageComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoImageComponent, selectors: [["dxo-image"]], inputs: { height: "height", url: "url", width: "width", location: "location" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoImageComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoImageComponent, [{
    type: Component,
    args: [{
      selector: "dxo-image",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { height: [{
    type: Input
  }], url: [{
    type: Input
  }], width: [{
    type: Input
  }], location: [{
    type: Input
  }] });
})();
var DxoImageModule = class {
};
DxoImageModule.ɵfac = function DxoImageModule_Factory(t) {
  return new (t || DxoImageModule)();
};
DxoImageModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoImageModule });
DxoImageModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoImageModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoImageComponent
      ],
      exports: [
        DxoImageComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoImageModule, { declarations: [DxoImageComponent], exports: [DxoImageComponent] });
})();
var DxoIndentComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get left() {
    return this._getOption("left");
  }
  set left(value) {
    this._setOption("left", value);
  }
  get right() {
    return this._getOption("right");
  }
  set right(value) {
    this._setOption("right", value);
  }
  get _optionPath() {
    return "indent";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoIndentComponent.ɵfac = function DxoIndentComponent_Factory(t) {
  return new (t || DxoIndentComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoIndentComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoIndentComponent, selectors: [["dxo-indent"]], inputs: { left: "left", right: "right" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoIndentComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoIndentComponent, [{
    type: Component,
    args: [{
      selector: "dxo-indent",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { left: [{
    type: Input
  }], right: [{
    type: Input
  }] });
})();
var DxoIndentModule = class {
};
DxoIndentModule.ɵfac = function DxoIndentModule_Factory(t) {
  return new (t || DxoIndentModule)();
};
DxoIndentModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoIndentModule });
DxoIndentModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoIndentModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoIndentComponent
      ],
      exports: [
        DxoIndentComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoIndentModule, { declarations: [DxoIndentComponent], exports: [DxoIndentComponent] });
})();
var DxoSortableOptions = class extends NestedOption {
  get allowDropInsideItem() {
    return this._getOption("allowDropInsideItem");
  }
  set allowDropInsideItem(value) {
    this._setOption("allowDropInsideItem", value);
  }
  get allowReordering() {
    return this._getOption("allowReordering");
  }
  set allowReordering(value) {
    this._setOption("allowReordering", value);
  }
  get autoScroll() {
    return this._getOption("autoScroll");
  }
  set autoScroll(value) {
    this._setOption("autoScroll", value);
  }
  get boundary() {
    return this._getOption("boundary");
  }
  set boundary(value) {
    this._setOption("boundary", value);
  }
  get container() {
    return this._getOption("container");
  }
  set container(value) {
    this._setOption("container", value);
  }
  get cursorOffset() {
    return this._getOption("cursorOffset");
  }
  set cursorOffset(value) {
    this._setOption("cursorOffset", value);
  }
  get data() {
    return this._getOption("data");
  }
  set data(value) {
    this._setOption("data", value);
  }
  get dragDirection() {
    return this._getOption("dragDirection");
  }
  set dragDirection(value) {
    this._setOption("dragDirection", value);
  }
  get dragTemplate() {
    return this._getOption("dragTemplate");
  }
  set dragTemplate(value) {
    this._setOption("dragTemplate", value);
  }
  get dropFeedbackMode() {
    return this._getOption("dropFeedbackMode");
  }
  set dropFeedbackMode(value) {
    this._setOption("dropFeedbackMode", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get filter() {
    return this._getOption("filter");
  }
  set filter(value) {
    this._setOption("filter", value);
  }
  get group() {
    return this._getOption("group");
  }
  set group(value) {
    this._setOption("group", value);
  }
  get handle() {
    return this._getOption("handle");
  }
  set handle(value) {
    this._setOption("handle", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get itemOrientation() {
    return this._getOption("itemOrientation");
  }
  set itemOrientation(value) {
    this._setOption("itemOrientation", value);
  }
  get moveItemOnDrop() {
    return this._getOption("moveItemOnDrop");
  }
  set moveItemOnDrop(value) {
    this._setOption("moveItemOnDrop", value);
  }
  get onAdd() {
    return this._getOption("onAdd");
  }
  set onAdd(value) {
    this._setOption("onAdd", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onDragChange() {
    return this._getOption("onDragChange");
  }
  set onDragChange(value) {
    this._setOption("onDragChange", value);
  }
  get onDragEnd() {
    return this._getOption("onDragEnd");
  }
  set onDragEnd(value) {
    this._setOption("onDragEnd", value);
  }
  get onDragMove() {
    return this._getOption("onDragMove");
  }
  set onDragMove(value) {
    this._setOption("onDragMove", value);
  }
  get onDragStart() {
    return this._getOption("onDragStart");
  }
  set onDragStart(value) {
    this._setOption("onDragStart", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get onRemove() {
    return this._getOption("onRemove");
  }
  set onRemove(value) {
    this._setOption("onRemove", value);
  }
  get onReorder() {
    return this._getOption("onReorder");
  }
  set onReorder(value) {
    this._setOption("onReorder", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get scrollSensitivity() {
    return this._getOption("scrollSensitivity");
  }
  set scrollSensitivity(value) {
    this._setOption("scrollSensitivity", value);
  }
  get scrollSpeed() {
    return this._getOption("scrollSpeed");
  }
  set scrollSpeed(value) {
    this._setOption("scrollSpeed", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
};
DxoSortableOptions.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoSortableOptions_BaseFactory;
  return function DxoSortableOptions_Factory(t) {
    return (ɵDxoSortableOptions_BaseFactory || (ɵDxoSortableOptions_BaseFactory = ɵɵgetInheritedFactory(DxoSortableOptions)))(t || DxoSortableOptions);
  };
}();
DxoSortableOptions.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSortableOptions, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSortableOptions_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSortableOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoItemDraggingComponent = class extends DxoSortableOptions {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "itemDragging";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoItemDraggingComponent.ɵfac = function DxoItemDraggingComponent_Factory(t) {
  return new (t || DxoItemDraggingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoItemDraggingComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoItemDraggingComponent, selectors: [["dxo-item-dragging"]], inputs: { allowDropInsideItem: "allowDropInsideItem", allowReordering: "allowReordering", autoScroll: "autoScroll", boundary: "boundary", container: "container", cursorOffset: "cursorOffset", data: "data", dragDirection: "dragDirection", dragTemplate: "dragTemplate", dropFeedbackMode: "dropFeedbackMode", elementAttr: "elementAttr", filter: "filter", group: "group", handle: "handle", height: "height", itemOrientation: "itemOrientation", moveItemOnDrop: "moveItemOnDrop", onAdd: "onAdd", onDisposing: "onDisposing", onDragChange: "onDragChange", onDragEnd: "onDragEnd", onDragMove: "onDragMove", onDragStart: "onDragStart", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onRemove: "onRemove", onReorder: "onReorder", rtlEnabled: "rtlEnabled", scrollSensitivity: "scrollSensitivity", scrollSpeed: "scrollSpeed", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoItemDraggingComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemDraggingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-item-dragging",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "allowDropInsideItem",
        "allowReordering",
        "autoScroll",
        "boundary",
        "container",
        "cursorOffset",
        "data",
        "dragDirection",
        "dragTemplate",
        "dropFeedbackMode",
        "elementAttr",
        "filter",
        "group",
        "handle",
        "height",
        "itemOrientation",
        "moveItemOnDrop",
        "onAdd",
        "onDisposing",
        "onDragChange",
        "onDragEnd",
        "onDragMove",
        "onDragStart",
        "onInitialized",
        "onOptionChanged",
        "onRemove",
        "onReorder",
        "rtlEnabled",
        "scrollSensitivity",
        "scrollSpeed",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoItemDraggingModule = class {
};
DxoItemDraggingModule.ɵfac = function DxoItemDraggingModule_Factory(t) {
  return new (t || DxoItemDraggingModule)();
};
DxoItemDraggingModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoItemDraggingModule });
DxoItemDraggingModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemDraggingModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoItemDraggingComponent
      ],
      exports: [
        DxoItemDraggingComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoItemDraggingModule, { declarations: [DxoItemDraggingComponent], exports: [DxoItemDraggingComponent] });
})();
var DxoItemTextFormatComponent = class extends DxoFormat {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "itemTextFormat";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoItemTextFormatComponent.ɵfac = function DxoItemTextFormatComponent_Factory(t) {
  return new (t || DxoItemTextFormatComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoItemTextFormatComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoItemTextFormatComponent, selectors: [["dxo-item-text-format"]], inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type", useCurrencyAccountingStyle: "useCurrencyAccountingStyle" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoItemTextFormatComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemTextFormatComponent, [{
    type: Component,
    args: [{
      selector: "dxo-item-text-format",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "currency",
        "formatter",
        "parser",
        "precision",
        "type",
        "useCurrencyAccountingStyle"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoItemTextFormatModule = class {
};
DxoItemTextFormatModule.ɵfac = function DxoItemTextFormatModule_Factory(t) {
  return new (t || DxoItemTextFormatModule)();
};
DxoItemTextFormatModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoItemTextFormatModule });
DxoItemTextFormatModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemTextFormatModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoItemTextFormatComponent
      ],
      exports: [
        DxoItemTextFormatComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoItemTextFormatModule, { declarations: [DxoItemTextFormatComponent], exports: [DxoItemTextFormatComponent] });
})();
var DxoItemViewComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get details() {
    return this._getOption("details");
  }
  set details(value) {
    this._setOption("details", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get showFolders() {
    return this._getOption("showFolders");
  }
  set showFolders(value) {
    this._setOption("showFolders", value);
  }
  get showParentFolder() {
    return this._getOption("showParentFolder");
  }
  set showParentFolder(value) {
    this._setOption("showParentFolder", value);
  }
  get _optionPath() {
    return "itemView";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoItemViewComponent.ɵfac = function DxoItemViewComponent_Factory(t) {
  return new (t || DxoItemViewComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoItemViewComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoItemViewComponent, selectors: [["dxo-item-view"]], inputs: { details: "details", mode: "mode", showFolders: "showFolders", showParentFolder: "showParentFolder" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoItemViewComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemViewComponent, [{
    type: Component,
    args: [{
      selector: "dxo-item-view",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { details: [{
    type: Input
  }], mode: [{
    type: Input
  }], showFolders: [{
    type: Input
  }], showParentFolder: [{
    type: Input
  }] });
})();
var DxoItemViewModule = class {
};
DxoItemViewModule.ɵfac = function DxoItemViewModule_Factory(t) {
  return new (t || DxoItemViewModule)();
};
DxoItemViewModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoItemViewModule });
DxoItemViewModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemViewModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoItemViewComponent
      ],
      exports: [
        DxoItemViewComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoItemViewModule, { declarations: [DxoItemViewComponent], exports: [DxoItemViewComponent] });
})();
var DxoItemComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get selectionStyle() {
    return this._getOption("selectionStyle");
  }
  set selectionStyle(value) {
    this._setOption("selectionStyle", value);
  }
  get _optionPath() {
    return "item";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoItemComponent.ɵfac = function DxoItemComponent_Factory(t) {
  return new (t || DxoItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoItemComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoItemComponent, selectors: [["dxo-item"]], inputs: { border: "border", hoverStyle: "hoverStyle", selectionStyle: "selectionStyle" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoItemComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemComponent, [{
    type: Component,
    args: [{
      selector: "dxo-item",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { border: [{
    type: Input
  }], hoverStyle: [{
    type: Input
  }], selectionStyle: [{
    type: Input
  }] });
})();
var DxoItemModule = class {
};
DxoItemModule.ɵfac = function DxoItemModule_Factory(t) {
  return new (t || DxoItemModule)();
};
DxoItemModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoItemModule });
DxoItemModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoItemModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoItemComponent
      ],
      exports: [
        DxoItemComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoItemModule, { declarations: [DxoItemComponent], exports: [DxoItemComponent] });
})();
var DxoKeyboardNavigationComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get editOnKeyPress() {
    return this._getOption("editOnKeyPress");
  }
  set editOnKeyPress(value) {
    this._setOption("editOnKeyPress", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get enterKeyAction() {
    return this._getOption("enterKeyAction");
  }
  set enterKeyAction(value) {
    this._setOption("enterKeyAction", value);
  }
  get enterKeyDirection() {
    return this._getOption("enterKeyDirection");
  }
  set enterKeyDirection(value) {
    this._setOption("enterKeyDirection", value);
  }
  get _optionPath() {
    return "keyboardNavigation";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoKeyboardNavigationComponent.ɵfac = function DxoKeyboardNavigationComponent_Factory(t) {
  return new (t || DxoKeyboardNavigationComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoKeyboardNavigationComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoKeyboardNavigationComponent, selectors: [["dxo-keyboard-navigation"]], inputs: { editOnKeyPress: "editOnKeyPress", enabled: "enabled", enterKeyAction: "enterKeyAction", enterKeyDirection: "enterKeyDirection" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoKeyboardNavigationComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoKeyboardNavigationComponent, [{
    type: Component,
    args: [{
      selector: "dxo-keyboard-navigation",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { editOnKeyPress: [{
    type: Input
  }], enabled: [{
    type: Input
  }], enterKeyAction: [{
    type: Input
  }], enterKeyDirection: [{
    type: Input
  }] });
})();
var DxoKeyboardNavigationModule = class {
};
DxoKeyboardNavigationModule.ɵfac = function DxoKeyboardNavigationModule_Factory(t) {
  return new (t || DxoKeyboardNavigationModule)();
};
DxoKeyboardNavigationModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoKeyboardNavigationModule });
DxoKeyboardNavigationModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoKeyboardNavigationModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoKeyboardNavigationComponent
      ],
      exports: [
        DxoKeyboardNavigationComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoKeyboardNavigationModule, { declarations: [DxoKeyboardNavigationComponent], exports: [DxoKeyboardNavigationComponent] });
})();
var DxoLabelComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get connectorColor() {
    return this._getOption("connectorColor");
  }
  set connectorColor(value) {
    this._setOption("connectorColor", value);
  }
  get connectorWidth() {
    return this._getOption("connectorWidth");
  }
  set connectorWidth(value) {
    this._setOption("connectorWidth", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get format() {
    return this._getOption("format");
  }
  set format(value) {
    this._setOption("format", value);
  }
  get indent() {
    return this._getOption("indent");
  }
  set indent(value) {
    this._setOption("indent", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get horizontalAlignment() {
    return this._getOption("horizontalAlignment");
  }
  set horizontalAlignment(value) {
    this._setOption("horizontalAlignment", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get verticalAlignment() {
    return this._getOption("verticalAlignment");
  }
  set verticalAlignment(value) {
    this._setOption("verticalAlignment", value);
  }
  get alignment() {
    return this._getOption("alignment");
  }
  set alignment(value) {
    this._setOption("alignment", value);
  }
  get customizeHint() {
    return this._getOption("customizeHint");
  }
  set customizeHint(value) {
    this._setOption("customizeHint", value);
  }
  get displayMode() {
    return this._getOption("displayMode");
  }
  set displayMode(value) {
    this._setOption("displayMode", value);
  }
  get indentFromAxis() {
    return this._getOption("indentFromAxis");
  }
  set indentFromAxis(value) {
    this._setOption("indentFromAxis", value);
  }
  get overlappingBehavior() {
    return this._getOption("overlappingBehavior");
  }
  set overlappingBehavior(value) {
    this._setOption("overlappingBehavior", value);
  }
  get rotationAngle() {
    return this._getOption("rotationAngle");
  }
  set rotationAngle(value) {
    this._setOption("rotationAngle", value);
  }
  get staggeringSpacing() {
    return this._getOption("staggeringSpacing");
  }
  set staggeringSpacing(value) {
    this._setOption("staggeringSpacing", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get textOverflow() {
    return this._getOption("textOverflow");
  }
  set textOverflow(value) {
    this._setOption("textOverflow", value);
  }
  get wordWrap() {
    return this._getOption("wordWrap");
  }
  set wordWrap(value) {
    this._setOption("wordWrap", value);
  }
  get argumentFormat() {
    return this._getOption("argumentFormat");
  }
  set argumentFormat(value) {
    this._setOption("argumentFormat", value);
  }
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get connector() {
    return this._getOption("connector");
  }
  set connector(value) {
    this._setOption("connector", value);
  }
  get displayFormat() {
    return this._getOption("displayFormat");
  }
  set displayFormat(value) {
    this._setOption("displayFormat", value);
  }
  get horizontalOffset() {
    return this._getOption("horizontalOffset");
  }
  set horizontalOffset(value) {
    this._setOption("horizontalOffset", value);
  }
  get showForZeroValues() {
    return this._getOption("showForZeroValues");
  }
  set showForZeroValues(value) {
    this._setOption("showForZeroValues", value);
  }
  get verticalOffset() {
    return this._getOption("verticalOffset");
  }
  set verticalOffset(value) {
    this._setOption("verticalOffset", value);
  }
  get hideFirstOrLast() {
    return this._getOption("hideFirstOrLast");
  }
  set hideFirstOrLast(value) {
    this._setOption("hideFirstOrLast", value);
  }
  get indentFromTick() {
    return this._getOption("indentFromTick");
  }
  set indentFromTick(value) {
    this._setOption("indentFromTick", value);
  }
  get useRangeColors() {
    return this._getOption("useRangeColors");
  }
  set useRangeColors(value) {
    this._setOption("useRangeColors", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get showColon() {
    return this._getOption("showColon");
  }
  set showColon(value) {
    this._setOption("showColon", value);
  }
  get radialOffset() {
    return this._getOption("radialOffset");
  }
  set radialOffset(value) {
    this._setOption("radialOffset", value);
  }
  get topIndent() {
    return this._getOption("topIndent");
  }
  set topIndent(value) {
    this._setOption("topIndent", value);
  }
  get shadow() {
    return this._getOption("shadow");
  }
  set shadow(value) {
    this._setOption("shadow", value);
  }
  get useNodeColors() {
    return this._getOption("useNodeColors");
  }
  set useNodeColors(value) {
    this._setOption("useNodeColors", value);
  }
  get dataField() {
    return this._getOption("dataField");
  }
  set dataField(value) {
    this._setOption("dataField", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get _optionPath() {
    return "label";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoLabelComponent.ɵfac = function DxoLabelComponent_Factory(t) {
  return new (t || DxoLabelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoLabelComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoLabelComponent, selectors: [["dxo-label"]], inputs: { connectorColor: "connectorColor", connectorWidth: "connectorWidth", customizeText: "customizeText", font: "font", format: "format", indent: "indent", visible: "visible", horizontalAlignment: "horizontalAlignment", position: "position", text: "text", verticalAlignment: "verticalAlignment", alignment: "alignment", customizeHint: "customizeHint", displayMode: "displayMode", indentFromAxis: "indentFromAxis", overlappingBehavior: "overlappingBehavior", rotationAngle: "rotationAngle", staggeringSpacing: "staggeringSpacing", template: "template", textOverflow: "textOverflow", wordWrap: "wordWrap", argumentFormat: "argumentFormat", backgroundColor: "backgroundColor", border: "border", connector: "connector", displayFormat: "displayFormat", horizontalOffset: "horizontalOffset", showForZeroValues: "showForZeroValues", verticalOffset: "verticalOffset", hideFirstOrLast: "hideFirstOrLast", indentFromTick: "indentFromTick", useRangeColors: "useRangeColors", location: "location", showColon: "showColon", radialOffset: "radialOffset", topIndent: "topIndent", shadow: "shadow", useNodeColors: "useNodeColors", dataField: "dataField", enabled: "enabled" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoLabelComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLabelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-label",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { connectorColor: [{
    type: Input
  }], connectorWidth: [{
    type: Input
  }], customizeText: [{
    type: Input
  }], font: [{
    type: Input
  }], format: [{
    type: Input
  }], indent: [{
    type: Input
  }], visible: [{
    type: Input
  }], horizontalAlignment: [{
    type: Input
  }], position: [{
    type: Input
  }], text: [{
    type: Input
  }], verticalAlignment: [{
    type: Input
  }], alignment: [{
    type: Input
  }], customizeHint: [{
    type: Input
  }], displayMode: [{
    type: Input
  }], indentFromAxis: [{
    type: Input
  }], overlappingBehavior: [{
    type: Input
  }], rotationAngle: [{
    type: Input
  }], staggeringSpacing: [{
    type: Input
  }], template: [{
    type: Input
  }], textOverflow: [{
    type: Input
  }], wordWrap: [{
    type: Input
  }], argumentFormat: [{
    type: Input
  }], backgroundColor: [{
    type: Input
  }], border: [{
    type: Input
  }], connector: [{
    type: Input
  }], displayFormat: [{
    type: Input
  }], horizontalOffset: [{
    type: Input
  }], showForZeroValues: [{
    type: Input
  }], verticalOffset: [{
    type: Input
  }], hideFirstOrLast: [{
    type: Input
  }], indentFromTick: [{
    type: Input
  }], useRangeColors: [{
    type: Input
  }], location: [{
    type: Input
  }], showColon: [{
    type: Input
  }], radialOffset: [{
    type: Input
  }], topIndent: [{
    type: Input
  }], shadow: [{
    type: Input
  }], useNodeColors: [{
    type: Input
  }], dataField: [{
    type: Input
  }], enabled: [{
    type: Input
  }] });
})();
var DxoLabelModule = class {
};
DxoLabelModule.ɵfac = function DxoLabelModule_Factory(t) {
  return new (t || DxoLabelModule)();
};
DxoLabelModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoLabelModule });
DxoLabelModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLabelModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoLabelComponent
      ],
      exports: [
        DxoLabelComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoLabelModule, { declarations: [DxoLabelComponent], exports: [DxoLabelComponent] });
})();
var DxiLayerComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get borderColor() {
    return this._getOption("borderColor");
  }
  set borderColor(value) {
    this._setOption("borderColor", value);
  }
  get borderWidth() {
    return this._getOption("borderWidth");
  }
  set borderWidth(value) {
    this._setOption("borderWidth", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get colorGroupingField() {
    return this._getOption("colorGroupingField");
  }
  set colorGroupingField(value) {
    this._setOption("colorGroupingField", value);
  }
  get colorGroups() {
    return this._getOption("colorGroups");
  }
  set colorGroups(value) {
    this._setOption("colorGroups", value);
  }
  get customize() {
    return this._getOption("customize");
  }
  set customize(value) {
    this._setOption("customize", value);
  }
  get dataField() {
    return this._getOption("dataField");
  }
  set dataField(value) {
    this._setOption("dataField", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get elementType() {
    return this._getOption("elementType");
  }
  set elementType(value) {
    this._setOption("elementType", value);
  }
  get hoveredBorderColor() {
    return this._getOption("hoveredBorderColor");
  }
  set hoveredBorderColor(value) {
    this._setOption("hoveredBorderColor", value);
  }
  get hoveredBorderWidth() {
    return this._getOption("hoveredBorderWidth");
  }
  set hoveredBorderWidth(value) {
    this._setOption("hoveredBorderWidth", value);
  }
  get hoveredColor() {
    return this._getOption("hoveredColor");
  }
  set hoveredColor(value) {
    this._setOption("hoveredColor", value);
  }
  get hoverEnabled() {
    return this._getOption("hoverEnabled");
  }
  set hoverEnabled(value) {
    this._setOption("hoverEnabled", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get maxSize() {
    return this._getOption("maxSize");
  }
  set maxSize(value) {
    this._setOption("maxSize", value);
  }
  get minSize() {
    return this._getOption("minSize");
  }
  set minSize(value) {
    this._setOption("minSize", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get palette() {
    return this._getOption("palette");
  }
  set palette(value) {
    this._setOption("palette", value);
  }
  get paletteIndex() {
    return this._getOption("paletteIndex");
  }
  set paletteIndex(value) {
    this._setOption("paletteIndex", value);
  }
  get paletteSize() {
    return this._getOption("paletteSize");
  }
  set paletteSize(value) {
    this._setOption("paletteSize", value);
  }
  get selectedBorderColor() {
    return this._getOption("selectedBorderColor");
  }
  set selectedBorderColor(value) {
    this._setOption("selectedBorderColor", value);
  }
  get selectedBorderWidth() {
    return this._getOption("selectedBorderWidth");
  }
  set selectedBorderWidth(value) {
    this._setOption("selectedBorderWidth", value);
  }
  get selectedColor() {
    return this._getOption("selectedColor");
  }
  set selectedColor(value) {
    this._setOption("selectedColor", value);
  }
  get selectionMode() {
    return this._getOption("selectionMode");
  }
  set selectionMode(value) {
    this._setOption("selectionMode", value);
  }
  get size() {
    return this._getOption("size");
  }
  set size(value) {
    this._setOption("size", value);
  }
  get sizeGroupingField() {
    return this._getOption("sizeGroupingField");
  }
  set sizeGroupingField(value) {
    this._setOption("sizeGroupingField", value);
  }
  get sizeGroups() {
    return this._getOption("sizeGroups");
  }
  set sizeGroups(value) {
    this._setOption("sizeGroups", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get _optionPath() {
    return "layers";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiLayerComponent.ɵfac = function DxiLayerComponent_Factory(t) {
  return new (t || DxiLayerComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiLayerComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiLayerComponent, selectors: [["dxi-layer"]], inputs: { borderColor: "borderColor", borderWidth: "borderWidth", color: "color", colorGroupingField: "colorGroupingField", colorGroups: "colorGroups", customize: "customize", dataField: "dataField", dataSource: "dataSource", elementType: "elementType", hoveredBorderColor: "hoveredBorderColor", hoveredBorderWidth: "hoveredBorderWidth", hoveredColor: "hoveredColor", hoverEnabled: "hoverEnabled", label: "label", maxSize: "maxSize", minSize: "minSize", name: "name", opacity: "opacity", palette: "palette", paletteIndex: "paletteIndex", paletteSize: "paletteSize", selectedBorderColor: "selectedBorderColor", selectedBorderWidth: "selectedBorderWidth", selectedColor: "selectedColor", selectionMode: "selectionMode", size: "size", sizeGroupingField: "sizeGroupingField", sizeGroups: "sizeGroups", type: "type" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiLayerComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiLayerComponent, [{
    type: Component,
    args: [{
      selector: "dxi-layer",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { borderColor: [{
    type: Input
  }], borderWidth: [{
    type: Input
  }], color: [{
    type: Input
  }], colorGroupingField: [{
    type: Input
  }], colorGroups: [{
    type: Input
  }], customize: [{
    type: Input
  }], dataField: [{
    type: Input
  }], dataSource: [{
    type: Input
  }], elementType: [{
    type: Input
  }], hoveredBorderColor: [{
    type: Input
  }], hoveredBorderWidth: [{
    type: Input
  }], hoveredColor: [{
    type: Input
  }], hoverEnabled: [{
    type: Input
  }], label: [{
    type: Input
  }], maxSize: [{
    type: Input
  }], minSize: [{
    type: Input
  }], name: [{
    type: Input
  }], opacity: [{
    type: Input
  }], palette: [{
    type: Input
  }], paletteIndex: [{
    type: Input
  }], paletteSize: [{
    type: Input
  }], selectedBorderColor: [{
    type: Input
  }], selectedBorderWidth: [{
    type: Input
  }], selectedColor: [{
    type: Input
  }], selectionMode: [{
    type: Input
  }], size: [{
    type: Input
  }], sizeGroupingField: [{
    type: Input
  }], sizeGroups: [{
    type: Input
  }], type: [{
    type: Input
  }] });
})();
var DxiLayerModule = class {
};
DxiLayerModule.ɵfac = function DxiLayerModule_Factory(t) {
  return new (t || DxiLayerModule)();
};
DxiLayerModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiLayerModule });
DxiLayerModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiLayerModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiLayerComponent
      ],
      exports: [
        DxiLayerComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiLayerModule, { declarations: [DxiLayerComponent], exports: [DxiLayerComponent] });
})();
var DxiLegendComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get columnCount() {
    return this._getOption("columnCount");
  }
  set columnCount(value) {
    this._setOption("columnCount", value);
  }
  get columnItemSpacing() {
    return this._getOption("columnItemSpacing");
  }
  set columnItemSpacing(value) {
    this._setOption("columnItemSpacing", value);
  }
  get customizeHint() {
    return this._getOption("customizeHint");
  }
  set customizeHint(value) {
    this._setOption("customizeHint", value);
  }
  get customizeItems() {
    return this._getOption("customizeItems");
  }
  set customizeItems(value) {
    this._setOption("customizeItems", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get horizontalAlignment() {
    return this._getOption("horizontalAlignment");
  }
  set horizontalAlignment(value) {
    this._setOption("horizontalAlignment", value);
  }
  get itemsAlignment() {
    return this._getOption("itemsAlignment");
  }
  set itemsAlignment(value) {
    this._setOption("itemsAlignment", value);
  }
  get itemTextPosition() {
    return this._getOption("itemTextPosition");
  }
  set itemTextPosition(value) {
    this._setOption("itemTextPosition", value);
  }
  get margin() {
    return this._getOption("margin");
  }
  set margin(value) {
    this._setOption("margin", value);
  }
  get markerColor() {
    return this._getOption("markerColor");
  }
  set markerColor(value) {
    this._setOption("markerColor", value);
  }
  get markerShape() {
    return this._getOption("markerShape");
  }
  set markerShape(value) {
    this._setOption("markerShape", value);
  }
  get markerSize() {
    return this._getOption("markerSize");
  }
  set markerSize(value) {
    this._setOption("markerSize", value);
  }
  get markerTemplate() {
    return this._getOption("markerTemplate");
  }
  set markerTemplate(value) {
    this._setOption("markerTemplate", value);
  }
  get orientation() {
    return this._getOption("orientation");
  }
  set orientation(value) {
    this._setOption("orientation", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get rowCount() {
    return this._getOption("rowCount");
  }
  set rowCount(value) {
    this._setOption("rowCount", value);
  }
  get rowItemSpacing() {
    return this._getOption("rowItemSpacing");
  }
  set rowItemSpacing(value) {
    this._setOption("rowItemSpacing", value);
  }
  get source() {
    return this._getOption("source");
  }
  set source(value) {
    this._setOption("source", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get verticalAlignment() {
    return this._getOption("verticalAlignment");
  }
  set verticalAlignment(value) {
    this._setOption("verticalAlignment", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "legends";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiLegendComponent.ɵfac = function DxiLegendComponent_Factory(t) {
  return new (t || DxiLegendComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiLegendComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiLegendComponent, selectors: [["dxi-legend"]], inputs: { backgroundColor: "backgroundColor", border: "border", columnCount: "columnCount", columnItemSpacing: "columnItemSpacing", customizeHint: "customizeHint", customizeItems: "customizeItems", customizeText: "customizeText", font: "font", horizontalAlignment: "horizontalAlignment", itemsAlignment: "itemsAlignment", itemTextPosition: "itemTextPosition", margin: "margin", markerColor: "markerColor", markerShape: "markerShape", markerSize: "markerSize", markerTemplate: "markerTemplate", orientation: "orientation", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", rowCount: "rowCount", rowItemSpacing: "rowItemSpacing", source: "source", title: "title", verticalAlignment: "verticalAlignment", visible: "visible" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiLegendComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiLegendComponent, [{
    type: Component,
    args: [{
      selector: "dxi-legend",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { backgroundColor: [{
    type: Input
  }], border: [{
    type: Input
  }], columnCount: [{
    type: Input
  }], columnItemSpacing: [{
    type: Input
  }], customizeHint: [{
    type: Input
  }], customizeItems: [{
    type: Input
  }], customizeText: [{
    type: Input
  }], font: [{
    type: Input
  }], horizontalAlignment: [{
    type: Input
  }], itemsAlignment: [{
    type: Input
  }], itemTextPosition: [{
    type: Input
  }], margin: [{
    type: Input
  }], markerColor: [{
    type: Input
  }], markerShape: [{
    type: Input
  }], markerSize: [{
    type: Input
  }], markerTemplate: [{
    type: Input
  }], orientation: [{
    type: Input
  }], paddingLeftRight: [{
    type: Input
  }], paddingTopBottom: [{
    type: Input
  }], rowCount: [{
    type: Input
  }], rowItemSpacing: [{
    type: Input
  }], source: [{
    type: Input
  }], title: [{
    type: Input
  }], verticalAlignment: [{
    type: Input
  }], visible: [{
    type: Input
  }] });
})();
var DxiLegendModule = class {
};
DxiLegendModule.ɵfac = function DxiLegendModule_Factory(t) {
  return new (t || DxiLegendModule)();
};
DxiLegendModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiLegendModule });
DxiLegendModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiLegendModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiLegendComponent
      ],
      exports: [
        DxiLegendComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiLegendModule, { declarations: [DxiLegendComponent], exports: [DxiLegendComponent] });
})();
var DxoLegendComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get columnCount() {
    return this._getOption("columnCount");
  }
  set columnCount(value) {
    this._setOption("columnCount", value);
  }
  get columnItemSpacing() {
    return this._getOption("columnItemSpacing");
  }
  set columnItemSpacing(value) {
    this._setOption("columnItemSpacing", value);
  }
  get customizeHint() {
    return this._getOption("customizeHint");
  }
  set customizeHint(value) {
    this._setOption("customizeHint", value);
  }
  get customizeItems() {
    return this._getOption("customizeItems");
  }
  set customizeItems(value) {
    this._setOption("customizeItems", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get horizontalAlignment() {
    return this._getOption("horizontalAlignment");
  }
  set horizontalAlignment(value) {
    this._setOption("horizontalAlignment", value);
  }
  get itemsAlignment() {
    return this._getOption("itemsAlignment");
  }
  set itemsAlignment(value) {
    this._setOption("itemsAlignment", value);
  }
  get itemTextFormat() {
    return this._getOption("itemTextFormat");
  }
  set itemTextFormat(value) {
    this._setOption("itemTextFormat", value);
  }
  get itemTextPosition() {
    return this._getOption("itemTextPosition");
  }
  set itemTextPosition(value) {
    this._setOption("itemTextPosition", value);
  }
  get margin() {
    return this._getOption("margin");
  }
  set margin(value) {
    this._setOption("margin", value);
  }
  get markerSize() {
    return this._getOption("markerSize");
  }
  set markerSize(value) {
    this._setOption("markerSize", value);
  }
  get markerTemplate() {
    return this._getOption("markerTemplate");
  }
  set markerTemplate(value) {
    this._setOption("markerTemplate", value);
  }
  get orientation() {
    return this._getOption("orientation");
  }
  set orientation(value) {
    this._setOption("orientation", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get rowCount() {
    return this._getOption("rowCount");
  }
  set rowCount(value) {
    this._setOption("rowCount", value);
  }
  get rowItemSpacing() {
    return this._getOption("rowItemSpacing");
  }
  set rowItemSpacing(value) {
    this._setOption("rowItemSpacing", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get verticalAlignment() {
    return this._getOption("verticalAlignment");
  }
  set verticalAlignment(value) {
    this._setOption("verticalAlignment", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get hoverMode() {
    return this._getOption("hoverMode");
  }
  set hoverMode(value) {
    this._setOption("hoverMode", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get _optionPath() {
    return "legend";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoLegendComponent.ɵfac = function DxoLegendComponent_Factory(t) {
  return new (t || DxoLegendComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoLegendComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoLegendComponent, selectors: [["dxo-legend"]], inputs: { backgroundColor: "backgroundColor", border: "border", columnCount: "columnCount", columnItemSpacing: "columnItemSpacing", customizeHint: "customizeHint", customizeItems: "customizeItems", customizeText: "customizeText", font: "font", horizontalAlignment: "horizontalAlignment", itemsAlignment: "itemsAlignment", itemTextFormat: "itemTextFormat", itemTextPosition: "itemTextPosition", margin: "margin", markerSize: "markerSize", markerTemplate: "markerTemplate", orientation: "orientation", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", rowCount: "rowCount", rowItemSpacing: "rowItemSpacing", title: "title", verticalAlignment: "verticalAlignment", visible: "visible", hoverMode: "hoverMode", position: "position" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoLegendComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLegendComponent, [{
    type: Component,
    args: [{
      selector: "dxo-legend",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { backgroundColor: [{
    type: Input
  }], border: [{
    type: Input
  }], columnCount: [{
    type: Input
  }], columnItemSpacing: [{
    type: Input
  }], customizeHint: [{
    type: Input
  }], customizeItems: [{
    type: Input
  }], customizeText: [{
    type: Input
  }], font: [{
    type: Input
  }], horizontalAlignment: [{
    type: Input
  }], itemsAlignment: [{
    type: Input
  }], itemTextFormat: [{
    type: Input
  }], itemTextPosition: [{
    type: Input
  }], margin: [{
    type: Input
  }], markerSize: [{
    type: Input
  }], markerTemplate: [{
    type: Input
  }], orientation: [{
    type: Input
  }], paddingLeftRight: [{
    type: Input
  }], paddingTopBottom: [{
    type: Input
  }], rowCount: [{
    type: Input
  }], rowItemSpacing: [{
    type: Input
  }], title: [{
    type: Input
  }], verticalAlignment: [{
    type: Input
  }], visible: [{
    type: Input
  }], hoverMode: [{
    type: Input
  }], position: [{
    type: Input
  }] });
})();
var DxoLegendModule = class {
};
DxoLegendModule.ɵfac = function DxoLegendModule_Factory(t) {
  return new (t || DxoLegendModule)();
};
DxoLegendModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoLegendModule });
DxoLegendModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLegendModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoLegendComponent
      ],
      exports: [
        DxoLegendComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoLegendModule, { declarations: [DxoLegendComponent], exports: [DxoLegendComponent] });
})();
var DxoLineComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "line";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoLineComponent.ɵfac = function DxoLineComponent_Factory(t) {
  return new (t || DxoLineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoLineComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoLineComponent, selectors: [["dxo-line"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", closed: "closed" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoLineComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-line",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width",
        "closed"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoLineModule = class {
};
DxoLineModule.ɵfac = function DxoLineModule_Factory(t) {
  return new (t || DxoLineModule)();
};
DxoLineModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoLineModule });
DxoLineModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLineModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoLineComponent
      ],
      exports: [
        DxoLineComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoLineModule, { declarations: [DxoLineComponent], exports: [DxoLineComponent] });
})();
var DxoLinkComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get colorMode() {
    return this._getOption("colorMode");
  }
  set colorMode(value) {
    this._setOption("colorMode", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get _optionPath() {
    return "link";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoLinkComponent.ɵfac = function DxoLinkComponent_Factory(t) {
  return new (t || DxoLinkComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoLinkComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoLinkComponent, selectors: [["dxo-link"]], inputs: { border: "border", color: "color", colorMode: "colorMode", hoverStyle: "hoverStyle", opacity: "opacity" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoLinkComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLinkComponent, [{
    type: Component,
    args: [{
      selector: "dxo-link",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { border: [{
    type: Input
  }], color: [{
    type: Input
  }], colorMode: [{
    type: Input
  }], hoverStyle: [{
    type: Input
  }], opacity: [{
    type: Input
  }] });
})();
var DxoLinkModule = class {
};
DxoLinkModule.ɵfac = function DxoLinkModule_Factory(t) {
  return new (t || DxoLinkModule)();
};
DxoLinkModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoLinkModule });
DxoLinkModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLinkModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoLinkComponent
      ],
      exports: [
        DxoLinkComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoLinkModule, { declarations: [DxoLinkComponent], exports: [DxoLinkComponent] });
})();
var DxoLoadPanelComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get indicatorSrc() {
    return this._getOption("indicatorSrc");
  }
  set indicatorSrc(value) {
    this._setOption("indicatorSrc", value);
  }
  get shading() {
    return this._getOption("shading");
  }
  set shading(value) {
    this._setOption("shading", value);
  }
  get shadingColor() {
    return this._getOption("shadingColor");
  }
  set shadingColor(value) {
    this._setOption("shadingColor", value);
  }
  get showIndicator() {
    return this._getOption("showIndicator");
  }
  set showIndicator(value) {
    this._setOption("showIndicator", value);
  }
  get showPane() {
    return this._getOption("showPane");
  }
  set showPane(value) {
    this._setOption("showPane", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "loadPanel";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoLoadPanelComponent.ɵfac = function DxoLoadPanelComponent_Factory(t) {
  return new (t || DxoLoadPanelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoLoadPanelComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoLoadPanelComponent, selectors: [["dxo-load-panel"]], inputs: { enabled: "enabled", height: "height", indicatorSrc: "indicatorSrc", shading: "shading", shadingColor: "shadingColor", showIndicator: "showIndicator", showPane: "showPane", text: "text", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoLoadPanelComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLoadPanelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-load-panel",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { enabled: [{
    type: Input
  }], height: [{
    type: Input
  }], indicatorSrc: [{
    type: Input
  }], shading: [{
    type: Input
  }], shadingColor: [{
    type: Input
  }], showIndicator: [{
    type: Input
  }], showPane: [{
    type: Input
  }], text: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoLoadPanelModule = class {
};
DxoLoadPanelModule.ɵfac = function DxoLoadPanelModule_Factory(t) {
  return new (t || DxoLoadPanelModule)();
};
DxoLoadPanelModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoLoadPanelModule });
DxoLoadPanelModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLoadPanelModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoLoadPanelComponent
      ],
      exports: [
        DxoLoadPanelComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoLoadPanelModule, { declarations: [DxoLoadPanelComponent], exports: [DxoLoadPanelComponent] });
})();
var DxoLoadingIndicatorComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "showChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get show() {
    return this._getOption("show");
  }
  set show(value) {
    this._setOption("show", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get _optionPath() {
    return "loadingIndicator";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoLoadingIndicatorComponent.ɵfac = function DxoLoadingIndicatorComponent_Factory(t) {
  return new (t || DxoLoadingIndicatorComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoLoadingIndicatorComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoLoadingIndicatorComponent, selectors: [["dxo-loading-indicator"]], inputs: { backgroundColor: "backgroundColor", font: "font", show: "show", text: "text", enabled: "enabled" }, outputs: { showChange: "showChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoLoadingIndicatorComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLoadingIndicatorComponent, [{
    type: Component,
    args: [{
      selector: "dxo-loading-indicator",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { backgroundColor: [{
    type: Input
  }], font: [{
    type: Input
  }], show: [{
    type: Input
  }], text: [{
    type: Input
  }], enabled: [{
    type: Input
  }], showChange: [{
    type: Output
  }] });
})();
var DxoLoadingIndicatorModule = class {
};
DxoLoadingIndicatorModule.ɵfac = function DxoLoadingIndicatorModule_Factory(t) {
  return new (t || DxoLoadingIndicatorModule)();
};
DxoLoadingIndicatorModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoLoadingIndicatorModule });
DxoLoadingIndicatorModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLoadingIndicatorModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoLoadingIndicatorComponent
      ],
      exports: [
        DxoLoadingIndicatorComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoLoadingIndicatorModule, { declarations: [DxoLoadingIndicatorComponent], exports: [DxoLoadingIndicatorComponent] });
})();
var DxoLookupComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get allowClearing() {
    return this._getOption("allowClearing");
  }
  set allowClearing(value) {
    this._setOption("allowClearing", value);
  }
  get calculateCellValue() {
    return this._getOption("calculateCellValue");
  }
  set calculateCellValue(value) {
    this._setOption("calculateCellValue", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get displayExpr() {
    return this._getOption("displayExpr");
  }
  set displayExpr(value) {
    this._setOption("displayExpr", value);
  }
  get valueExpr() {
    return this._getOption("valueExpr");
  }
  set valueExpr(value) {
    this._setOption("valueExpr", value);
  }
  get _optionPath() {
    return "lookup";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoLookupComponent.ɵfac = function DxoLookupComponent_Factory(t) {
  return new (t || DxoLookupComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoLookupComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoLookupComponent, selectors: [["dxo-lookup"]], inputs: { allowClearing: "allowClearing", calculateCellValue: "calculateCellValue", dataSource: "dataSource", displayExpr: "displayExpr", valueExpr: "valueExpr" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoLookupComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLookupComponent, [{
    type: Component,
    args: [{
      selector: "dxo-lookup",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { allowClearing: [{
    type: Input
  }], calculateCellValue: [{
    type: Input
  }], dataSource: [{
    type: Input
  }], displayExpr: [{
    type: Input
  }], valueExpr: [{
    type: Input
  }] });
})();
var DxoLookupModule = class {
};
DxoLookupModule.ɵfac = function DxoLookupModule_Factory(t) {
  return new (t || DxoLookupModule)();
};
DxoLookupModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoLookupModule });
DxoLookupModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoLookupModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoLookupComponent
      ],
      exports: [
        DxoLookupComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoLookupModule, { declarations: [DxoLookupComponent], exports: [DxoLookupComponent] });
})();
var DxoMainToolbarComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get commands() {
    return this._getOption("commands");
  }
  set commands(value) {
    this._setOption("commands", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "mainToolbar";
  }
  get commandsChildren() {
    return this._getOption("commands");
  }
  set commandsChildren(value) {
    this.setChildren("commands", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoMainToolbarComponent.ɵfac = function DxoMainToolbarComponent_Factory(t) {
  return new (t || DxoMainToolbarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoMainToolbarComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoMainToolbarComponent, selectors: [["dxo-main-toolbar"]], contentQueries: function DxoMainToolbarComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiCommandComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.commandsChildren = _t);
  }
}, inputs: { commands: "commands", visible: "visible" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoMainToolbarComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMainToolbarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-main-toolbar",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { commands: [{
    type: Input
  }], visible: [{
    type: Input
  }], commandsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiCommandComponent)]
  }] });
})();
var DxoMainToolbarModule = class {
};
DxoMainToolbarModule.ɵfac = function DxoMainToolbarModule_Factory(t) {
  return new (t || DxoMainToolbarModule)();
};
DxoMainToolbarModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoMainToolbarModule });
DxoMainToolbarModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMainToolbarModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoMainToolbarComponent
      ],
      exports: [
        DxoMainToolbarComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoMainToolbarModule, { declarations: [DxoMainToolbarComponent], exports: [DxoMainToolbarComponent] });
})();
var DxoMarginComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get bottom() {
    return this._getOption("bottom");
  }
  set bottom(value) {
    this._setOption("bottom", value);
  }
  get left() {
    return this._getOption("left");
  }
  set left(value) {
    this._setOption("left", value);
  }
  get right() {
    return this._getOption("right");
  }
  set right(value) {
    this._setOption("right", value);
  }
  get top() {
    return this._getOption("top");
  }
  set top(value) {
    this._setOption("top", value);
  }
  get _optionPath() {
    return "margin";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoMarginComponent.ɵfac = function DxoMarginComponent_Factory(t) {
  return new (t || DxoMarginComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoMarginComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoMarginComponent, selectors: [["dxo-margin"]], inputs: { bottom: "bottom", left: "left", right: "right", top: "top" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoMarginComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMarginComponent, [{
    type: Component,
    args: [{
      selector: "dxo-margin",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { bottom: [{
    type: Input
  }], left: [{
    type: Input
  }], right: [{
    type: Input
  }], top: [{
    type: Input
  }] });
})();
var DxoMarginModule = class {
};
DxoMarginModule.ɵfac = function DxoMarginModule_Factory(t) {
  return new (t || DxoMarginModule)();
};
DxoMarginModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoMarginModule });
DxoMarginModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMarginModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoMarginComponent
      ],
      exports: [
        DxoMarginComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoMarginModule, { declarations: [DxoMarginComponent], exports: [DxoMarginComponent] });
})();
var DxiMarkerComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get iconSrc() {
    return this._getOption("iconSrc");
  }
  set iconSrc(value) {
    this._setOption("iconSrc", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get onClick() {
    return this._getOption("onClick");
  }
  set onClick(value) {
    this._setOption("onClick", value);
  }
  get tooltip() {
    return this._getOption("tooltip");
  }
  set tooltip(value) {
    this._setOption("tooltip", value);
  }
  get _optionPath() {
    return "markers";
  }
  get locationChildren() {
    return this._getOption("location");
  }
  set locationChildren(value) {
    this.setChildren("location", value);
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiMarkerComponent.ɵfac = function DxiMarkerComponent_Factory(t) {
  return new (t || DxiMarkerComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiMarkerComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiMarkerComponent, selectors: [["dxi-marker"]], contentQueries: function DxiMarkerComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiLocationComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.locationChildren = _t);
  }
}, inputs: { iconSrc: "iconSrc", location: "location", onClick: "onClick", tooltip: "tooltip" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiMarkerComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiMarkerComponent, [{
    type: Component,
    args: [{
      selector: "dxi-marker",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { iconSrc: [{
    type: Input
  }], location: [{
    type: Input
  }], onClick: [{
    type: Input
  }], tooltip: [{
    type: Input
  }], locationChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiLocationComponent)]
  }] });
})();
var DxiMarkerModule = class {
};
DxiMarkerModule.ɵfac = function DxiMarkerModule_Factory(t) {
  return new (t || DxiMarkerModule)();
};
DxiMarkerModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiMarkerModule });
DxiMarkerModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiMarkerModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiMarkerComponent
      ],
      exports: [
        DxiMarkerComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiMarkerModule, { declarations: [DxiMarkerComponent], exports: [DxiMarkerComponent] });
})();
var DxoMarkerComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get separatorHeight() {
    return this._getOption("separatorHeight");
  }
  set separatorHeight(value) {
    this._setOption("separatorHeight", value);
  }
  get textLeftIndent() {
    return this._getOption("textLeftIndent");
  }
  set textLeftIndent(value) {
    this._setOption("textLeftIndent", value);
  }
  get textTopIndent() {
    return this._getOption("textTopIndent");
  }
  set textTopIndent(value) {
    this._setOption("textTopIndent", value);
  }
  get topIndent() {
    return this._getOption("topIndent");
  }
  set topIndent(value) {
    this._setOption("topIndent", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "marker";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoMarkerComponent.ɵfac = function DxoMarkerComponent_Factory(t) {
  return new (t || DxoMarkerComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoMarkerComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoMarkerComponent, selectors: [["dxo-marker"]], inputs: { label: "label", separatorHeight: "separatorHeight", textLeftIndent: "textLeftIndent", textTopIndent: "textTopIndent", topIndent: "topIndent", visible: "visible" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoMarkerComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMarkerComponent, [{
    type: Component,
    args: [{
      selector: "dxo-marker",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { label: [{
    type: Input
  }], separatorHeight: [{
    type: Input
  }], textLeftIndent: [{
    type: Input
  }], textTopIndent: [{
    type: Input
  }], topIndent: [{
    type: Input
  }], visible: [{
    type: Input
  }] });
})();
var DxoMarkerModule = class {
};
DxoMarkerModule.ɵfac = function DxoMarkerModule_Factory(t) {
  return new (t || DxoMarkerModule)();
};
DxoMarkerModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoMarkerModule });
DxoMarkerModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMarkerModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoMarkerComponent
      ],
      exports: [
        DxoMarkerComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoMarkerModule, { declarations: [DxoMarkerComponent], exports: [DxoMarkerComponent] });
})();
var _c0 = ["*"];
var DxoMasterDetailComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
    super();
    this.renderer = renderer;
    this.document = document;
    this.element = element;
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
    templateHost.setHost(this);
  }
  get autoExpandAll() {
    return this._getOption("autoExpandAll");
  }
  set autoExpandAll(value) {
    this._setOption("autoExpandAll", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get _optionPath() {
    return "masterDetail";
  }
  setTemplate(template) {
    this.template = template;
  }
  ngAfterViewInit() {
    extractTemplate(this, this.element, this.renderer, this.document);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoMasterDetailComponent.ɵfac = function DxoMasterDetailComponent_Factory(t) {
  return new (t || DxoMasterDetailComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(DxTemplateHost, 1), ɵɵdirectiveInject(ElementRef));
};
DxoMasterDetailComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoMasterDetailComponent, selectors: [["dxo-master-detail"]], inputs: { autoExpandAll: "autoExpandAll", enabled: "enabled", template: "template" }, features: [ɵɵProvidersFeature([NestedOptionHost, DxTemplateHost]), ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxoMasterDetailComponent_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojectionDef();
    ɵɵprojection(0);
  }
}, styles: ["[_nghost-%COMP%] { display: block; }"] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMasterDetailComponent, [{
    type: Component,
    args: [{
      selector: "dxo-master-detail",
      template: "<ng-content></ng-content>",
      styles: [":host { display: block; }"],
      providers: [NestedOptionHost, DxTemplateHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }, { type: Renderer2 }, { type: void 0, decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }] }, { type: DxTemplateHost, decorators: [{
      type: Host
    }] }, { type: ElementRef }];
  }, { autoExpandAll: [{
    type: Input
  }], enabled: [{
    type: Input
  }], template: [{
    type: Input
  }] });
})();
var DxoMasterDetailModule = class {
};
DxoMasterDetailModule.ɵfac = function DxoMasterDetailModule_Factory(t) {
  return new (t || DxoMasterDetailModule)();
};
DxoMasterDetailModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoMasterDetailModule });
DxoMasterDetailModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMasterDetailModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoMasterDetailComponent
      ],
      exports: [
        DxoMasterDetailComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoMasterDetailModule, { declarations: [DxoMasterDetailComponent], exports: [DxoMasterDetailComponent] });
})();
var DxoMaxRangeComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get days() {
    return this._getOption("days");
  }
  set days(value) {
    this._setOption("days", value);
  }
  get hours() {
    return this._getOption("hours");
  }
  set hours(value) {
    this._setOption("hours", value);
  }
  get milliseconds() {
    return this._getOption("milliseconds");
  }
  set milliseconds(value) {
    this._setOption("milliseconds", value);
  }
  get minutes() {
    return this._getOption("minutes");
  }
  set minutes(value) {
    this._setOption("minutes", value);
  }
  get months() {
    return this._getOption("months");
  }
  set months(value) {
    this._setOption("months", value);
  }
  get quarters() {
    return this._getOption("quarters");
  }
  set quarters(value) {
    this._setOption("quarters", value);
  }
  get seconds() {
    return this._getOption("seconds");
  }
  set seconds(value) {
    this._setOption("seconds", value);
  }
  get weeks() {
    return this._getOption("weeks");
  }
  set weeks(value) {
    this._setOption("weeks", value);
  }
  get years() {
    return this._getOption("years");
  }
  set years(value) {
    this._setOption("years", value);
  }
  get _optionPath() {
    return "maxRange";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoMaxRangeComponent.ɵfac = function DxoMaxRangeComponent_Factory(t) {
  return new (t || DxoMaxRangeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoMaxRangeComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoMaxRangeComponent, selectors: [["dxo-max-range"]], inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoMaxRangeComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMaxRangeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-max-range",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { days: [{
    type: Input
  }], hours: [{
    type: Input
  }], milliseconds: [{
    type: Input
  }], minutes: [{
    type: Input
  }], months: [{
    type: Input
  }], quarters: [{
    type: Input
  }], seconds: [{
    type: Input
  }], weeks: [{
    type: Input
  }], years: [{
    type: Input
  }] });
})();
var DxoMaxRangeModule = class {
};
DxoMaxRangeModule.ɵfac = function DxoMaxRangeModule_Factory(t) {
  return new (t || DxoMaxRangeModule)();
};
DxoMaxRangeModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoMaxRangeModule });
DxoMaxRangeModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMaxRangeModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoMaxRangeComponent
      ],
      exports: [
        DxoMaxRangeComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoMaxRangeModule, { declarations: [DxoMaxRangeComponent], exports: [DxoMaxRangeComponent] });
})();
var DxoHtmlEditorMediaResizing = class extends NestedOption {
  get allowedTargets() {
    return this._getOption("allowedTargets");
  }
  set allowedTargets(value) {
    this._setOption("allowedTargets", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
};
DxoHtmlEditorMediaResizing.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoHtmlEditorMediaResizing_BaseFactory;
  return function DxoHtmlEditorMediaResizing_Factory(t) {
    return (ɵDxoHtmlEditorMediaResizing_BaseFactory || (ɵDxoHtmlEditorMediaResizing_BaseFactory = ɵɵgetInheritedFactory(DxoHtmlEditorMediaResizing)))(t || DxoHtmlEditorMediaResizing);
  };
}();
DxoHtmlEditorMediaResizing.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoHtmlEditorMediaResizing, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoHtmlEditorMediaResizing_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHtmlEditorMediaResizing, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoMediaResizingComponent = class extends DxoHtmlEditorMediaResizing {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "mediaResizing";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoMediaResizingComponent.ɵfac = function DxoMediaResizingComponent_Factory(t) {
  return new (t || DxoMediaResizingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoMediaResizingComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoMediaResizingComponent, selectors: [["dxo-media-resizing"]], inputs: { allowedTargets: "allowedTargets", enabled: "enabled" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoMediaResizingComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMediaResizingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-media-resizing",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "allowedTargets",
        "enabled"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoMediaResizingModule = class {
};
DxoMediaResizingModule.ɵfac = function DxoMediaResizingModule_Factory(t) {
  return new (t || DxoMediaResizingModule)();
};
DxoMediaResizingModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoMediaResizingModule });
DxoMediaResizingModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMediaResizingModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoMediaResizingComponent
      ],
      exports: [
        DxoMediaResizingComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoMediaResizingModule, { declarations: [DxoMediaResizingComponent], exports: [DxoMediaResizingComponent] });
})();
var DxiHtmlEditorMention = class extends CollectionNestedOption {
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get displayExpr() {
    return this._getOption("displayExpr");
  }
  set displayExpr(value) {
    this._setOption("displayExpr", value);
  }
  get itemTemplate() {
    return this._getOption("itemTemplate");
  }
  set itemTemplate(value) {
    this._setOption("itemTemplate", value);
  }
  get marker() {
    return this._getOption("marker");
  }
  set marker(value) {
    this._setOption("marker", value);
  }
  get minSearchLength() {
    return this._getOption("minSearchLength");
  }
  set minSearchLength(value) {
    this._setOption("minSearchLength", value);
  }
  get searchExpr() {
    return this._getOption("searchExpr");
  }
  set searchExpr(value) {
    this._setOption("searchExpr", value);
  }
  get searchTimeout() {
    return this._getOption("searchTimeout");
  }
  set searchTimeout(value) {
    this._setOption("searchTimeout", value);
  }
  get template() {
    return this._getOption("template");
  }
  set template(value) {
    this._setOption("template", value);
  }
  get valueExpr() {
    return this._getOption("valueExpr");
  }
  set valueExpr(value) {
    this._setOption("valueExpr", value);
  }
};
DxiHtmlEditorMention.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxiHtmlEditorMention_BaseFactory;
  return function DxiHtmlEditorMention_Factory(t) {
    return (ɵDxiHtmlEditorMention_BaseFactory || (ɵDxiHtmlEditorMention_BaseFactory = ɵɵgetInheritedFactory(DxiHtmlEditorMention)))(t || DxiHtmlEditorMention);
  };
}();
DxiHtmlEditorMention.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiHtmlEditorMention, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiHtmlEditorMention_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiHtmlEditorMention, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiMentionComponent = class extends DxiHtmlEditorMention {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "mentions";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiMentionComponent.ɵfac = function DxiMentionComponent_Factory(t) {
  return new (t || DxiMentionComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiMentionComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiMentionComponent, selectors: [["dxi-mention"]], inputs: { dataSource: "dataSource", displayExpr: "displayExpr", itemTemplate: "itemTemplate", marker: "marker", minSearchLength: "minSearchLength", searchExpr: "searchExpr", searchTimeout: "searchTimeout", template: "template", valueExpr: "valueExpr" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiMentionComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiMentionComponent, [{
    type: Component,
    args: [{
      selector: "dxi-mention",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "dataSource",
        "displayExpr",
        "itemTemplate",
        "marker",
        "minSearchLength",
        "searchExpr",
        "searchTimeout",
        "template",
        "valueExpr"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxiMentionModule = class {
};
DxiMentionModule.ɵfac = function DxiMentionModule_Factory(t) {
  return new (t || DxiMentionModule)();
};
DxiMentionModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiMentionModule });
DxiMentionModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiMentionModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiMentionComponent
      ],
      exports: [
        DxiMentionComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiMentionModule, { declarations: [DxiMentionComponent], exports: [DxiMentionComponent] });
})();
var DxiMenuItemComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get action() {
    return this._getOption("action");
  }
  set action(value) {
    this._setOption("action", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get _optionPath() {
    return "menuItems";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiMenuItemComponent.ɵfac = function DxiMenuItemComponent_Factory(t) {
  return new (t || DxiMenuItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiMenuItemComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiMenuItemComponent, selectors: [["dxi-menu-item"]], inputs: { action: "action", text: "text" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiMenuItemComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiMenuItemComponent, [{
    type: Component,
    args: [{
      selector: "dxi-menu-item",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { action: [{
    type: Input
  }], text: [{
    type: Input
  }] });
})();
var DxiMenuItemModule = class {
};
DxiMenuItemModule.ɵfac = function DxiMenuItemModule_Factory(t) {
  return new (t || DxiMenuItemModule)();
};
DxiMenuItemModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiMenuItemModule });
DxiMenuItemModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiMenuItemModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiMenuItemComponent
      ],
      exports: [
        DxiMenuItemComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiMenuItemModule, { declarations: [DxiMenuItemComponent], exports: [DxiMenuItemComponent] });
})();
var DxoMinRangeComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get days() {
    return this._getOption("days");
  }
  set days(value) {
    this._setOption("days", value);
  }
  get hours() {
    return this._getOption("hours");
  }
  set hours(value) {
    this._setOption("hours", value);
  }
  get milliseconds() {
    return this._getOption("milliseconds");
  }
  set milliseconds(value) {
    this._setOption("milliseconds", value);
  }
  get minutes() {
    return this._getOption("minutes");
  }
  set minutes(value) {
    this._setOption("minutes", value);
  }
  get months() {
    return this._getOption("months");
  }
  set months(value) {
    this._setOption("months", value);
  }
  get quarters() {
    return this._getOption("quarters");
  }
  set quarters(value) {
    this._setOption("quarters", value);
  }
  get seconds() {
    return this._getOption("seconds");
  }
  set seconds(value) {
    this._setOption("seconds", value);
  }
  get weeks() {
    return this._getOption("weeks");
  }
  set weeks(value) {
    this._setOption("weeks", value);
  }
  get years() {
    return this._getOption("years");
  }
  set years(value) {
    this._setOption("years", value);
  }
  get _optionPath() {
    return "minRange";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoMinRangeComponent.ɵfac = function DxoMinRangeComponent_Factory(t) {
  return new (t || DxoMinRangeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoMinRangeComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoMinRangeComponent, selectors: [["dxo-min-range"]], inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoMinRangeComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinRangeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-min-range",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { days: [{
    type: Input
  }], hours: [{
    type: Input
  }], milliseconds: [{
    type: Input
  }], minutes: [{
    type: Input
  }], months: [{
    type: Input
  }], quarters: [{
    type: Input
  }], seconds: [{
    type: Input
  }], weeks: [{
    type: Input
  }], years: [{
    type: Input
  }] });
})();
var DxoMinRangeModule = class {
};
DxoMinRangeModule.ɵfac = function DxoMinRangeModule_Factory(t) {
  return new (t || DxoMinRangeModule)();
};
DxoMinRangeModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoMinRangeModule });
DxoMinRangeModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinRangeModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoMinRangeComponent
      ],
      exports: [
        DxoMinRangeComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoMinRangeModule, { declarations: [DxoMinRangeComponent], exports: [DxoMinRangeComponent] });
})();
var DxoMinVisualRangeLengthComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get days() {
    return this._getOption("days");
  }
  set days(value) {
    this._setOption("days", value);
  }
  get hours() {
    return this._getOption("hours");
  }
  set hours(value) {
    this._setOption("hours", value);
  }
  get milliseconds() {
    return this._getOption("milliseconds");
  }
  set milliseconds(value) {
    this._setOption("milliseconds", value);
  }
  get minutes() {
    return this._getOption("minutes");
  }
  set minutes(value) {
    this._setOption("minutes", value);
  }
  get months() {
    return this._getOption("months");
  }
  set months(value) {
    this._setOption("months", value);
  }
  get quarters() {
    return this._getOption("quarters");
  }
  set quarters(value) {
    this._setOption("quarters", value);
  }
  get seconds() {
    return this._getOption("seconds");
  }
  set seconds(value) {
    this._setOption("seconds", value);
  }
  get weeks() {
    return this._getOption("weeks");
  }
  set weeks(value) {
    this._setOption("weeks", value);
  }
  get years() {
    return this._getOption("years");
  }
  set years(value) {
    this._setOption("years", value);
  }
  get _optionPath() {
    return "minVisualRangeLength";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoMinVisualRangeLengthComponent.ɵfac = function DxoMinVisualRangeLengthComponent_Factory(t) {
  return new (t || DxoMinVisualRangeLengthComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoMinVisualRangeLengthComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoMinVisualRangeLengthComponent, selectors: [["dxo-min-visual-range-length"]], inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoMinVisualRangeLengthComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinVisualRangeLengthComponent, [{
    type: Component,
    args: [{
      selector: "dxo-min-visual-range-length",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { days: [{
    type: Input
  }], hours: [{
    type: Input
  }], milliseconds: [{
    type: Input
  }], minutes: [{
    type: Input
  }], months: [{
    type: Input
  }], quarters: [{
    type: Input
  }], seconds: [{
    type: Input
  }], weeks: [{
    type: Input
  }], years: [{
    type: Input
  }] });
})();
var DxoMinVisualRangeLengthModule = class {
};
DxoMinVisualRangeLengthModule.ɵfac = function DxoMinVisualRangeLengthModule_Factory(t) {
  return new (t || DxoMinVisualRangeLengthModule)();
};
DxoMinVisualRangeLengthModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoMinVisualRangeLengthModule });
DxoMinVisualRangeLengthModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinVisualRangeLengthModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoMinVisualRangeLengthComponent
      ],
      exports: [
        DxoMinVisualRangeLengthComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoMinVisualRangeLengthModule, { declarations: [DxoMinVisualRangeLengthComponent], exports: [DxoMinVisualRangeLengthComponent] });
})();
var DxoMinorGridComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "minorGrid";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoMinorGridComponent.ɵfac = function DxoMinorGridComponent_Factory(t) {
  return new (t || DxoMinorGridComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoMinorGridComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoMinorGridComponent, selectors: [["dxo-minor-grid"]], inputs: { color: "color", opacity: "opacity", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoMinorGridComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinorGridComponent, [{
    type: Component,
    args: [{
      selector: "dxo-minor-grid",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], opacity: [{
    type: Input
  }], visible: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoMinorGridModule = class {
};
DxoMinorGridModule.ɵfac = function DxoMinorGridModule_Factory(t) {
  return new (t || DxoMinorGridModule)();
};
DxoMinorGridModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoMinorGridModule });
DxoMinorGridModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinorGridModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoMinorGridComponent
      ],
      exports: [
        DxoMinorGridComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoMinorGridModule, { declarations: [DxoMinorGridComponent], exports: [DxoMinorGridComponent] });
})();
var DxoMinorTickIntervalComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get days() {
    return this._getOption("days");
  }
  set days(value) {
    this._setOption("days", value);
  }
  get hours() {
    return this._getOption("hours");
  }
  set hours(value) {
    this._setOption("hours", value);
  }
  get milliseconds() {
    return this._getOption("milliseconds");
  }
  set milliseconds(value) {
    this._setOption("milliseconds", value);
  }
  get minutes() {
    return this._getOption("minutes");
  }
  set minutes(value) {
    this._setOption("minutes", value);
  }
  get months() {
    return this._getOption("months");
  }
  set months(value) {
    this._setOption("months", value);
  }
  get quarters() {
    return this._getOption("quarters");
  }
  set quarters(value) {
    this._setOption("quarters", value);
  }
  get seconds() {
    return this._getOption("seconds");
  }
  set seconds(value) {
    this._setOption("seconds", value);
  }
  get weeks() {
    return this._getOption("weeks");
  }
  set weeks(value) {
    this._setOption("weeks", value);
  }
  get years() {
    return this._getOption("years");
  }
  set years(value) {
    this._setOption("years", value);
  }
  get _optionPath() {
    return "minorTickInterval";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoMinorTickIntervalComponent.ɵfac = function DxoMinorTickIntervalComponent_Factory(t) {
  return new (t || DxoMinorTickIntervalComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoMinorTickIntervalComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoMinorTickIntervalComponent, selectors: [["dxo-minor-tick-interval"]], inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoMinorTickIntervalComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinorTickIntervalComponent, [{
    type: Component,
    args: [{
      selector: "dxo-minor-tick-interval",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { days: [{
    type: Input
  }], hours: [{
    type: Input
  }], milliseconds: [{
    type: Input
  }], minutes: [{
    type: Input
  }], months: [{
    type: Input
  }], quarters: [{
    type: Input
  }], seconds: [{
    type: Input
  }], weeks: [{
    type: Input
  }], years: [{
    type: Input
  }] });
})();
var DxoMinorTickIntervalModule = class {
};
DxoMinorTickIntervalModule.ɵfac = function DxoMinorTickIntervalModule_Factory(t) {
  return new (t || DxoMinorTickIntervalModule)();
};
DxoMinorTickIntervalModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoMinorTickIntervalModule });
DxoMinorTickIntervalModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinorTickIntervalModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoMinorTickIntervalComponent
      ],
      exports: [
        DxoMinorTickIntervalComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoMinorTickIntervalModule, { declarations: [DxoMinorTickIntervalComponent], exports: [DxoMinorTickIntervalComponent] });
})();
var DxoMinorTickComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get length() {
    return this._getOption("length");
  }
  set length(value) {
    this._setOption("length", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get shift() {
    return this._getOption("shift");
  }
  set shift(value) {
    this._setOption("shift", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "minorTick";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoMinorTickComponent.ɵfac = function DxoMinorTickComponent_Factory(t) {
  return new (t || DxoMinorTickComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoMinorTickComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoMinorTickComponent, selectors: [["dxo-minor-tick"]], inputs: { color: "color", length: "length", opacity: "opacity", shift: "shift", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoMinorTickComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinorTickComponent, [{
    type: Component,
    args: [{
      selector: "dxo-minor-tick",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], length: [{
    type: Input
  }], opacity: [{
    type: Input
  }], shift: [{
    type: Input
  }], visible: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoMinorTickModule = class {
};
DxoMinorTickModule.ɵfac = function DxoMinorTickModule_Factory(t) {
  return new (t || DxoMinorTickModule)();
};
DxoMinorTickModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoMinorTickModule });
DxoMinorTickModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMinorTickModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoMinorTickComponent
      ],
      exports: [
        DxoMinorTickComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoMinorTickModule, { declarations: [DxoMinorTickComponent], exports: [DxoMinorTickComponent] });
})();
var DxoMyComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get _optionPath() {
    return "my";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoMyComponent.ɵfac = function DxoMyComponent_Factory(t) {
  return new (t || DxoMyComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoMyComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoMyComponent, selectors: [["dxo-my"]], inputs: { x: "x", y: "y" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoMyComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMyComponent, [{
    type: Component,
    args: [{
      selector: "dxo-my",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { x: [{
    type: Input
  }], y: [{
    type: Input
  }] });
})();
var DxoMyModule = class {
};
DxoMyModule.ɵfac = function DxoMyModule_Factory(t) {
  return new (t || DxoMyModule)();
};
DxoMyModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoMyModule });
DxoMyModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoMyModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoMyComponent
      ],
      exports: [
        DxoMyComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoMyModule, { declarations: [DxoMyComponent], exports: [DxoMyComponent] });
})();
var DxoNodeComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get padding() {
    return this._getOption("padding");
  }
  set padding(value) {
    this._setOption("padding", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "node";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoNodeComponent.ɵfac = function DxoNodeComponent_Factory(t) {
  return new (t || DxoNodeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoNodeComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoNodeComponent, selectors: [["dxo-node"]], inputs: { border: "border", color: "color", hoverStyle: "hoverStyle", opacity: "opacity", padding: "padding", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoNodeComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoNodeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-node",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { border: [{
    type: Input
  }], color: [{
    type: Input
  }], hoverStyle: [{
    type: Input
  }], opacity: [{
    type: Input
  }], padding: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoNodeModule = class {
};
DxoNodeModule.ɵfac = function DxoNodeModule_Factory(t) {
  return new (t || DxoNodeModule)();
};
DxoNodeModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoNodeModule });
DxoNodeModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoNodeModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoNodeComponent
      ],
      exports: [
        DxoNodeComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoNodeModule, { declarations: [DxoNodeComponent], exports: [DxoNodeComponent] });
})();
var DxoNodesComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get autoLayout() {
    return this._getOption("autoLayout");
  }
  set autoLayout(value) {
    this._setOption("autoLayout", value);
  }
  get autoSizeEnabled() {
    return this._getOption("autoSizeEnabled");
  }
  set autoSizeEnabled(value) {
    this._setOption("autoSizeEnabled", value);
  }
  get containerChildrenExpr() {
    return this._getOption("containerChildrenExpr");
  }
  set containerChildrenExpr(value) {
    this._setOption("containerChildrenExpr", value);
  }
  get containerKeyExpr() {
    return this._getOption("containerKeyExpr");
  }
  set containerKeyExpr(value) {
    this._setOption("containerKeyExpr", value);
  }
  get customDataExpr() {
    return this._getOption("customDataExpr");
  }
  set customDataExpr(value) {
    this._setOption("customDataExpr", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get heightExpr() {
    return this._getOption("heightExpr");
  }
  set heightExpr(value) {
    this._setOption("heightExpr", value);
  }
  get imageUrlExpr() {
    return this._getOption("imageUrlExpr");
  }
  set imageUrlExpr(value) {
    this._setOption("imageUrlExpr", value);
  }
  get itemsExpr() {
    return this._getOption("itemsExpr");
  }
  set itemsExpr(value) {
    this._setOption("itemsExpr", value);
  }
  get keyExpr() {
    return this._getOption("keyExpr");
  }
  set keyExpr(value) {
    this._setOption("keyExpr", value);
  }
  get leftExpr() {
    return this._getOption("leftExpr");
  }
  set leftExpr(value) {
    this._setOption("leftExpr", value);
  }
  get lockedExpr() {
    return this._getOption("lockedExpr");
  }
  set lockedExpr(value) {
    this._setOption("lockedExpr", value);
  }
  get parentKeyExpr() {
    return this._getOption("parentKeyExpr");
  }
  set parentKeyExpr(value) {
    this._setOption("parentKeyExpr", value);
  }
  get styleExpr() {
    return this._getOption("styleExpr");
  }
  set styleExpr(value) {
    this._setOption("styleExpr", value);
  }
  get textExpr() {
    return this._getOption("textExpr");
  }
  set textExpr(value) {
    this._setOption("textExpr", value);
  }
  get textStyleExpr() {
    return this._getOption("textStyleExpr");
  }
  set textStyleExpr(value) {
    this._setOption("textStyleExpr", value);
  }
  get topExpr() {
    return this._getOption("topExpr");
  }
  set topExpr(value) {
    this._setOption("topExpr", value);
  }
  get typeExpr() {
    return this._getOption("typeExpr");
  }
  set typeExpr(value) {
    this._setOption("typeExpr", value);
  }
  get widthExpr() {
    return this._getOption("widthExpr");
  }
  set widthExpr(value) {
    this._setOption("widthExpr", value);
  }
  get zIndexExpr() {
    return this._getOption("zIndexExpr");
  }
  set zIndexExpr(value) {
    this._setOption("zIndexExpr", value);
  }
  get _optionPath() {
    return "nodes";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoNodesComponent.ɵfac = function DxoNodesComponent_Factory(t) {
  return new (t || DxoNodesComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoNodesComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoNodesComponent, selectors: [["dxo-nodes"]], inputs: { autoLayout: "autoLayout", autoSizeEnabled: "autoSizeEnabled", containerChildrenExpr: "containerChildrenExpr", containerKeyExpr: "containerKeyExpr", customDataExpr: "customDataExpr", dataSource: "dataSource", heightExpr: "heightExpr", imageUrlExpr: "imageUrlExpr", itemsExpr: "itemsExpr", keyExpr: "keyExpr", leftExpr: "leftExpr", lockedExpr: "lockedExpr", parentKeyExpr: "parentKeyExpr", styleExpr: "styleExpr", textExpr: "textExpr", textStyleExpr: "textStyleExpr", topExpr: "topExpr", typeExpr: "typeExpr", widthExpr: "widthExpr", zIndexExpr: "zIndexExpr" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoNodesComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoNodesComponent, [{
    type: Component,
    args: [{
      selector: "dxo-nodes",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { autoLayout: [{
    type: Input
  }], autoSizeEnabled: [{
    type: Input
  }], containerChildrenExpr: [{
    type: Input
  }], containerKeyExpr: [{
    type: Input
  }], customDataExpr: [{
    type: Input
  }], dataSource: [{
    type: Input
  }], heightExpr: [{
    type: Input
  }], imageUrlExpr: [{
    type: Input
  }], itemsExpr: [{
    type: Input
  }], keyExpr: [{
    type: Input
  }], leftExpr: [{
    type: Input
  }], lockedExpr: [{
    type: Input
  }], parentKeyExpr: [{
    type: Input
  }], styleExpr: [{
    type: Input
  }], textExpr: [{
    type: Input
  }], textStyleExpr: [{
    type: Input
  }], topExpr: [{
    type: Input
  }], typeExpr: [{
    type: Input
  }], widthExpr: [{
    type: Input
  }], zIndexExpr: [{
    type: Input
  }] });
})();
var DxoNodesModule = class {
};
DxoNodesModule.ɵfac = function DxoNodesModule_Factory(t) {
  return new (t || DxoNodesModule)();
};
DxoNodesModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoNodesModule });
DxoNodesModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoNodesModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoNodesComponent
      ],
      exports: [
        DxoNodesComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoNodesModule, { declarations: [DxoNodesComponent], exports: [DxoNodesComponent] });
})();
var DxoNotificationsComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get showPanel() {
    return this._getOption("showPanel");
  }
  set showPanel(value) {
    this._setOption("showPanel", value);
  }
  get showPopup() {
    return this._getOption("showPopup");
  }
  set showPopup(value) {
    this._setOption("showPopup", value);
  }
  get _optionPath() {
    return "notifications";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoNotificationsComponent.ɵfac = function DxoNotificationsComponent_Factory(t) {
  return new (t || DxoNotificationsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoNotificationsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoNotificationsComponent, selectors: [["dxo-notifications"]], inputs: { showPanel: "showPanel", showPopup: "showPopup" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoNotificationsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoNotificationsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-notifications",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { showPanel: [{
    type: Input
  }], showPopup: [{
    type: Input
  }] });
})();
var DxoNotificationsModule = class {
};
DxoNotificationsModule.ɵfac = function DxoNotificationsModule_Factory(t) {
  return new (t || DxoNotificationsModule)();
};
DxoNotificationsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoNotificationsModule });
DxoNotificationsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoNotificationsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoNotificationsComponent
      ],
      exports: [
        DxoNotificationsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoNotificationsModule, { declarations: [DxoNotificationsComponent], exports: [DxoNotificationsComponent] });
})();
var DxoOffsetComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get x() {
    return this._getOption("x");
  }
  set x(value) {
    this._setOption("x", value);
  }
  get y() {
    return this._getOption("y");
  }
  set y(value) {
    this._setOption("y", value);
  }
  get _optionPath() {
    return "offset";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoOffsetComponent.ɵfac = function DxoOffsetComponent_Factory(t) {
  return new (t || DxoOffsetComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoOffsetComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoOffsetComponent, selectors: [["dxo-offset"]], inputs: { x: "x", y: "y" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoOffsetComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoOffsetComponent, [{
    type: Component,
    args: [{
      selector: "dxo-offset",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { x: [{
    type: Input
  }], y: [{
    type: Input
  }] });
})();
var DxoOffsetModule = class {
};
DxoOffsetModule.ɵfac = function DxoOffsetModule_Factory(t) {
  return new (t || DxoOffsetModule)();
};
DxoOffsetModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoOffsetModule });
DxoOffsetModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoOffsetModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoOffsetComponent
      ],
      exports: [
        DxoOffsetComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoOffsetModule, { declarations: [DxoOffsetComponent], exports: [DxoOffsetComponent] });
})();
var DxoGanttFilterRowOperationDescriptions = class extends NestedOption {
  get between() {
    return this._getOption("between");
  }
  set between(value) {
    this._setOption("between", value);
  }
  get contains() {
    return this._getOption("contains");
  }
  set contains(value) {
    this._setOption("contains", value);
  }
  get endsWith() {
    return this._getOption("endsWith");
  }
  set endsWith(value) {
    this._setOption("endsWith", value);
  }
  get equal() {
    return this._getOption("equal");
  }
  set equal(value) {
    this._setOption("equal", value);
  }
  get greaterThan() {
    return this._getOption("greaterThan");
  }
  set greaterThan(value) {
    this._setOption("greaterThan", value);
  }
  get greaterThanOrEqual() {
    return this._getOption("greaterThanOrEqual");
  }
  set greaterThanOrEqual(value) {
    this._setOption("greaterThanOrEqual", value);
  }
  get lessThan() {
    return this._getOption("lessThan");
  }
  set lessThan(value) {
    this._setOption("lessThan", value);
  }
  get lessThanOrEqual() {
    return this._getOption("lessThanOrEqual");
  }
  set lessThanOrEqual(value) {
    this._setOption("lessThanOrEqual", value);
  }
  get notContains() {
    return this._getOption("notContains");
  }
  set notContains(value) {
    this._setOption("notContains", value);
  }
  get notEqual() {
    return this._getOption("notEqual");
  }
  set notEqual(value) {
    this._setOption("notEqual", value);
  }
  get startsWith() {
    return this._getOption("startsWith");
  }
  set startsWith(value) {
    this._setOption("startsWith", value);
  }
};
DxoGanttFilterRowOperationDescriptions.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoGanttFilterRowOperationDescriptions_BaseFactory;
  return function DxoGanttFilterRowOperationDescriptions_Factory(t) {
    return (ɵDxoGanttFilterRowOperationDescriptions_BaseFactory || (ɵDxoGanttFilterRowOperationDescriptions_BaseFactory = ɵɵgetInheritedFactory(DxoGanttFilterRowOperationDescriptions)))(t || DxoGanttFilterRowOperationDescriptions);
  };
}();
DxoGanttFilterRowOperationDescriptions.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoGanttFilterRowOperationDescriptions, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoGanttFilterRowOperationDescriptions_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGanttFilterRowOperationDescriptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoOperationDescriptionsComponent = class extends DxoGanttFilterRowOperationDescriptions {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "operationDescriptions";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoOperationDescriptionsComponent.ɵfac = function DxoOperationDescriptionsComponent_Factory(t) {
  return new (t || DxoOperationDescriptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoOperationDescriptionsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoOperationDescriptionsComponent, selectors: [["dxo-operation-descriptions"]], inputs: { between: "between", contains: "contains", endsWith: "endsWith", equal: "equal", greaterThan: "greaterThan", greaterThanOrEqual: "greaterThanOrEqual", lessThan: "lessThan", lessThanOrEqual: "lessThanOrEqual", notContains: "notContains", notEqual: "notEqual", startsWith: "startsWith" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoOperationDescriptionsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoOperationDescriptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-operation-descriptions",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "between",
        "contains",
        "endsWith",
        "equal",
        "greaterThan",
        "greaterThanOrEqual",
        "lessThan",
        "lessThanOrEqual",
        "notContains",
        "notEqual",
        "startsWith"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoOperationDescriptionsModule = class {
};
DxoOperationDescriptionsModule.ɵfac = function DxoOperationDescriptionsModule_Factory(t) {
  return new (t || DxoOperationDescriptionsModule)();
};
DxoOperationDescriptionsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoOperationDescriptionsModule });
DxoOperationDescriptionsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoOperationDescriptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoOperationDescriptionsComponent
      ],
      exports: [
        DxoOperationDescriptionsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoOperationDescriptionsModule, { declarations: [DxoOperationDescriptionsComponent], exports: [DxoOperationDescriptionsComponent] });
})();
var DxoOptionsComponent = class extends DxoButtonOptions {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "options";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoOptionsComponent.ɵfac = function DxoOptionsComponent_Factory(t) {
  return new (t || DxoOptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoOptionsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoOptionsComponent, selectors: [["dxo-options"]], inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", icon: "icon", onClick: "onClick", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", rtlEnabled: "rtlEnabled", stylingMode: "stylingMode", tabIndex: "tabIndex", template: "template", text: "text", type: "type", useSubmitBehavior: "useSubmitBehavior", validationGroup: "validationGroup", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoOptionsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoOptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-options",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "accessKey",
        "activeStateEnabled",
        "disabled",
        "elementAttr",
        "focusStateEnabled",
        "height",
        "hint",
        "hoverStateEnabled",
        "icon",
        "onClick",
        "onContentReady",
        "onDisposing",
        "onInitialized",
        "onOptionChanged",
        "rtlEnabled",
        "stylingMode",
        "tabIndex",
        "template",
        "text",
        "type",
        "useSubmitBehavior",
        "validationGroup",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoOptionsModule = class {
};
DxoOptionsModule.ɵfac = function DxoOptionsModule_Factory(t) {
  return new (t || DxoOptionsModule)();
};
DxoOptionsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoOptionsModule });
DxoOptionsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoOptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoOptionsComponent
      ],
      exports: [
        DxoOptionsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoOptionsModule, { declarations: [DxoOptionsComponent], exports: [DxoOptionsComponent] });
})();
var DxoPageSizeComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "heightChange" },
      { emit: "widthChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "pageSize";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoPageSizeComponent.ɵfac = function DxoPageSizeComponent_Factory(t) {
  return new (t || DxoPageSizeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoPageSizeComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoPageSizeComponent, selectors: [["dxo-page-size"]], contentQueries: function DxoPageSizeComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
  }
}, inputs: { height: "height", items: "items", width: "width" }, outputs: { heightChange: "heightChange", widthChange: "widthChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoPageSizeComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPageSizeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-page-size",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { height: [{
    type: Input
  }], items: [{
    type: Input
  }], width: [{
    type: Input
  }], heightChange: [{
    type: Output
  }], widthChange: [{
    type: Output
  }], itemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiItemComponent)]
  }] });
})();
var DxoPageSizeModule = class {
};
DxoPageSizeModule.ɵfac = function DxoPageSizeModule_Factory(t) {
  return new (t || DxoPageSizeModule)();
};
DxoPageSizeModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoPageSizeModule });
DxoPageSizeModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPageSizeModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoPageSizeComponent
      ],
      exports: [
        DxoPageSizeComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoPageSizeModule, { declarations: [DxoPageSizeComponent], exports: [DxoPageSizeComponent] });
})();
var DxoPagerComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get allowedPageSizes() {
    return this._getOption("allowedPageSizes");
  }
  set allowedPageSizes(value) {
    this._setOption("allowedPageSizes", value);
  }
  get displayMode() {
    return this._getOption("displayMode");
  }
  set displayMode(value) {
    this._setOption("displayMode", value);
  }
  get infoText() {
    return this._getOption("infoText");
  }
  set infoText(value) {
    this._setOption("infoText", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get showInfo() {
    return this._getOption("showInfo");
  }
  set showInfo(value) {
    this._setOption("showInfo", value);
  }
  get showNavigationButtons() {
    return this._getOption("showNavigationButtons");
  }
  set showNavigationButtons(value) {
    this._setOption("showNavigationButtons", value);
  }
  get showPageSizeSelector() {
    return this._getOption("showPageSizeSelector");
  }
  set showPageSizeSelector(value) {
    this._setOption("showPageSizeSelector", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "pager";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoPagerComponent.ɵfac = function DxoPagerComponent_Factory(t) {
  return new (t || DxoPagerComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoPagerComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoPagerComponent, selectors: [["dxo-pager"]], inputs: { allowedPageSizes: "allowedPageSizes", displayMode: "displayMode", infoText: "infoText", label: "label", showInfo: "showInfo", showNavigationButtons: "showNavigationButtons", showPageSizeSelector: "showPageSizeSelector", visible: "visible" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoPagerComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPagerComponent, [{
    type: Component,
    args: [{
      selector: "dxo-pager",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { allowedPageSizes: [{
    type: Input
  }], displayMode: [{
    type: Input
  }], infoText: [{
    type: Input
  }], label: [{
    type: Input
  }], showInfo: [{
    type: Input
  }], showNavigationButtons: [{
    type: Input
  }], showPageSizeSelector: [{
    type: Input
  }], visible: [{
    type: Input
  }] });
})();
var DxoPagerModule = class {
};
DxoPagerModule.ɵfac = function DxoPagerModule_Factory(t) {
  return new (t || DxoPagerModule)();
};
DxoPagerModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoPagerModule });
DxoPagerModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPagerModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoPagerComponent
      ],
      exports: [
        DxoPagerComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoPagerModule, { declarations: [DxoPagerComponent], exports: [DxoPagerComponent] });
})();
var DxoPagingComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "pageIndexChange" },
      { emit: "pageSizeChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get pageIndex() {
    return this._getOption("pageIndex");
  }
  set pageIndex(value) {
    this._setOption("pageIndex", value);
  }
  get pageSize() {
    return this._getOption("pageSize");
  }
  set pageSize(value) {
    this._setOption("pageSize", value);
  }
  get _optionPath() {
    return "paging";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoPagingComponent.ɵfac = function DxoPagingComponent_Factory(t) {
  return new (t || DxoPagingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoPagingComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoPagingComponent, selectors: [["dxo-paging"]], inputs: { enabled: "enabled", pageIndex: "pageIndex", pageSize: "pageSize" }, outputs: { pageIndexChange: "pageIndexChange", pageSizeChange: "pageSizeChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoPagingComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPagingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-paging",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { enabled: [{
    type: Input
  }], pageIndex: [{
    type: Input
  }], pageSize: [{
    type: Input
  }], pageIndexChange: [{
    type: Output
  }], pageSizeChange: [{
    type: Output
  }] });
})();
var DxoPagingModule = class {
};
DxoPagingModule.ɵfac = function DxoPagingModule_Factory(t) {
  return new (t || DxoPagingModule)();
};
DxoPagingModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoPagingModule });
DxoPagingModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPagingModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoPagingComponent
      ],
      exports: [
        DxoPagingComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoPagingModule, { declarations: [DxoPagingComponent], exports: [DxoPagingComponent] });
})();
var DxiPaneComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get _optionPath() {
    return "panes";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiPaneComponent.ɵfac = function DxiPaneComponent_Factory(t) {
  return new (t || DxiPaneComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiPaneComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiPaneComponent, selectors: [["dxi-pane"]], inputs: { backgroundColor: "backgroundColor", border: "border", height: "height", name: "name" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiPaneComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiPaneComponent, [{
    type: Component,
    args: [{
      selector: "dxi-pane",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { backgroundColor: [{
    type: Input
  }], border: [{
    type: Input
  }], height: [{
    type: Input
  }], name: [{
    type: Input
  }] });
})();
var DxiPaneModule = class {
};
DxiPaneModule.ɵfac = function DxiPaneModule_Factory(t) {
  return new (t || DxiPaneModule)();
};
DxiPaneModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiPaneModule });
DxiPaneModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiPaneModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiPaneComponent
      ],
      exports: [
        DxiPaneComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiPaneModule, { declarations: [DxiPaneComponent], exports: [DxiPaneComponent] });
})();
var DxoPermissionsComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get copy() {
    return this._getOption("copy");
  }
  set copy(value) {
    this._setOption("copy", value);
  }
  get create() {
    return this._getOption("create");
  }
  set create(value) {
    this._setOption("create", value);
  }
  get delete() {
    return this._getOption("delete");
  }
  set delete(value) {
    this._setOption("delete", value);
  }
  get download() {
    return this._getOption("download");
  }
  set download(value) {
    this._setOption("download", value);
  }
  get move() {
    return this._getOption("move");
  }
  set move(value) {
    this._setOption("move", value);
  }
  get rename() {
    return this._getOption("rename");
  }
  set rename(value) {
    this._setOption("rename", value);
  }
  get upload() {
    return this._getOption("upload");
  }
  set upload(value) {
    this._setOption("upload", value);
  }
  get _optionPath() {
    return "permissions";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoPermissionsComponent.ɵfac = function DxoPermissionsComponent_Factory(t) {
  return new (t || DxoPermissionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoPermissionsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoPermissionsComponent, selectors: [["dxo-permissions"]], inputs: { copy: "copy", create: "create", delete: "delete", download: "download", move: "move", rename: "rename", upload: "upload" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoPermissionsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPermissionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-permissions",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { copy: [{
    type: Input
  }], create: [{
    type: Input
  }], delete: [{
    type: Input
  }], download: [{
    type: Input
  }], move: [{
    type: Input
  }], rename: [{
    type: Input
  }], upload: [{
    type: Input
  }] });
})();
var DxoPermissionsModule = class {
};
DxoPermissionsModule.ɵfac = function DxoPermissionsModule_Factory(t) {
  return new (t || DxoPermissionsModule)();
};
DxoPermissionsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoPermissionsModule });
DxoPermissionsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPermissionsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoPermissionsComponent
      ],
      exports: [
        DxoPermissionsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoPermissionsModule, { declarations: [DxoPermissionsComponent], exports: [DxoPermissionsComponent] });
})();
var DxoPointComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get hoverMode() {
    return this._getOption("hoverMode");
  }
  set hoverMode(value) {
    this._setOption("hoverMode", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get image() {
    return this._getOption("image");
  }
  set image(value) {
    this._setOption("image", value);
  }
  get selectionMode() {
    return this._getOption("selectionMode");
  }
  set selectionMode(value) {
    this._setOption("selectionMode", value);
  }
  get selectionStyle() {
    return this._getOption("selectionStyle");
  }
  set selectionStyle(value) {
    this._setOption("selectionStyle", value);
  }
  get size() {
    return this._getOption("size");
  }
  set size(value) {
    this._setOption("size", value);
  }
  get symbol() {
    return this._getOption("symbol");
  }
  set symbol(value) {
    this._setOption("symbol", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "point";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoPointComponent.ɵfac = function DxoPointComponent_Factory(t) {
  return new (t || DxoPointComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoPointComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoPointComponent, selectors: [["dxo-point"]], inputs: { border: "border", color: "color", hoverMode: "hoverMode", hoverStyle: "hoverStyle", image: "image", selectionMode: "selectionMode", selectionStyle: "selectionStyle", size: "size", symbol: "symbol", visible: "visible" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoPointComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPointComponent, [{
    type: Component,
    args: [{
      selector: "dxo-point",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { border: [{
    type: Input
  }], color: [{
    type: Input
  }], hoverMode: [{
    type: Input
  }], hoverStyle: [{
    type: Input
  }], image: [{
    type: Input
  }], selectionMode: [{
    type: Input
  }], selectionStyle: [{
    type: Input
  }], size: [{
    type: Input
  }], symbol: [{
    type: Input
  }], visible: [{
    type: Input
  }] });
})();
var DxoPointModule = class {
};
DxoPointModule.ɵfac = function DxoPointModule_Factory(t) {
  return new (t || DxoPointModule)();
};
DxoPointModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoPointModule });
DxoPointModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPointModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoPointComponent
      ],
      exports: [
        DxoPointComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoPointModule, { declarations: [DxoPointComponent], exports: [DxoPointComponent] });
})();
var DxoPopupComponent = class extends DxoPopupOptions {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "heightChange" },
      { emit: "positionChange" },
      { emit: "visibleChange" },
      { emit: "widthChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "popup";
  }
  get toolbarItemsChildren() {
    return this._getOption("toolbarItems");
  }
  set toolbarItemsChildren(value) {
    this.setChildren("toolbarItems", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoPopupComponent.ɵfac = function DxoPopupComponent_Factory(t) {
  return new (t || DxoPopupComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoPopupComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoPopupComponent, selectors: [["dxo-popup"]], contentQueries: function DxoPopupComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiToolbarItemComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.toolbarItemsChildren = _t);
  }
}, inputs: { accessKey: "accessKey", animation: "animation", closeOnOutsideClick: "closeOnOutsideClick", container: "container", contentTemplate: "contentTemplate", copyRootClassesToWrapper: "copyRootClassesToWrapper", deferRendering: "deferRendering", disabled: "disabled", dragAndResizeArea: "dragAndResizeArea", dragEnabled: "dragEnabled", dragOutsideBoundary: "dragOutsideBoundary", elementAttr: "elementAttr", enableBodyScroll: "enableBodyScroll", focusStateEnabled: "focusStateEnabled", fullScreen: "fullScreen", height: "height", hideOnOutsideClick: "hideOnOutsideClick", hideOnParentScroll: "hideOnParentScroll", hint: "hint", hoverStateEnabled: "hoverStateEnabled", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", onContentReady: "onContentReady", onDisposing: "onDisposing", onHidden: "onHidden", onHiding: "onHiding", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onResize: "onResize", onResizeEnd: "onResizeEnd", onResizeStart: "onResizeStart", onShowing: "onShowing", onShown: "onShown", onTitleRendered: "onTitleRendered", position: "position", resizeEnabled: "resizeEnabled", restorePosition: "restorePosition", rtlEnabled: "rtlEnabled", shading: "shading", shadingColor: "shadingColor", showCloseButton: "showCloseButton", showTitle: "showTitle", tabIndex: "tabIndex", title: "title", titleTemplate: "titleTemplate", toolbarItems: "toolbarItems", visible: "visible", width: "width", wrapperAttr: "wrapperAttr" }, outputs: { heightChange: "heightChange", positionChange: "positionChange", visibleChange: "visibleChange", widthChange: "widthChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoPopupComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPopupComponent, [{
    type: Component,
    args: [{
      selector: "dxo-popup",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "accessKey",
        "animation",
        "closeOnOutsideClick",
        "container",
        "contentTemplate",
        "copyRootClassesToWrapper",
        "deferRendering",
        "disabled",
        "dragAndResizeArea",
        "dragEnabled",
        "dragOutsideBoundary",
        "elementAttr",
        "enableBodyScroll",
        "focusStateEnabled",
        "fullScreen",
        "height",
        "hideOnOutsideClick",
        "hideOnParentScroll",
        "hint",
        "hoverStateEnabled",
        "maxHeight",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onContentReady",
        "onDisposing",
        "onHidden",
        "onHiding",
        "onInitialized",
        "onOptionChanged",
        "onResize",
        "onResizeEnd",
        "onResizeStart",
        "onShowing",
        "onShown",
        "onTitleRendered",
        "position",
        "resizeEnabled",
        "restorePosition",
        "rtlEnabled",
        "shading",
        "shadingColor",
        "showCloseButton",
        "showTitle",
        "tabIndex",
        "title",
        "titleTemplate",
        "toolbarItems",
        "visible",
        "width",
        "wrapperAttr"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { heightChange: [{
    type: Output
  }], positionChange: [{
    type: Output
  }], visibleChange: [{
    type: Output
  }], widthChange: [{
    type: Output
  }], toolbarItemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiToolbarItemComponent)]
  }] });
})();
var DxoPopupModule = class {
};
DxoPopupModule.ɵfac = function DxoPopupModule_Factory(t) {
  return new (t || DxoPopupModule)();
};
DxoPopupModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoPopupModule });
DxoPopupModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPopupModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoPopupComponent
      ],
      exports: [
        DxoPopupComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoPopupModule, { declarations: [DxoPopupComponent], exports: [DxoPopupComponent] });
})();
var DxoPositionConfig = class extends NestedOption {
  get at() {
    return this._getOption("at");
  }
  set at(value) {
    this._setOption("at", value);
  }
  get boundary() {
    return this._getOption("boundary");
  }
  set boundary(value) {
    this._setOption("boundary", value);
  }
  get boundaryOffset() {
    return this._getOption("boundaryOffset");
  }
  set boundaryOffset(value) {
    this._setOption("boundaryOffset", value);
  }
  get collision() {
    return this._getOption("collision");
  }
  set collision(value) {
    this._setOption("collision", value);
  }
  get my() {
    return this._getOption("my");
  }
  set my(value) {
    this._setOption("my", value);
  }
  get of() {
    return this._getOption("of");
  }
  set of(value) {
    this._setOption("of", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
};
DxoPositionConfig.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoPositionConfig_BaseFactory;
  return function DxoPositionConfig_Factory(t) {
    return (ɵDxoPositionConfig_BaseFactory || (ɵDxoPositionConfig_BaseFactory = ɵɵgetInheritedFactory(DxoPositionConfig)))(t || DxoPositionConfig);
  };
}();
DxoPositionConfig.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoPositionConfig, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoPositionConfig_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPositionConfig, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoPositionComponent = class extends DxoPositionConfig {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "position";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoPositionComponent.ɵfac = function DxoPositionComponent_Factory(t) {
  return new (t || DxoPositionComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoPositionComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoPositionComponent, selectors: [["dxo-position"]], inputs: { at: "at", boundary: "boundary", boundaryOffset: "boundaryOffset", collision: "collision", my: "my", of: "of", offset: "offset" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoPositionComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPositionComponent, [{
    type: Component,
    args: [{
      selector: "dxo-position",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "at",
        "boundary",
        "boundaryOffset",
        "collision",
        "my",
        "of",
        "offset"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoPositionModule = class {
};
DxoPositionModule.ɵfac = function DxoPositionModule_Factory(t) {
  return new (t || DxoPositionModule)();
};
DxoPositionModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoPositionModule });
DxoPositionModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPositionModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoPositionComponent
      ],
      exports: [
        DxoPositionComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoPositionModule, { declarations: [DxoPositionComponent], exports: [DxoPositionComponent] });
})();
var DxoVectorMapProjectionConfig = class extends NestedOption {
  get aspectRatio() {
    return this._getOption("aspectRatio");
  }
  set aspectRatio(value) {
    this._setOption("aspectRatio", value);
  }
  get from() {
    return this._getOption("from");
  }
  set from(value) {
    this._setOption("from", value);
  }
  get to() {
    return this._getOption("to");
  }
  set to(value) {
    this._setOption("to", value);
  }
};
DxoVectorMapProjectionConfig.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoVectorMapProjectionConfig_BaseFactory;
  return function DxoVectorMapProjectionConfig_Factory(t) {
    return (ɵDxoVectorMapProjectionConfig_BaseFactory || (ɵDxoVectorMapProjectionConfig_BaseFactory = ɵɵgetInheritedFactory(DxoVectorMapProjectionConfig)))(t || DxoVectorMapProjectionConfig);
  };
}();
DxoVectorMapProjectionConfig.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoVectorMapProjectionConfig, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoVectorMapProjectionConfig_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoVectorMapProjectionConfig, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoProjectionComponent = class extends DxoVectorMapProjectionConfig {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "projection";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoProjectionComponent.ɵfac = function DxoProjectionComponent_Factory(t) {
  return new (t || DxoProjectionComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoProjectionComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoProjectionComponent, selectors: [["dxo-projection"]], inputs: { aspectRatio: "aspectRatio", from: "from", to: "to" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoProjectionComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoProjectionComponent, [{
    type: Component,
    args: [{
      selector: "dxo-projection",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aspectRatio",
        "from",
        "to"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoProjectionModule = class {
};
DxoProjectionModule.ɵfac = function DxoProjectionModule_Factory(t) {
  return new (t || DxoProjectionModule)();
};
DxoProjectionModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoProjectionModule });
DxoProjectionModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoProjectionModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoProjectionComponent
      ],
      exports: [
        DxoProjectionComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoProjectionModule, { declarations: [DxoProjectionComponent], exports: [DxoProjectionComponent] });
})();
var DxoPropertiesPanelComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get tabs() {
    return this._getOption("tabs");
  }
  set tabs(value) {
    this._setOption("tabs", value);
  }
  get visibility() {
    return this._getOption("visibility");
  }
  set visibility(value) {
    this._setOption("visibility", value);
  }
  get _optionPath() {
    return "propertiesPanel";
  }
  get tabsChildren() {
    return this._getOption("tabs");
  }
  set tabsChildren(value) {
    this.setChildren("tabs", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoPropertiesPanelComponent.ɵfac = function DxoPropertiesPanelComponent_Factory(t) {
  return new (t || DxoPropertiesPanelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoPropertiesPanelComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoPropertiesPanelComponent, selectors: [["dxo-properties-panel"]], contentQueries: function DxoPropertiesPanelComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiTabComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.tabsChildren = _t);
  }
}, inputs: { tabs: "tabs", visibility: "visibility" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoPropertiesPanelComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPropertiesPanelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-properties-panel",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { tabs: [{
    type: Input
  }], visibility: [{
    type: Input
  }], tabsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiTabComponent)]
  }] });
})();
var DxoPropertiesPanelModule = class {
};
DxoPropertiesPanelModule.ɵfac = function DxoPropertiesPanelModule_Factory(t) {
  return new (t || DxoPropertiesPanelModule)();
};
DxoPropertiesPanelModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoPropertiesPanelModule });
DxoPropertiesPanelModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoPropertiesPanelModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoPropertiesPanelComponent
      ],
      exports: [
        DxoPropertiesPanelComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoPropertiesPanelModule, { declarations: [DxoPropertiesPanelComponent], exports: [DxoPropertiesPanelComponent] });
})();
var DxiRangeComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get endValue() {
    return this._getOption("endValue");
  }
  set endValue(value) {
    this._setOption("endValue", value);
  }
  get startValue() {
    return this._getOption("startValue");
  }
  set startValue(value) {
    this._setOption("startValue", value);
  }
  get _optionPath() {
    return "ranges";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiRangeComponent.ɵfac = function DxiRangeComponent_Factory(t) {
  return new (t || DxiRangeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiRangeComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiRangeComponent, selectors: [["dxi-range"]], inputs: { color: "color", endValue: "endValue", startValue: "startValue" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiRangeComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiRangeComponent, [{
    type: Component,
    args: [{
      selector: "dxi-range",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], endValue: [{
    type: Input
  }], startValue: [{
    type: Input
  }] });
})();
var DxiRangeModule = class {
};
DxiRangeModule.ɵfac = function DxiRangeModule_Factory(t) {
  return new (t || DxiRangeModule)();
};
DxiRangeModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiRangeModule });
DxiRangeModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiRangeModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiRangeComponent
      ],
      exports: [
        DxiRangeComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiRangeModule, { declarations: [DxiRangeComponent], exports: [DxiRangeComponent] });
})();
var DxoRangeContainerComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
  get orientation() {
    return this._getOption("orientation");
  }
  set orientation(value) {
    this._setOption("orientation", value);
  }
  get palette() {
    return this._getOption("palette");
  }
  set palette(value) {
    this._setOption("palette", value);
  }
  get paletteExtensionMode() {
    return this._getOption("paletteExtensionMode");
  }
  set paletteExtensionMode(value) {
    this._setOption("paletteExtensionMode", value);
  }
  get ranges() {
    return this._getOption("ranges");
  }
  set ranges(value) {
    this._setOption("ranges", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get horizontalOrientation() {
    return this._getOption("horizontalOrientation");
  }
  set horizontalOrientation(value) {
    this._setOption("horizontalOrientation", value);
  }
  get verticalOrientation() {
    return this._getOption("verticalOrientation");
  }
  set verticalOrientation(value) {
    this._setOption("verticalOrientation", value);
  }
  get _optionPath() {
    return "rangeContainer";
  }
  get rangesChildren() {
    return this._getOption("ranges");
  }
  set rangesChildren(value) {
    this.setChildren("ranges", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoRangeContainerComponent.ɵfac = function DxoRangeContainerComponent_Factory(t) {
  return new (t || DxoRangeContainerComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoRangeContainerComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoRangeContainerComponent, selectors: [["dxo-range-container"]], contentQueries: function DxoRangeContainerComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiRangeComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.rangesChildren = _t);
  }
}, inputs: { backgroundColor: "backgroundColor", offset: "offset", orientation: "orientation", palette: "palette", paletteExtensionMode: "paletteExtensionMode", ranges: "ranges", width: "width", horizontalOrientation: "horizontalOrientation", verticalOrientation: "verticalOrientation" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoRangeContainerComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRangeContainerComponent, [{
    type: Component,
    args: [{
      selector: "dxo-range-container",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { backgroundColor: [{
    type: Input
  }], offset: [{
    type: Input
  }], orientation: [{
    type: Input
  }], palette: [{
    type: Input
  }], paletteExtensionMode: [{
    type: Input
  }], ranges: [{
    type: Input
  }], width: [{
    type: Input
  }], horizontalOrientation: [{
    type: Input
  }], verticalOrientation: [{
    type: Input
  }], rangesChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiRangeComponent)]
  }] });
})();
var DxoRangeContainerModule = class {
};
DxoRangeContainerModule.ɵfac = function DxoRangeContainerModule_Factory(t) {
  return new (t || DxoRangeContainerModule)();
};
DxoRangeContainerModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoRangeContainerModule });
DxoRangeContainerModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRangeContainerModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoRangeContainerComponent
      ],
      exports: [
        DxoRangeContainerComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoRangeContainerModule, { declarations: [DxoRangeContainerComponent], exports: [DxoRangeContainerComponent] });
})();
var DxoRangeareaComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "rangearea";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoRangeareaComponent.ɵfac = function DxoRangeareaComponent_Factory(t) {
  return new (t || DxoRangeareaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoRangeareaComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoRangeareaComponent, selectors: [["dxo-rangearea"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoRangeareaComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRangeareaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-rangearea",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoRangeareaModule = class {
};
DxoRangeareaModule.ɵfac = function DxoRangeareaModule_Factory(t) {
  return new (t || DxoRangeareaModule)();
};
DxoRangeareaModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoRangeareaModule });
DxoRangeareaModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRangeareaModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoRangeareaComponent
      ],
      exports: [
        DxoRangeareaComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoRangeareaModule, { declarations: [DxoRangeareaComponent], exports: [DxoRangeareaComponent] });
})();
var DxoRangebarComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "rangebar";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoRangebarComponent.ɵfac = function DxoRangebarComponent_Factory(t) {
  return new (t || DxoRangebarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoRangebarComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoRangebarComponent, selectors: [["dxo-rangebar"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoRangebarComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRangebarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-rangebar",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoRangebarModule = class {
};
DxoRangebarModule.ɵfac = function DxoRangebarModule_Factory(t) {
  return new (t || DxoRangebarModule)();
};
DxoRangebarModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoRangebarModule });
DxoRangebarModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRangebarModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoRangebarComponent
      ],
      exports: [
        DxoRangebarComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoRangebarModule, { declarations: [DxoRangebarComponent], exports: [DxoRangebarComponent] });
})();
var DxoReductionComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get level() {
    return this._getOption("level");
  }
  set level(value) {
    this._setOption("level", value);
  }
  get _optionPath() {
    return "reduction";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoReductionComponent.ɵfac = function DxoReductionComponent_Factory(t) {
  return new (t || DxoReductionComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoReductionComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoReductionComponent, selectors: [["dxo-reduction"]], inputs: { color: "color", level: "level" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoReductionComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoReductionComponent, [{
    type: Component,
    args: [{
      selector: "dxo-reduction",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], level: [{
    type: Input
  }] });
})();
var DxoReductionModule = class {
};
DxoReductionModule.ɵfac = function DxoReductionModule_Factory(t) {
  return new (t || DxoReductionModule)();
};
DxoReductionModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoReductionModule });
DxoReductionModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoReductionModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoReductionComponent
      ],
      exports: [
        DxoReductionComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoReductionModule, { declarations: [DxoReductionComponent], exports: [DxoReductionComponent] });
})();
var DxoRemoteOperationsComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get filtering() {
    return this._getOption("filtering");
  }
  set filtering(value) {
    this._setOption("filtering", value);
  }
  get grouping() {
    return this._getOption("grouping");
  }
  set grouping(value) {
    this._setOption("grouping", value);
  }
  get groupPaging() {
    return this._getOption("groupPaging");
  }
  set groupPaging(value) {
    this._setOption("groupPaging", value);
  }
  get paging() {
    return this._getOption("paging");
  }
  set paging(value) {
    this._setOption("paging", value);
  }
  get sorting() {
    return this._getOption("sorting");
  }
  set sorting(value) {
    this._setOption("sorting", value);
  }
  get summary() {
    return this._getOption("summary");
  }
  set summary(value) {
    this._setOption("summary", value);
  }
  get _optionPath() {
    return "remoteOperations";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoRemoteOperationsComponent.ɵfac = function DxoRemoteOperationsComponent_Factory(t) {
  return new (t || DxoRemoteOperationsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoRemoteOperationsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoRemoteOperationsComponent, selectors: [["dxo-remote-operations"]], inputs: { filtering: "filtering", grouping: "grouping", groupPaging: "groupPaging", paging: "paging", sorting: "sorting", summary: "summary" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoRemoteOperationsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRemoteOperationsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-remote-operations",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { filtering: [{
    type: Input
  }], grouping: [{
    type: Input
  }], groupPaging: [{
    type: Input
  }], paging: [{
    type: Input
  }], sorting: [{
    type: Input
  }], summary: [{
    type: Input
  }] });
})();
var DxoRemoteOperationsModule = class {
};
DxoRemoteOperationsModule.ɵfac = function DxoRemoteOperationsModule_Factory(t) {
  return new (t || DxoRemoteOperationsModule)();
};
DxoRemoteOperationsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoRemoteOperationsModule });
DxoRemoteOperationsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRemoteOperationsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoRemoteOperationsComponent
      ],
      exports: [
        DxoRemoteOperationsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoRemoteOperationsModule, { declarations: [DxoRemoteOperationsComponent], exports: [DxoRemoteOperationsComponent] });
})();
var DxoResourceAssignmentsComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get keyExpr() {
    return this._getOption("keyExpr");
  }
  set keyExpr(value) {
    this._setOption("keyExpr", value);
  }
  get resourceIdExpr() {
    return this._getOption("resourceIdExpr");
  }
  set resourceIdExpr(value) {
    this._setOption("resourceIdExpr", value);
  }
  get taskIdExpr() {
    return this._getOption("taskIdExpr");
  }
  set taskIdExpr(value) {
    this._setOption("taskIdExpr", value);
  }
  get _optionPath() {
    return "resourceAssignments";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoResourceAssignmentsComponent.ɵfac = function DxoResourceAssignmentsComponent_Factory(t) {
  return new (t || DxoResourceAssignmentsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoResourceAssignmentsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoResourceAssignmentsComponent, selectors: [["dxo-resource-assignments"]], inputs: { dataSource: "dataSource", keyExpr: "keyExpr", resourceIdExpr: "resourceIdExpr", taskIdExpr: "taskIdExpr" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoResourceAssignmentsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoResourceAssignmentsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-resource-assignments",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { dataSource: [{
    type: Input
  }], keyExpr: [{
    type: Input
  }], resourceIdExpr: [{
    type: Input
  }], taskIdExpr: [{
    type: Input
  }] });
})();
var DxoResourceAssignmentsModule = class {
};
DxoResourceAssignmentsModule.ɵfac = function DxoResourceAssignmentsModule_Factory(t) {
  return new (t || DxoResourceAssignmentsModule)();
};
DxoResourceAssignmentsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoResourceAssignmentsModule });
DxoResourceAssignmentsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoResourceAssignmentsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoResourceAssignmentsComponent
      ],
      exports: [
        DxoResourceAssignmentsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoResourceAssignmentsModule, { declarations: [DxoResourceAssignmentsComponent], exports: [DxoResourceAssignmentsComponent] });
})();
var DxiResourceComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get allowMultiple() {
    return this._getOption("allowMultiple");
  }
  set allowMultiple(value) {
    this._setOption("allowMultiple", value);
  }
  get colorExpr() {
    return this._getOption("colorExpr");
  }
  set colorExpr(value) {
    this._setOption("colorExpr", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get displayExpr() {
    return this._getOption("displayExpr");
  }
  set displayExpr(value) {
    this._setOption("displayExpr", value);
  }
  get fieldExpr() {
    return this._getOption("fieldExpr");
  }
  set fieldExpr(value) {
    this._setOption("fieldExpr", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get useColorAsDefault() {
    return this._getOption("useColorAsDefault");
  }
  set useColorAsDefault(value) {
    this._setOption("useColorAsDefault", value);
  }
  get valueExpr() {
    return this._getOption("valueExpr");
  }
  set valueExpr(value) {
    this._setOption("valueExpr", value);
  }
  get _optionPath() {
    return "resources";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiResourceComponent.ɵfac = function DxiResourceComponent_Factory(t) {
  return new (t || DxiResourceComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiResourceComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiResourceComponent, selectors: [["dxi-resource"]], inputs: { allowMultiple: "allowMultiple", colorExpr: "colorExpr", dataSource: "dataSource", displayExpr: "displayExpr", fieldExpr: "fieldExpr", label: "label", useColorAsDefault: "useColorAsDefault", valueExpr: "valueExpr" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiResourceComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiResourceComponent, [{
    type: Component,
    args: [{
      selector: "dxi-resource",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { allowMultiple: [{
    type: Input
  }], colorExpr: [{
    type: Input
  }], dataSource: [{
    type: Input
  }], displayExpr: [{
    type: Input
  }], fieldExpr: [{
    type: Input
  }], label: [{
    type: Input
  }], useColorAsDefault: [{
    type: Input
  }], valueExpr: [{
    type: Input
  }] });
})();
var DxiResourceModule = class {
};
DxiResourceModule.ɵfac = function DxiResourceModule_Factory(t) {
  return new (t || DxiResourceModule)();
};
DxiResourceModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiResourceModule });
DxiResourceModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiResourceModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiResourceComponent
      ],
      exports: [
        DxiResourceComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiResourceModule, { declarations: [DxiResourceComponent], exports: [DxiResourceComponent] });
})();
var DxoResourcesComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get colorExpr() {
    return this._getOption("colorExpr");
  }
  set colorExpr(value) {
    this._setOption("colorExpr", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get keyExpr() {
    return this._getOption("keyExpr");
  }
  set keyExpr(value) {
    this._setOption("keyExpr", value);
  }
  get textExpr() {
    return this._getOption("textExpr");
  }
  set textExpr(value) {
    this._setOption("textExpr", value);
  }
  get _optionPath() {
    return "resources";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoResourcesComponent.ɵfac = function DxoResourcesComponent_Factory(t) {
  return new (t || DxoResourcesComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoResourcesComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoResourcesComponent, selectors: [["dxo-resources"]], inputs: { colorExpr: "colorExpr", dataSource: "dataSource", keyExpr: "keyExpr", textExpr: "textExpr" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoResourcesComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoResourcesComponent, [{
    type: Component,
    args: [{
      selector: "dxo-resources",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { colorExpr: [{
    type: Input
  }], dataSource: [{
    type: Input
  }], keyExpr: [{
    type: Input
  }], textExpr: [{
    type: Input
  }] });
})();
var DxoResourcesModule = class {
};
DxoResourcesModule.ɵfac = function DxoResourcesModule_Factory(t) {
  return new (t || DxoResourcesModule)();
};
DxoResourcesModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoResourcesModule });
DxoResourcesModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoResourcesModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoResourcesComponent
      ],
      exports: [
        DxoResourcesComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoResourcesModule, { declarations: [DxoResourcesComponent], exports: [DxoResourcesComponent] });
})();
var DxiRouteComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get locations() {
    return this._getOption("locations");
  }
  set locations(value) {
    this._setOption("locations", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get weight() {
    return this._getOption("weight");
  }
  set weight(value) {
    this._setOption("weight", value);
  }
  get _optionPath() {
    return "routes";
  }
  get locationsChildren() {
    return this._getOption("locations");
  }
  set locationsChildren(value) {
    this.setChildren("locations", value);
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiRouteComponent.ɵfac = function DxiRouteComponent_Factory(t) {
  return new (t || DxiRouteComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiRouteComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiRouteComponent, selectors: [["dxi-route"]], contentQueries: function DxiRouteComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiLocationComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.locationsChildren = _t);
  }
}, inputs: { color: "color", locations: "locations", mode: "mode", opacity: "opacity", weight: "weight" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiRouteComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiRouteComponent, [{
    type: Component,
    args: [{
      selector: "dxi-route",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], locations: [{
    type: Input
  }], mode: [{
    type: Input
  }], opacity: [{
    type: Input
  }], weight: [{
    type: Input
  }], locationsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiLocationComponent)]
  }] });
})();
var DxiRouteModule = class {
};
DxiRouteModule.ɵfac = function DxiRouteModule_Factory(t) {
  return new (t || DxiRouteModule)();
};
DxiRouteModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiRouteModule });
DxiRouteModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiRouteModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiRouteComponent
      ],
      exports: [
        DxiRouteComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiRouteModule, { declarations: [DxiRouteComponent], exports: [DxiRouteComponent] });
})();
var DxoRowDraggingComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get allowDropInsideItem() {
    return this._getOption("allowDropInsideItem");
  }
  set allowDropInsideItem(value) {
    this._setOption("allowDropInsideItem", value);
  }
  get allowReordering() {
    return this._getOption("allowReordering");
  }
  set allowReordering(value) {
    this._setOption("allowReordering", value);
  }
  get autoScroll() {
    return this._getOption("autoScroll");
  }
  set autoScroll(value) {
    this._setOption("autoScroll", value);
  }
  get boundary() {
    return this._getOption("boundary");
  }
  set boundary(value) {
    this._setOption("boundary", value);
  }
  get container() {
    return this._getOption("container");
  }
  set container(value) {
    this._setOption("container", value);
  }
  get cursorOffset() {
    return this._getOption("cursorOffset");
  }
  set cursorOffset(value) {
    this._setOption("cursorOffset", value);
  }
  get data() {
    return this._getOption("data");
  }
  set data(value) {
    this._setOption("data", value);
  }
  get dragDirection() {
    return this._getOption("dragDirection");
  }
  set dragDirection(value) {
    this._setOption("dragDirection", value);
  }
  get dragTemplate() {
    return this._getOption("dragTemplate");
  }
  set dragTemplate(value) {
    this._setOption("dragTemplate", value);
  }
  get dropFeedbackMode() {
    return this._getOption("dropFeedbackMode");
  }
  set dropFeedbackMode(value) {
    this._setOption("dropFeedbackMode", value);
  }
  get filter() {
    return this._getOption("filter");
  }
  set filter(value) {
    this._setOption("filter", value);
  }
  get group() {
    return this._getOption("group");
  }
  set group(value) {
    this._setOption("group", value);
  }
  get handle() {
    return this._getOption("handle");
  }
  set handle(value) {
    this._setOption("handle", value);
  }
  get onAdd() {
    return this._getOption("onAdd");
  }
  set onAdd(value) {
    this._setOption("onAdd", value);
  }
  get onDragChange() {
    return this._getOption("onDragChange");
  }
  set onDragChange(value) {
    this._setOption("onDragChange", value);
  }
  get onDragEnd() {
    return this._getOption("onDragEnd");
  }
  set onDragEnd(value) {
    this._setOption("onDragEnd", value);
  }
  get onDragMove() {
    return this._getOption("onDragMove");
  }
  set onDragMove(value) {
    this._setOption("onDragMove", value);
  }
  get onDragStart() {
    return this._getOption("onDragStart");
  }
  set onDragStart(value) {
    this._setOption("onDragStart", value);
  }
  get onRemove() {
    return this._getOption("onRemove");
  }
  set onRemove(value) {
    this._setOption("onRemove", value);
  }
  get onReorder() {
    return this._getOption("onReorder");
  }
  set onReorder(value) {
    this._setOption("onReorder", value);
  }
  get scrollSensitivity() {
    return this._getOption("scrollSensitivity");
  }
  set scrollSensitivity(value) {
    this._setOption("scrollSensitivity", value);
  }
  get scrollSpeed() {
    return this._getOption("scrollSpeed");
  }
  set scrollSpeed(value) {
    this._setOption("scrollSpeed", value);
  }
  get showDragIcons() {
    return this._getOption("showDragIcons");
  }
  set showDragIcons(value) {
    this._setOption("showDragIcons", value);
  }
  get _optionPath() {
    return "rowDragging";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoRowDraggingComponent.ɵfac = function DxoRowDraggingComponent_Factory(t) {
  return new (t || DxoRowDraggingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoRowDraggingComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoRowDraggingComponent, selectors: [["dxo-row-dragging"]], inputs: { allowDropInsideItem: "allowDropInsideItem", allowReordering: "allowReordering", autoScroll: "autoScroll", boundary: "boundary", container: "container", cursorOffset: "cursorOffset", data: "data", dragDirection: "dragDirection", dragTemplate: "dragTemplate", dropFeedbackMode: "dropFeedbackMode", filter: "filter", group: "group", handle: "handle", onAdd: "onAdd", onDragChange: "onDragChange", onDragEnd: "onDragEnd", onDragMove: "onDragMove", onDragStart: "onDragStart", onRemove: "onRemove", onReorder: "onReorder", scrollSensitivity: "scrollSensitivity", scrollSpeed: "scrollSpeed", showDragIcons: "showDragIcons" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoRowDraggingComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRowDraggingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-row-dragging",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { allowDropInsideItem: [{
    type: Input
  }], allowReordering: [{
    type: Input
  }], autoScroll: [{
    type: Input
  }], boundary: [{
    type: Input
  }], container: [{
    type: Input
  }], cursorOffset: [{
    type: Input
  }], data: [{
    type: Input
  }], dragDirection: [{
    type: Input
  }], dragTemplate: [{
    type: Input
  }], dropFeedbackMode: [{
    type: Input
  }], filter: [{
    type: Input
  }], group: [{
    type: Input
  }], handle: [{
    type: Input
  }], onAdd: [{
    type: Input
  }], onDragChange: [{
    type: Input
  }], onDragEnd: [{
    type: Input
  }], onDragMove: [{
    type: Input
  }], onDragStart: [{
    type: Input
  }], onRemove: [{
    type: Input
  }], onReorder: [{
    type: Input
  }], scrollSensitivity: [{
    type: Input
  }], scrollSpeed: [{
    type: Input
  }], showDragIcons: [{
    type: Input
  }] });
})();
var DxoRowDraggingModule = class {
};
DxoRowDraggingModule.ɵfac = function DxoRowDraggingModule_Factory(t) {
  return new (t || DxoRowDraggingModule)();
};
DxoRowDraggingModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoRowDraggingModule });
DxoRowDraggingModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoRowDraggingModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoRowDraggingComponent
      ],
      exports: [
        DxoRowDraggingComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoRowDraggingModule, { declarations: [DxoRowDraggingComponent], exports: [DxoRowDraggingComponent] });
})();
var DxiRowComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get baseSize() {
    return this._getOption("baseSize");
  }
  set baseSize(value) {
    this._setOption("baseSize", value);
  }
  get ratio() {
    return this._getOption("ratio");
  }
  set ratio(value) {
    this._setOption("ratio", value);
  }
  get screen() {
    return this._getOption("screen");
  }
  set screen(value) {
    this._setOption("screen", value);
  }
  get shrink() {
    return this._getOption("shrink");
  }
  set shrink(value) {
    this._setOption("shrink", value);
  }
  get _optionPath() {
    return "rows";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiRowComponent.ɵfac = function DxiRowComponent_Factory(t) {
  return new (t || DxiRowComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiRowComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiRowComponent, selectors: [["dxi-row"]], inputs: { baseSize: "baseSize", ratio: "ratio", screen: "screen", shrink: "shrink" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiRowComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiRowComponent, [{
    type: Component,
    args: [{
      selector: "dxi-row",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { baseSize: [{
    type: Input
  }], ratio: [{
    type: Input
  }], screen: [{
    type: Input
  }], shrink: [{
    type: Input
  }] });
})();
var DxiRowModule = class {
};
DxiRowModule.ɵfac = function DxiRowModule_Factory(t) {
  return new (t || DxiRowModule)();
};
DxiRowModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiRowModule });
DxiRowModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiRowModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiRowComponent
      ],
      exports: [
        DxiRowComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiRowModule, { declarations: [DxiRowComponent], exports: [DxiRowComponent] });
})();
var DxoScaleTypeRangeComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get max() {
    return this._getOption("max");
  }
  set max(value) {
    this._setOption("max", value);
  }
  get min() {
    return this._getOption("min");
  }
  set min(value) {
    this._setOption("min", value);
  }
  get _optionPath() {
    return "scaleTypeRange";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoScaleTypeRangeComponent.ɵfac = function DxoScaleTypeRangeComponent_Factory(t) {
  return new (t || DxoScaleTypeRangeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoScaleTypeRangeComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoScaleTypeRangeComponent, selectors: [["dxo-scale-type-range"]], inputs: { max: "max", min: "min" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoScaleTypeRangeComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScaleTypeRangeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-scale-type-range",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { max: [{
    type: Input
  }], min: [{
    type: Input
  }] });
})();
var DxoScaleTypeRangeModule = class {
};
DxoScaleTypeRangeModule.ɵfac = function DxoScaleTypeRangeModule_Factory(t) {
  return new (t || DxoScaleTypeRangeModule)();
};
DxoScaleTypeRangeModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoScaleTypeRangeModule });
DxoScaleTypeRangeModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScaleTypeRangeModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoScaleTypeRangeComponent
      ],
      exports: [
        DxoScaleTypeRangeComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoScaleTypeRangeModule, { declarations: [DxoScaleTypeRangeComponent], exports: [DxoScaleTypeRangeComponent] });
})();
var DxoScaleComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get allowDecimals() {
    return this._getOption("allowDecimals");
  }
  set allowDecimals(value) {
    this._setOption("allowDecimals", value);
  }
  get customMinorTicks() {
    return this._getOption("customMinorTicks");
  }
  set customMinorTicks(value) {
    this._setOption("customMinorTicks", value);
  }
  get customTicks() {
    return this._getOption("customTicks");
  }
  set customTicks(value) {
    this._setOption("customTicks", value);
  }
  get endValue() {
    return this._getOption("endValue");
  }
  set endValue(value) {
    this._setOption("endValue", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get minorTick() {
    return this._getOption("minorTick");
  }
  set minorTick(value) {
    this._setOption("minorTick", value);
  }
  get minorTickInterval() {
    return this._getOption("minorTickInterval");
  }
  set minorTickInterval(value) {
    this._setOption("minorTickInterval", value);
  }
  get orientation() {
    return this._getOption("orientation");
  }
  set orientation(value) {
    this._setOption("orientation", value);
  }
  get scaleDivisionFactor() {
    return this._getOption("scaleDivisionFactor");
  }
  set scaleDivisionFactor(value) {
    this._setOption("scaleDivisionFactor", value);
  }
  get startValue() {
    return this._getOption("startValue");
  }
  set startValue(value) {
    this._setOption("startValue", value);
  }
  get tick() {
    return this._getOption("tick");
  }
  set tick(value) {
    this._setOption("tick", value);
  }
  get tickInterval() {
    return this._getOption("tickInterval");
  }
  set tickInterval(value) {
    this._setOption("tickInterval", value);
  }
  get horizontalOrientation() {
    return this._getOption("horizontalOrientation");
  }
  set horizontalOrientation(value) {
    this._setOption("horizontalOrientation", value);
  }
  get verticalOrientation() {
    return this._getOption("verticalOrientation");
  }
  set verticalOrientation(value) {
    this._setOption("verticalOrientation", value);
  }
  get aggregateByCategory() {
    return this._getOption("aggregateByCategory");
  }
  set aggregateByCategory(value) {
    this._setOption("aggregateByCategory", value);
  }
  get aggregationGroupWidth() {
    return this._getOption("aggregationGroupWidth");
  }
  set aggregationGroupWidth(value) {
    this._setOption("aggregationGroupWidth", value);
  }
  get aggregationInterval() {
    return this._getOption("aggregationInterval");
  }
  set aggregationInterval(value) {
    this._setOption("aggregationInterval", value);
  }
  get breaks() {
    return this._getOption("breaks");
  }
  set breaks(value) {
    this._setOption("breaks", value);
  }
  get breakStyle() {
    return this._getOption("breakStyle");
  }
  set breakStyle(value) {
    this._setOption("breakStyle", value);
  }
  get categories() {
    return this._getOption("categories");
  }
  set categories(value) {
    this._setOption("categories", value);
  }
  get discreteAxisDivisionMode() {
    return this._getOption("discreteAxisDivisionMode");
  }
  set discreteAxisDivisionMode(value) {
    this._setOption("discreteAxisDivisionMode", value);
  }
  get endOnTick() {
    return this._getOption("endOnTick");
  }
  set endOnTick(value) {
    this._setOption("endOnTick", value);
  }
  get holidays() {
    return this._getOption("holidays");
  }
  set holidays(value) {
    this._setOption("holidays", value);
  }
  get linearThreshold() {
    return this._getOption("linearThreshold");
  }
  set linearThreshold(value) {
    this._setOption("linearThreshold", value);
  }
  get logarithmBase() {
    return this._getOption("logarithmBase");
  }
  set logarithmBase(value) {
    this._setOption("logarithmBase", value);
  }
  get marker() {
    return this._getOption("marker");
  }
  set marker(value) {
    this._setOption("marker", value);
  }
  get maxRange() {
    return this._getOption("maxRange");
  }
  set maxRange(value) {
    this._setOption("maxRange", value);
  }
  get minorTickCount() {
    return this._getOption("minorTickCount");
  }
  set minorTickCount(value) {
    this._setOption("minorTickCount", value);
  }
  get minRange() {
    return this._getOption("minRange");
  }
  set minRange(value) {
    this._setOption("minRange", value);
  }
  get placeholderHeight() {
    return this._getOption("placeholderHeight");
  }
  set placeholderHeight(value) {
    this._setOption("placeholderHeight", value);
  }
  get showCustomBoundaryTicks() {
    return this._getOption("showCustomBoundaryTicks");
  }
  set showCustomBoundaryTicks(value) {
    this._setOption("showCustomBoundaryTicks", value);
  }
  get singleWorkdays() {
    return this._getOption("singleWorkdays");
  }
  set singleWorkdays(value) {
    this._setOption("singleWorkdays", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get valueType() {
    return this._getOption("valueType");
  }
  set valueType(value) {
    this._setOption("valueType", value);
  }
  get workdaysOnly() {
    return this._getOption("workdaysOnly");
  }
  set workdaysOnly(value) {
    this._setOption("workdaysOnly", value);
  }
  get workWeek() {
    return this._getOption("workWeek");
  }
  set workWeek(value) {
    this._setOption("workWeek", value);
  }
  get _optionPath() {
    return "scale";
  }
  get breaksChildren() {
    return this._getOption("breaks");
  }
  set breaksChildren(value) {
    this.setChildren("breaks", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoScaleComponent.ɵfac = function DxoScaleComponent_Factory(t) {
  return new (t || DxoScaleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoScaleComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoScaleComponent, selectors: [["dxo-scale"]], contentQueries: function DxoScaleComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiBreakComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.breaksChildren = _t);
  }
}, inputs: { allowDecimals: "allowDecimals", customMinorTicks: "customMinorTicks", customTicks: "customTicks", endValue: "endValue", label: "label", minorTick: "minorTick", minorTickInterval: "minorTickInterval", orientation: "orientation", scaleDivisionFactor: "scaleDivisionFactor", startValue: "startValue", tick: "tick", tickInterval: "tickInterval", horizontalOrientation: "horizontalOrientation", verticalOrientation: "verticalOrientation", aggregateByCategory: "aggregateByCategory", aggregationGroupWidth: "aggregationGroupWidth", aggregationInterval: "aggregationInterval", breaks: "breaks", breakStyle: "breakStyle", categories: "categories", discreteAxisDivisionMode: "discreteAxisDivisionMode", endOnTick: "endOnTick", holidays: "holidays", linearThreshold: "linearThreshold", logarithmBase: "logarithmBase", marker: "marker", maxRange: "maxRange", minorTickCount: "minorTickCount", minRange: "minRange", placeholderHeight: "placeholderHeight", showCustomBoundaryTicks: "showCustomBoundaryTicks", singleWorkdays: "singleWorkdays", type: "type", valueType: "valueType", workdaysOnly: "workdaysOnly", workWeek: "workWeek" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoScaleComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScaleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-scale",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { allowDecimals: [{
    type: Input
  }], customMinorTicks: [{
    type: Input
  }], customTicks: [{
    type: Input
  }], endValue: [{
    type: Input
  }], label: [{
    type: Input
  }], minorTick: [{
    type: Input
  }], minorTickInterval: [{
    type: Input
  }], orientation: [{
    type: Input
  }], scaleDivisionFactor: [{
    type: Input
  }], startValue: [{
    type: Input
  }], tick: [{
    type: Input
  }], tickInterval: [{
    type: Input
  }], horizontalOrientation: [{
    type: Input
  }], verticalOrientation: [{
    type: Input
  }], aggregateByCategory: [{
    type: Input
  }], aggregationGroupWidth: [{
    type: Input
  }], aggregationInterval: [{
    type: Input
  }], breaks: [{
    type: Input
  }], breakStyle: [{
    type: Input
  }], categories: [{
    type: Input
  }], discreteAxisDivisionMode: [{
    type: Input
  }], endOnTick: [{
    type: Input
  }], holidays: [{
    type: Input
  }], linearThreshold: [{
    type: Input
  }], logarithmBase: [{
    type: Input
  }], marker: [{
    type: Input
  }], maxRange: [{
    type: Input
  }], minorTickCount: [{
    type: Input
  }], minRange: [{
    type: Input
  }], placeholderHeight: [{
    type: Input
  }], showCustomBoundaryTicks: [{
    type: Input
  }], singleWorkdays: [{
    type: Input
  }], type: [{
    type: Input
  }], valueType: [{
    type: Input
  }], workdaysOnly: [{
    type: Input
  }], workWeek: [{
    type: Input
  }], breaksChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiBreakComponent)]
  }] });
})();
var DxoScaleModule = class {
};
DxoScaleModule.ɵfac = function DxoScaleModule_Factory(t) {
  return new (t || DxoScaleModule)();
};
DxoScaleModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoScaleModule });
DxoScaleModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScaleModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoScaleComponent
      ],
      exports: [
        DxoScaleComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoScaleModule, { declarations: [DxoScaleComponent], exports: [DxoScaleComponent] });
})();
var DxoScatterComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "scatter";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoScatterComponent.ɵfac = function DxoScatterComponent_Factory(t) {
  return new (t || DxoScatterComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoScatterComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoScatterComponent, selectors: [["dxo-scatter"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", closed: "closed" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoScatterComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScatterComponent, [{
    type: Component,
    args: [{
      selector: "dxo-scatter",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width",
        "closed"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoScatterModule = class {
};
DxoScatterModule.ɵfac = function DxoScatterModule_Factory(t) {
  return new (t || DxoScatterModule)();
};
DxoScatterModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoScatterModule });
DxoScatterModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScatterModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoScatterComponent
      ],
      exports: [
        DxoScatterComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoScatterModule, { declarations: [DxoScatterComponent], exports: [DxoScatterComponent] });
})();
var DxoScrollBarComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "scrollBar";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoScrollBarComponent.ɵfac = function DxoScrollBarComponent_Factory(t) {
  return new (t || DxoScrollBarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoScrollBarComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoScrollBarComponent, selectors: [["dxo-scroll-bar"]], inputs: { color: "color", offset: "offset", opacity: "opacity", position: "position", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoScrollBarComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScrollBarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-scroll-bar",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], offset: [{
    type: Input
  }], opacity: [{
    type: Input
  }], position: [{
    type: Input
  }], visible: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoScrollBarModule = class {
};
DxoScrollBarModule.ɵfac = function DxoScrollBarModule_Factory(t) {
  return new (t || DxoScrollBarModule)();
};
DxoScrollBarModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoScrollBarModule });
DxoScrollBarModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScrollBarModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoScrollBarComponent
      ],
      exports: [
        DxoScrollBarComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoScrollBarModule, { declarations: [DxoScrollBarComponent], exports: [DxoScrollBarComponent] });
})();
var DxoSchedulerScrolling = class extends NestedOption {
  get columnRenderingMode() {
    return this._getOption("columnRenderingMode");
  }
  set columnRenderingMode(value) {
    this._setOption("columnRenderingMode", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get preloadEnabled() {
    return this._getOption("preloadEnabled");
  }
  set preloadEnabled(value) {
    this._setOption("preloadEnabled", value);
  }
  get renderAsync() {
    return this._getOption("renderAsync");
  }
  set renderAsync(value) {
    this._setOption("renderAsync", value);
  }
  get rowRenderingMode() {
    return this._getOption("rowRenderingMode");
  }
  set rowRenderingMode(value) {
    this._setOption("rowRenderingMode", value);
  }
  get scrollByContent() {
    return this._getOption("scrollByContent");
  }
  set scrollByContent(value) {
    this._setOption("scrollByContent", value);
  }
  get scrollByThumb() {
    return this._getOption("scrollByThumb");
  }
  set scrollByThumb(value) {
    this._setOption("scrollByThumb", value);
  }
  get showScrollbar() {
    return this._getOption("showScrollbar");
  }
  set showScrollbar(value) {
    this._setOption("showScrollbar", value);
  }
  get useNative() {
    return this._getOption("useNative");
  }
  set useNative(value) {
    this._setOption("useNative", value);
  }
};
DxoSchedulerScrolling.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoSchedulerScrolling_BaseFactory;
  return function DxoSchedulerScrolling_Factory(t) {
    return (ɵDxoSchedulerScrolling_BaseFactory || (ɵDxoSchedulerScrolling_BaseFactory = ɵɵgetInheritedFactory(DxoSchedulerScrolling)))(t || DxoSchedulerScrolling);
  };
}();
DxoSchedulerScrolling.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSchedulerScrolling, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSchedulerScrolling_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSchedulerScrolling, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoScrollingComponent = class extends DxoSchedulerScrolling {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "scrolling";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoScrollingComponent.ɵfac = function DxoScrollingComponent_Factory(t) {
  return new (t || DxoScrollingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoScrollingComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoScrollingComponent, selectors: [["dxo-scrolling"]], inputs: { columnRenderingMode: "columnRenderingMode", mode: "mode", preloadEnabled: "preloadEnabled", renderAsync: "renderAsync", rowRenderingMode: "rowRenderingMode", scrollByContent: "scrollByContent", scrollByThumb: "scrollByThumb", showScrollbar: "showScrollbar", useNative: "useNative" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoScrollingComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScrollingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-scrolling",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "columnRenderingMode",
        "mode",
        "preloadEnabled",
        "renderAsync",
        "rowRenderingMode",
        "scrollByContent",
        "scrollByThumb",
        "showScrollbar",
        "useNative"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoScrollingModule = class {
};
DxoScrollingModule.ɵfac = function DxoScrollingModule_Factory(t) {
  return new (t || DxoScrollingModule)();
};
DxoScrollingModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoScrollingModule });
DxoScrollingModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoScrollingModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoScrollingComponent
      ],
      exports: [
        DxoScrollingComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoScrollingModule, { declarations: [DxoScrollingComponent], exports: [DxoScrollingComponent] });
})();
var DxoTextBoxOptions = class extends NestedOption {
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get activeStateEnabled() {
    return this._getOption("activeStateEnabled");
  }
  set activeStateEnabled(value) {
    this._setOption("activeStateEnabled", value);
  }
  get buttons() {
    return this._getOption("buttons");
  }
  set buttons(value) {
    this._setOption("buttons", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get inputAttr() {
    return this._getOption("inputAttr");
  }
  set inputAttr(value) {
    this._setOption("inputAttr", value);
  }
  get isDirty() {
    return this._getOption("isDirty");
  }
  set isDirty(value) {
    this._setOption("isDirty", value);
  }
  get isValid() {
    return this._getOption("isValid");
  }
  set isValid(value) {
    this._setOption("isValid", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get labelMode() {
    return this._getOption("labelMode");
  }
  set labelMode(value) {
    this._setOption("labelMode", value);
  }
  get mask() {
    return this._getOption("mask");
  }
  set mask(value) {
    this._setOption("mask", value);
  }
  get maskChar() {
    return this._getOption("maskChar");
  }
  set maskChar(value) {
    this._setOption("maskChar", value);
  }
  get maskInvalidMessage() {
    return this._getOption("maskInvalidMessage");
  }
  set maskInvalidMessage(value) {
    this._setOption("maskInvalidMessage", value);
  }
  get maskRules() {
    return this._getOption("maskRules");
  }
  set maskRules(value) {
    this._setOption("maskRules", value);
  }
  get maxLength() {
    return this._getOption("maxLength");
  }
  set maxLength(value) {
    this._setOption("maxLength", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get onChange() {
    return this._getOption("onChange");
  }
  set onChange(value) {
    this._setOption("onChange", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onCopy() {
    return this._getOption("onCopy");
  }
  set onCopy(value) {
    this._setOption("onCopy", value);
  }
  get onCut() {
    return this._getOption("onCut");
  }
  set onCut(value) {
    this._setOption("onCut", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onEnterKey() {
    return this._getOption("onEnterKey");
  }
  set onEnterKey(value) {
    this._setOption("onEnterKey", value);
  }
  get onFocusIn() {
    return this._getOption("onFocusIn");
  }
  set onFocusIn(value) {
    this._setOption("onFocusIn", value);
  }
  get onFocusOut() {
    return this._getOption("onFocusOut");
  }
  set onFocusOut(value) {
    this._setOption("onFocusOut", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onInput() {
    return this._getOption("onInput");
  }
  set onInput(value) {
    this._setOption("onInput", value);
  }
  get onKeyDown() {
    return this._getOption("onKeyDown");
  }
  set onKeyDown(value) {
    this._setOption("onKeyDown", value);
  }
  get onKeyUp() {
    return this._getOption("onKeyUp");
  }
  set onKeyUp(value) {
    this._setOption("onKeyUp", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get onPaste() {
    return this._getOption("onPaste");
  }
  set onPaste(value) {
    this._setOption("onPaste", value);
  }
  get onValueChanged() {
    return this._getOption("onValueChanged");
  }
  set onValueChanged(value) {
    this._setOption("onValueChanged", value);
  }
  get placeholder() {
    return this._getOption("placeholder");
  }
  set placeholder(value) {
    this._setOption("placeholder", value);
  }
  get readOnly() {
    return this._getOption("readOnly");
  }
  set readOnly(value) {
    this._setOption("readOnly", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get showClearButton() {
    return this._getOption("showClearButton");
  }
  set showClearButton(value) {
    this._setOption("showClearButton", value);
  }
  get showMaskMode() {
    return this._getOption("showMaskMode");
  }
  set showMaskMode(value) {
    this._setOption("showMaskMode", value);
  }
  get spellcheck() {
    return this._getOption("spellcheck");
  }
  set spellcheck(value) {
    this._setOption("spellcheck", value);
  }
  get stylingMode() {
    return this._getOption("stylingMode");
  }
  set stylingMode(value) {
    this._setOption("stylingMode", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get useMaskedValue() {
    return this._getOption("useMaskedValue");
  }
  set useMaskedValue(value) {
    this._setOption("useMaskedValue", value);
  }
  get validationError() {
    return this._getOption("validationError");
  }
  set validationError(value) {
    this._setOption("validationError", value);
  }
  get validationErrors() {
    return this._getOption("validationErrors");
  }
  set validationErrors(value) {
    this._setOption("validationErrors", value);
  }
  get validationMessageMode() {
    return this._getOption("validationMessageMode");
  }
  set validationMessageMode(value) {
    this._setOption("validationMessageMode", value);
  }
  get validationMessagePosition() {
    return this._getOption("validationMessagePosition");
  }
  set validationMessagePosition(value) {
    this._setOption("validationMessagePosition", value);
  }
  get validationStatus() {
    return this._getOption("validationStatus");
  }
  set validationStatus(value) {
    this._setOption("validationStatus", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get valueChangeEvent() {
    return this._getOption("valueChangeEvent");
  }
  set valueChangeEvent(value) {
    this._setOption("valueChangeEvent", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
};
DxoTextBoxOptions.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoTextBoxOptions_BaseFactory;
  return function DxoTextBoxOptions_Factory(t) {
    return (ɵDxoTextBoxOptions_BaseFactory || (ɵDxoTextBoxOptions_BaseFactory = ɵɵgetInheritedFactory(DxoTextBoxOptions)))(t || DxoTextBoxOptions);
  };
}();
DxoTextBoxOptions.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoTextBoxOptions, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTextBoxOptions_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTextBoxOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoSearchEditorOptionsComponent = class extends DxoTextBoxOptions {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "textChange" },
      { emit: "valueChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "searchEditorOptions";
  }
  get buttonsChildren() {
    return this._getOption("buttons");
  }
  set buttonsChildren(value) {
    this.setChildren("buttons", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSearchEditorOptionsComponent.ɵfac = function DxoSearchEditorOptionsComponent_Factory(t) {
  return new (t || DxoSearchEditorOptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSearchEditorOptionsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSearchEditorOptionsComponent, selectors: [["dxo-search-editor-options"]], contentQueries: function DxoSearchEditorOptionsComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiButtonComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.buttonsChildren = _t);
  }
}, inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", buttons: "buttons", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", inputAttr: "inputAttr", isDirty: "isDirty", isValid: "isValid", label: "label", labelMode: "labelMode", mask: "mask", maskChar: "maskChar", maskInvalidMessage: "maskInvalidMessage", maskRules: "maskRules", maxLength: "maxLength", mode: "mode", name: "name", onChange: "onChange", onContentReady: "onContentReady", onCopy: "onCopy", onCut: "onCut", onDisposing: "onDisposing", onEnterKey: "onEnterKey", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onInitialized: "onInitialized", onInput: "onInput", onKeyDown: "onKeyDown", onKeyUp: "onKeyUp", onOptionChanged: "onOptionChanged", onPaste: "onPaste", onValueChanged: "onValueChanged", placeholder: "placeholder", readOnly: "readOnly", rtlEnabled: "rtlEnabled", showClearButton: "showClearButton", showMaskMode: "showMaskMode", spellcheck: "spellcheck", stylingMode: "stylingMode", tabIndex: "tabIndex", text: "text", useMaskedValue: "useMaskedValue", validationError: "validationError", validationErrors: "validationErrors", validationMessageMode: "validationMessageMode", validationMessagePosition: "validationMessagePosition", validationStatus: "validationStatus", value: "value", valueChangeEvent: "valueChangeEvent", visible: "visible", width: "width" }, outputs: { textChange: "textChange", valueChange: "valueChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSearchEditorOptionsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSearchEditorOptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-search-editor-options",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "accessKey",
        "activeStateEnabled",
        "buttons",
        "disabled",
        "elementAttr",
        "focusStateEnabled",
        "height",
        "hint",
        "hoverStateEnabled",
        "inputAttr",
        "isDirty",
        "isValid",
        "label",
        "labelMode",
        "mask",
        "maskChar",
        "maskInvalidMessage",
        "maskRules",
        "maxLength",
        "mode",
        "name",
        "onChange",
        "onContentReady",
        "onCopy",
        "onCut",
        "onDisposing",
        "onEnterKey",
        "onFocusIn",
        "onFocusOut",
        "onInitialized",
        "onInput",
        "onKeyDown",
        "onKeyUp",
        "onOptionChanged",
        "onPaste",
        "onValueChanged",
        "placeholder",
        "readOnly",
        "rtlEnabled",
        "showClearButton",
        "showMaskMode",
        "spellcheck",
        "stylingMode",
        "tabIndex",
        "text",
        "useMaskedValue",
        "validationError",
        "validationErrors",
        "validationMessageMode",
        "validationMessagePosition",
        "validationStatus",
        "value",
        "valueChangeEvent",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { textChange: [{
    type: Output
  }], valueChange: [{
    type: Output
  }], buttonsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiButtonComponent)]
  }] });
})();
var DxoSearchEditorOptionsModule = class {
};
DxoSearchEditorOptionsModule.ɵfac = function DxoSearchEditorOptionsModule_Factory(t) {
  return new (t || DxoSearchEditorOptionsModule)();
};
DxoSearchEditorOptionsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSearchEditorOptionsModule });
DxoSearchEditorOptionsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSearchEditorOptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSearchEditorOptionsComponent
      ],
      exports: [
        DxoSearchEditorOptionsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSearchEditorOptionsModule, { declarations: [DxoSearchEditorOptionsComponent], exports: [DxoSearchEditorOptionsComponent] });
})();
var DxoSearchPanelComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "textChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get highlightCaseSensitive() {
    return this._getOption("highlightCaseSensitive");
  }
  set highlightCaseSensitive(value) {
    this._setOption("highlightCaseSensitive", value);
  }
  get highlightSearchText() {
    return this._getOption("highlightSearchText");
  }
  set highlightSearchText(value) {
    this._setOption("highlightSearchText", value);
  }
  get placeholder() {
    return this._getOption("placeholder");
  }
  set placeholder(value) {
    this._setOption("placeholder", value);
  }
  get searchVisibleColumnsOnly() {
    return this._getOption("searchVisibleColumnsOnly");
  }
  set searchVisibleColumnsOnly(value) {
    this._setOption("searchVisibleColumnsOnly", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "searchPanel";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSearchPanelComponent.ɵfac = function DxoSearchPanelComponent_Factory(t) {
  return new (t || DxoSearchPanelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSearchPanelComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSearchPanelComponent, selectors: [["dxo-search-panel"]], inputs: { highlightCaseSensitive: "highlightCaseSensitive", highlightSearchText: "highlightSearchText", placeholder: "placeholder", searchVisibleColumnsOnly: "searchVisibleColumnsOnly", text: "text", visible: "visible", width: "width" }, outputs: { textChange: "textChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSearchPanelComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSearchPanelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-search-panel",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { highlightCaseSensitive: [{
    type: Input
  }], highlightSearchText: [{
    type: Input
  }], placeholder: [{
    type: Input
  }], searchVisibleColumnsOnly: [{
    type: Input
  }], text: [{
    type: Input
  }], visible: [{
    type: Input
  }], width: [{
    type: Input
  }], textChange: [{
    type: Output
  }] });
})();
var DxoSearchPanelModule = class {
};
DxoSearchPanelModule.ɵfac = function DxoSearchPanelModule_Factory(t) {
  return new (t || DxoSearchPanelModule)();
};
DxoSearchPanelModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSearchPanelModule });
DxoSearchPanelModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSearchPanelModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSearchPanelComponent
      ],
      exports: [
        DxoSearchPanelComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSearchPanelModule, { declarations: [DxoSearchPanelComponent], exports: [DxoSearchPanelComponent] });
})();
var DxoColumnChooserSearchConfig = class extends NestedOption {
  get editorOptions() {
    return this._getOption("editorOptions");
  }
  set editorOptions(value) {
    this._setOption("editorOptions", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get timeout() {
    return this._getOption("timeout");
  }
  set timeout(value) {
    this._setOption("timeout", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get searchExpr() {
    return this._getOption("searchExpr");
  }
  set searchExpr(value) {
    this._setOption("searchExpr", value);
  }
};
DxoColumnChooserSearchConfig.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoColumnChooserSearchConfig_BaseFactory;
  return function DxoColumnChooserSearchConfig_Factory(t) {
    return (ɵDxoColumnChooserSearchConfig_BaseFactory || (ɵDxoColumnChooserSearchConfig_BaseFactory = ɵɵgetInheritedFactory(DxoColumnChooserSearchConfig)))(t || DxoColumnChooserSearchConfig);
  };
}();
DxoColumnChooserSearchConfig.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoColumnChooserSearchConfig, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoColumnChooserSearchConfig_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColumnChooserSearchConfig, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoSearchComponent = class extends DxoColumnChooserSearchConfig {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "search";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSearchComponent.ɵfac = function DxoSearchComponent_Factory(t) {
  return new (t || DxoSearchComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSearchComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSearchComponent, selectors: [["dxo-search"]], inputs: { editorOptions: "editorOptions", enabled: "enabled", timeout: "timeout", mode: "mode", searchExpr: "searchExpr" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSearchComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSearchComponent, [{
    type: Component,
    args: [{
      selector: "dxo-search",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "editorOptions",
        "enabled",
        "timeout",
        "mode",
        "searchExpr"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoSearchModule = class {
};
DxoSearchModule.ɵfac = function DxoSearchModule_Factory(t) {
  return new (t || DxoSearchModule)();
};
DxoSearchModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSearchModule });
DxoSearchModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSearchModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSearchComponent
      ],
      exports: [
        DxoSearchComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSearchModule, { declarations: [DxoSearchComponent], exports: [DxoSearchComponent] });
})();
var DxoSelectionStyleComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get size() {
    return this._getOption("size");
  }
  set size(value) {
    this._setOption("size", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get hatching() {
    return this._getOption("hatching");
  }
  set hatching(value) {
    this._setOption("hatching", value);
  }
  get highlight() {
    return this._getOption("highlight");
  }
  set highlight(value) {
    this._setOption("highlight", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "selectionStyle";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSelectionStyleComponent.ɵfac = function DxoSelectionStyleComponent_Factory(t) {
  return new (t || DxoSelectionStyleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSelectionStyleComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSelectionStyleComponent, selectors: [["dxo-selection-style"]], inputs: { border: "border", color: "color", size: "size", dashStyle: "dashStyle", hatching: "hatching", highlight: "highlight", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSelectionStyleComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSelectionStyleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-selection-style",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { border: [{
    type: Input
  }], color: [{
    type: Input
  }], size: [{
    type: Input
  }], dashStyle: [{
    type: Input
  }], hatching: [{
    type: Input
  }], highlight: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoSelectionStyleModule = class {
};
DxoSelectionStyleModule.ɵfac = function DxoSelectionStyleModule_Factory(t) {
  return new (t || DxoSelectionStyleModule)();
};
DxoSelectionStyleModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSelectionStyleModule });
DxoSelectionStyleModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSelectionStyleModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSelectionStyleComponent
      ],
      exports: [
        DxoSelectionStyleComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSelectionStyleModule, { declarations: [DxoSelectionStyleComponent], exports: [DxoSelectionStyleComponent] });
})();
var DxoColumnChooserSelectionConfig = class extends NestedOption {
  get allowSelectAll() {
    return this._getOption("allowSelectAll");
  }
  set allowSelectAll(value) {
    this._setOption("allowSelectAll", value);
  }
  get recursive() {
    return this._getOption("recursive");
  }
  set recursive(value) {
    this._setOption("recursive", value);
  }
  get selectByClick() {
    return this._getOption("selectByClick");
  }
  set selectByClick(value) {
    this._setOption("selectByClick", value);
  }
  get deferred() {
    return this._getOption("deferred");
  }
  set deferred(value) {
    this._setOption("deferred", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get selectAllMode() {
    return this._getOption("selectAllMode");
  }
  set selectAllMode(value) {
    this._setOption("selectAllMode", value);
  }
  get showCheckBoxesMode() {
    return this._getOption("showCheckBoxesMode");
  }
  set showCheckBoxesMode(value) {
    this._setOption("showCheckBoxesMode", value);
  }
};
DxoColumnChooserSelectionConfig.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoColumnChooserSelectionConfig_BaseFactory;
  return function DxoColumnChooserSelectionConfig_Factory(t) {
    return (ɵDxoColumnChooserSelectionConfig_BaseFactory || (ɵDxoColumnChooserSelectionConfig_BaseFactory = ɵɵgetInheritedFactory(DxoColumnChooserSelectionConfig)))(t || DxoColumnChooserSelectionConfig);
  };
}();
DxoColumnChooserSelectionConfig.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoColumnChooserSelectionConfig, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoColumnChooserSelectionConfig_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoColumnChooserSelectionConfig, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoSelectionComponent = class extends DxoColumnChooserSelectionConfig {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "selection";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSelectionComponent.ɵfac = function DxoSelectionComponent_Factory(t) {
  return new (t || DxoSelectionComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSelectionComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSelectionComponent, selectors: [["dxo-selection"]], inputs: { allowSelectAll: "allowSelectAll", recursive: "recursive", selectByClick: "selectByClick", deferred: "deferred", mode: "mode", selectAllMode: "selectAllMode", showCheckBoxesMode: "showCheckBoxesMode" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSelectionComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSelectionComponent, [{
    type: Component,
    args: [{
      selector: "dxo-selection",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "allowSelectAll",
        "recursive",
        "selectByClick",
        "deferred",
        "mode",
        "selectAllMode",
        "showCheckBoxesMode"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoSelectionModule = class {
};
DxoSelectionModule.ɵfac = function DxoSelectionModule_Factory(t) {
  return new (t || DxoSelectionModule)();
};
DxoSelectionModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSelectionModule });
DxoSelectionModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSelectionModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSelectionComponent
      ],
      exports: [
        DxoSelectionComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSelectionModule, { declarations: [DxoSelectionComponent], exports: [DxoSelectionComponent] });
})();
var DxoSeriesTemplateComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get customizeSeries() {
    return this._getOption("customizeSeries");
  }
  set customizeSeries(value) {
    this._setOption("customizeSeries", value);
  }
  get nameField() {
    return this._getOption("nameField");
  }
  set nameField(value) {
    this._setOption("nameField", value);
  }
  get _optionPath() {
    return "seriesTemplate";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSeriesTemplateComponent.ɵfac = function DxoSeriesTemplateComponent_Factory(t) {
  return new (t || DxoSeriesTemplateComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSeriesTemplateComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSeriesTemplateComponent, selectors: [["dxo-series-template"]], inputs: { customizeSeries: "customizeSeries", nameField: "nameField" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSeriesTemplateComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSeriesTemplateComponent, [{
    type: Component,
    args: [{
      selector: "dxo-series-template",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { customizeSeries: [{
    type: Input
  }], nameField: [{
    type: Input
  }] });
})();
var DxoSeriesTemplateModule = class {
};
DxoSeriesTemplateModule.ɵfac = function DxoSeriesTemplateModule_Factory(t) {
  return new (t || DxoSeriesTemplateModule)();
};
DxoSeriesTemplateModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSeriesTemplateModule });
DxoSeriesTemplateModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSeriesTemplateModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSeriesTemplateComponent
      ],
      exports: [
        DxoSeriesTemplateComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSeriesTemplateModule, { declarations: [DxoSeriesTemplateComponent], exports: [DxoSeriesTemplateComponent] });
})();
var DxoShadowComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get blur() {
    return this._getOption("blur");
  }
  set blur(value) {
    this._setOption("blur", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get offsetX() {
    return this._getOption("offsetX");
  }
  set offsetX(value) {
    this._setOption("offsetX", value);
  }
  get offsetY() {
    return this._getOption("offsetY");
  }
  set offsetY(value) {
    this._setOption("offsetY", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get _optionPath() {
    return "shadow";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoShadowComponent.ɵfac = function DxoShadowComponent_Factory(t) {
  return new (t || DxoShadowComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoShadowComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoShadowComponent, selectors: [["dxo-shadow"]], inputs: { blur: "blur", color: "color", offsetX: "offsetX", offsetY: "offsetY", opacity: "opacity" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoShadowComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShadowComponent, [{
    type: Component,
    args: [{
      selector: "dxo-shadow",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { blur: [{
    type: Input
  }], color: [{
    type: Input
  }], offsetX: [{
    type: Input
  }], offsetY: [{
    type: Input
  }], opacity: [{
    type: Input
  }] });
})();
var DxoShadowModule = class {
};
DxoShadowModule.ɵfac = function DxoShadowModule_Factory(t) {
  return new (t || DxoShadowModule)();
};
DxoShadowModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoShadowModule });
DxoShadowModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShadowModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoShadowComponent
      ],
      exports: [
        DxoShadowComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoShadowModule, { declarations: [DxoShadowComponent], exports: [DxoShadowComponent] });
})();
var DxoShowEventComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get delay() {
    return this._getOption("delay");
  }
  set delay(value) {
    this._setOption("delay", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get _optionPath() {
    return "showEvent";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoShowEventComponent.ɵfac = function DxoShowEventComponent_Factory(t) {
  return new (t || DxoShowEventComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoShowEventComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoShowEventComponent, selectors: [["dxo-show-event"]], inputs: { delay: "delay", name: "name" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoShowEventComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowEventComponent, [{
    type: Component,
    args: [{
      selector: "dxo-show-event",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { delay: [{
    type: Input
  }], name: [{
    type: Input
  }] });
})();
var DxoShowEventModule = class {
};
DxoShowEventModule.ɵfac = function DxoShowEventModule_Factory(t) {
  return new (t || DxoShowEventModule)();
};
DxoShowEventModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoShowEventModule });
DxoShowEventModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowEventModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoShowEventComponent
      ],
      exports: [
        DxoShowEventComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoShowEventModule, { declarations: [DxoShowEventComponent], exports: [DxoShowEventComponent] });
})();
var DxoShowFirstSubmenuModeComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get delay() {
    return this._getOption("delay");
  }
  set delay(value) {
    this._setOption("delay", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get _optionPath() {
    return "showFirstSubmenuMode";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoShowFirstSubmenuModeComponent.ɵfac = function DxoShowFirstSubmenuModeComponent_Factory(t) {
  return new (t || DxoShowFirstSubmenuModeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoShowFirstSubmenuModeComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoShowFirstSubmenuModeComponent, selectors: [["dxo-show-first-submenu-mode"]], inputs: { delay: "delay", name: "name" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoShowFirstSubmenuModeComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowFirstSubmenuModeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-show-first-submenu-mode",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { delay: [{
    type: Input
  }], name: [{
    type: Input
  }] });
})();
var DxoShowFirstSubmenuModeModule = class {
};
DxoShowFirstSubmenuModeModule.ɵfac = function DxoShowFirstSubmenuModeModule_Factory(t) {
  return new (t || DxoShowFirstSubmenuModeModule)();
};
DxoShowFirstSubmenuModeModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoShowFirstSubmenuModeModule });
DxoShowFirstSubmenuModeModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowFirstSubmenuModeModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoShowFirstSubmenuModeComponent
      ],
      exports: [
        DxoShowFirstSubmenuModeComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoShowFirstSubmenuModeModule, { declarations: [DxoShowFirstSubmenuModeComponent], exports: [DxoShowFirstSubmenuModeComponent] });
})();
var DxoShowSubmenuModeComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get delay() {
    return this._getOption("delay");
  }
  set delay(value) {
    this._setOption("delay", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get _optionPath() {
    return "showSubmenuMode";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoShowSubmenuModeComponent.ɵfac = function DxoShowSubmenuModeComponent_Factory(t) {
  return new (t || DxoShowSubmenuModeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoShowSubmenuModeComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoShowSubmenuModeComponent, selectors: [["dxo-show-submenu-mode"]], inputs: { delay: "delay", name: "name" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoShowSubmenuModeComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowSubmenuModeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-show-submenu-mode",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { delay: [{
    type: Input
  }], name: [{
    type: Input
  }] });
})();
var DxoShowSubmenuModeModule = class {
};
DxoShowSubmenuModeModule.ɵfac = function DxoShowSubmenuModeModule_Factory(t) {
  return new (t || DxoShowSubmenuModeModule)();
};
DxoShowSubmenuModeModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoShowSubmenuModeModule });
DxoShowSubmenuModeModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowSubmenuModeModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoShowSubmenuModeComponent
      ],
      exports: [
        DxoShowSubmenuModeComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoShowSubmenuModeModule, { declarations: [DxoShowSubmenuModeComponent], exports: [DxoShowSubmenuModeComponent] });
})();
var DxoShowComponent = class extends DxoAnimationConfig {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "show";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoShowComponent.ɵfac = function DxoShowComponent_Factory(t) {
  return new (t || DxoShowComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoShowComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoShowComponent, selectors: [["dxo-show"]], inputs: { complete: "complete", delay: "delay", direction: "direction", duration: "duration", easing: "easing", from: "from", staggerDelay: "staggerDelay", start: "start", to: "to", type: "type" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoShowComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowComponent, [{
    type: Component,
    args: [{
      selector: "dxo-show",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "complete",
        "delay",
        "direction",
        "duration",
        "easing",
        "from",
        "staggerDelay",
        "start",
        "to",
        "type"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoShowModule = class {
};
DxoShowModule.ɵfac = function DxoShowModule_Factory(t) {
  return new (t || DxoShowModule)();
};
DxoShowModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoShowModule });
DxoShowModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShowModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoShowComponent
      ],
      exports: [
        DxoShowComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoShowModule, { declarations: [DxoShowComponent], exports: [DxoShowComponent] });
})();
var DxoShutterComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get _optionPath() {
    return "shutter";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoShutterComponent.ɵfac = function DxoShutterComponent_Factory(t) {
  return new (t || DxoShutterComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoShutterComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoShutterComponent, selectors: [["dxo-shutter"]], inputs: { color: "color", opacity: "opacity" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoShutterComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShutterComponent, [{
    type: Component,
    args: [{
      selector: "dxo-shutter",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], opacity: [{
    type: Input
  }] });
})();
var DxoShutterModule = class {
};
DxoShutterModule.ɵfac = function DxoShutterModule_Factory(t) {
  return new (t || DxoShutterModule)();
};
DxoShutterModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoShutterModule });
DxoShutterModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoShutterModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoShutterComponent
      ],
      exports: [
        DxoShutterComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoShutterModule, { declarations: [DxoShutterComponent], exports: [DxoShutterComponent] });
})();
var DxoSizeComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "size";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSizeComponent.ɵfac = function DxoSizeComponent_Factory(t) {
  return new (t || DxoSizeComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSizeComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSizeComponent, selectors: [["dxo-size"]], inputs: { height: "height", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSizeComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSizeComponent, [{
    type: Component,
    args: [{
      selector: "dxo-size",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { height: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoSizeModule = class {
};
DxoSizeModule.ɵfac = function DxoSizeModule_Factory(t) {
  return new (t || DxoSizeModule)();
};
DxoSizeModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSizeModule });
DxoSizeModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSizeModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSizeComponent
      ],
      exports: [
        DxoSizeComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSizeModule, { declarations: [DxoSizeComponent], exports: [DxoSizeComponent] });
})();
var DxoSliderHandleComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "sliderHandle";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSliderHandleComponent.ɵfac = function DxoSliderHandleComponent_Factory(t) {
  return new (t || DxoSliderHandleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSliderHandleComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSliderHandleComponent, selectors: [["dxo-slider-handle"]], inputs: { color: "color", opacity: "opacity", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSliderHandleComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSliderHandleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-slider-handle",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], opacity: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoSliderHandleModule = class {
};
DxoSliderHandleModule.ɵfac = function DxoSliderHandleModule_Factory(t) {
  return new (t || DxoSliderHandleModule)();
};
DxoSliderHandleModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSliderHandleModule });
DxoSliderHandleModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSliderHandleModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSliderHandleComponent
      ],
      exports: [
        DxoSliderHandleComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSliderHandleModule, { declarations: [DxoSliderHandleComponent], exports: [DxoSliderHandleComponent] });
})();
var DxoSliderMarkerComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get format() {
    return this._getOption("format");
  }
  set format(value) {
    this._setOption("format", value);
  }
  get invalidRangeColor() {
    return this._getOption("invalidRangeColor");
  }
  set invalidRangeColor(value) {
    this._setOption("invalidRangeColor", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get placeholderHeight() {
    return this._getOption("placeholderHeight");
  }
  set placeholderHeight(value) {
    this._setOption("placeholderHeight", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "sliderMarker";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSliderMarkerComponent.ɵfac = function DxoSliderMarkerComponent_Factory(t) {
  return new (t || DxoSliderMarkerComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSliderMarkerComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSliderMarkerComponent, selectors: [["dxo-slider-marker"]], inputs: { color: "color", customizeText: "customizeText", font: "font", format: "format", invalidRangeColor: "invalidRangeColor", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", placeholderHeight: "placeholderHeight", visible: "visible" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSliderMarkerComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSliderMarkerComponent, [{
    type: Component,
    args: [{
      selector: "dxo-slider-marker",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], customizeText: [{
    type: Input
  }], font: [{
    type: Input
  }], format: [{
    type: Input
  }], invalidRangeColor: [{
    type: Input
  }], paddingLeftRight: [{
    type: Input
  }], paddingTopBottom: [{
    type: Input
  }], placeholderHeight: [{
    type: Input
  }], visible: [{
    type: Input
  }] });
})();
var DxoSliderMarkerModule = class {
};
DxoSliderMarkerModule.ɵfac = function DxoSliderMarkerModule_Factory(t) {
  return new (t || DxoSliderMarkerModule)();
};
DxoSliderMarkerModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSliderMarkerModule });
DxoSliderMarkerModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSliderMarkerModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSliderMarkerComponent
      ],
      exports: [
        DxoSliderMarkerComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSliderMarkerModule, { declarations: [DxoSliderMarkerComponent], exports: [DxoSliderMarkerComponent] });
})();
var DxoSmallValuesGroupingComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get groupName() {
    return this._getOption("groupName");
  }
  set groupName(value) {
    this._setOption("groupName", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get threshold() {
    return this._getOption("threshold");
  }
  set threshold(value) {
    this._setOption("threshold", value);
  }
  get topCount() {
    return this._getOption("topCount");
  }
  set topCount(value) {
    this._setOption("topCount", value);
  }
  get _optionPath() {
    return "smallValuesGrouping";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSmallValuesGroupingComponent.ɵfac = function DxoSmallValuesGroupingComponent_Factory(t) {
  return new (t || DxoSmallValuesGroupingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSmallValuesGroupingComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSmallValuesGroupingComponent, selectors: [["dxo-small-values-grouping"]], inputs: { groupName: "groupName", mode: "mode", threshold: "threshold", topCount: "topCount" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSmallValuesGroupingComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSmallValuesGroupingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-small-values-grouping",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { groupName: [{
    type: Input
  }], mode: [{
    type: Input
  }], threshold: [{
    type: Input
  }], topCount: [{
    type: Input
  }] });
})();
var DxoSmallValuesGroupingModule = class {
};
DxoSmallValuesGroupingModule.ɵfac = function DxoSmallValuesGroupingModule_Factory(t) {
  return new (t || DxoSmallValuesGroupingModule)();
};
DxoSmallValuesGroupingModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSmallValuesGroupingModule });
DxoSmallValuesGroupingModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSmallValuesGroupingModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSmallValuesGroupingComponent
      ],
      exports: [
        DxoSmallValuesGroupingComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSmallValuesGroupingModule, { declarations: [DxoSmallValuesGroupingComponent], exports: [DxoSmallValuesGroupingComponent] });
})();
var DxiSortByGroupSummaryInfoComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get groupColumn() {
    return this._getOption("groupColumn");
  }
  set groupColumn(value) {
    this._setOption("groupColumn", value);
  }
  get sortOrder() {
    return this._getOption("sortOrder");
  }
  set sortOrder(value) {
    this._setOption("sortOrder", value);
  }
  get summaryItem() {
    return this._getOption("summaryItem");
  }
  set summaryItem(value) {
    this._setOption("summaryItem", value);
  }
  get _optionPath() {
    return "sortByGroupSummaryInfo";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiSortByGroupSummaryInfoComponent.ɵfac = function DxiSortByGroupSummaryInfoComponent_Factory(t) {
  return new (t || DxiSortByGroupSummaryInfoComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiSortByGroupSummaryInfoComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiSortByGroupSummaryInfoComponent, selectors: [["dxi-sort-by-group-summary-info"]], inputs: { groupColumn: "groupColumn", sortOrder: "sortOrder", summaryItem: "summaryItem" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiSortByGroupSummaryInfoComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiSortByGroupSummaryInfoComponent, [{
    type: Component,
    args: [{
      selector: "dxi-sort-by-group-summary-info",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { groupColumn: [{
    type: Input
  }], sortOrder: [{
    type: Input
  }], summaryItem: [{
    type: Input
  }] });
})();
var DxiSortByGroupSummaryInfoModule = class {
};
DxiSortByGroupSummaryInfoModule.ɵfac = function DxiSortByGroupSummaryInfoModule_Factory(t) {
  return new (t || DxiSortByGroupSummaryInfoModule)();
};
DxiSortByGroupSummaryInfoModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiSortByGroupSummaryInfoModule });
DxiSortByGroupSummaryInfoModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiSortByGroupSummaryInfoModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiSortByGroupSummaryInfoComponent
      ],
      exports: [
        DxiSortByGroupSummaryInfoComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiSortByGroupSummaryInfoModule, { declarations: [DxiSortByGroupSummaryInfoComponent], exports: [DxiSortByGroupSummaryInfoComponent] });
})();
var DxoGanttSorting = class extends NestedOption {
  get ascendingText() {
    return this._getOption("ascendingText");
  }
  set ascendingText(value) {
    this._setOption("ascendingText", value);
  }
  get clearText() {
    return this._getOption("clearText");
  }
  set clearText(value) {
    this._setOption("clearText", value);
  }
  get descendingText() {
    return this._getOption("descendingText");
  }
  set descendingText(value) {
    this._setOption("descendingText", value);
  }
  get mode() {
    return this._getOption("mode");
  }
  set mode(value) {
    this._setOption("mode", value);
  }
  get showSortIndexes() {
    return this._getOption("showSortIndexes");
  }
  set showSortIndexes(value) {
    this._setOption("showSortIndexes", value);
  }
};
DxoGanttSorting.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoGanttSorting_BaseFactory;
  return function DxoGanttSorting_Factory(t) {
    return (ɵDxoGanttSorting_BaseFactory || (ɵDxoGanttSorting_BaseFactory = ɵɵgetInheritedFactory(DxoGanttSorting)))(t || DxoGanttSorting);
  };
}();
DxoGanttSorting.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoGanttSorting, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoGanttSorting_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGanttSorting, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoSortingComponent = class extends DxoGanttSorting {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "sorting";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSortingComponent.ɵfac = function DxoSortingComponent_Factory(t) {
  return new (t || DxoSortingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSortingComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSortingComponent, selectors: [["dxo-sorting"]], inputs: { ascendingText: "ascendingText", clearText: "clearText", descendingText: "descendingText", mode: "mode", showSortIndexes: "showSortIndexes" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSortingComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSortingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-sorting",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "ascendingText",
        "clearText",
        "descendingText",
        "mode",
        "showSortIndexes"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoSortingModule = class {
};
DxoSortingModule.ɵfac = function DxoSortingModule_Factory(t) {
  return new (t || DxoSortingModule)();
};
DxoSortingModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSortingModule });
DxoSortingModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSortingModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSortingComponent
      ],
      exports: [
        DxoSortingComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSortingModule, { declarations: [DxoSortingComponent], exports: [DxoSortingComponent] });
})();
var DxoSourceComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get grouping() {
    return this._getOption("grouping");
  }
  set grouping(value) {
    this._setOption("grouping", value);
  }
  get layer() {
    return this._getOption("layer");
  }
  set layer(value) {
    this._setOption("layer", value);
  }
  get _optionPath() {
    return "source";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSourceComponent.ɵfac = function DxoSourceComponent_Factory(t) {
  return new (t || DxoSourceComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSourceComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSourceComponent, selectors: [["dxo-source"]], inputs: { grouping: "grouping", layer: "layer" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSourceComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSourceComponent, [{
    type: Component,
    args: [{
      selector: "dxo-source",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { grouping: [{
    type: Input
  }], layer: [{
    type: Input
  }] });
})();
var DxoSourceModule = class {
};
DxoSourceModule.ɵfac = function DxoSourceModule_Factory(t) {
  return new (t || DxoSourceModule)();
};
DxoSourceModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSourceModule });
DxoSourceModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSourceModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSourceComponent
      ],
      exports: [
        DxoSourceComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSourceModule, { declarations: [DxoSourceComponent], exports: [DxoSourceComponent] });
})();
var DxoSplineComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "spline";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSplineComponent.ɵfac = function DxoSplineComponent_Factory(t) {
  return new (t || DxoSplineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSplineComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSplineComponent, selectors: [["dxo-spline"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSplineComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSplineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-spline",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoSplineModule = class {
};
DxoSplineModule.ɵfac = function DxoSplineModule_Factory(t) {
  return new (t || DxoSplineModule)();
};
DxoSplineModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSplineModule });
DxoSplineModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSplineModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSplineComponent
      ],
      exports: [
        DxoSplineComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSplineModule, { declarations: [DxoSplineComponent], exports: [DxoSplineComponent] });
})();
var DxoSplineareaComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "splinearea";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSplineareaComponent.ɵfac = function DxoSplineareaComponent_Factory(t) {
  return new (t || DxoSplineareaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSplineareaComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSplineareaComponent, selectors: [["dxo-splinearea"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSplineareaComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSplineareaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-splinearea",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoSplineareaModule = class {
};
DxoSplineareaModule.ɵfac = function DxoSplineareaModule_Factory(t) {
  return new (t || DxoSplineareaModule)();
};
DxoSplineareaModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSplineareaModule });
DxoSplineareaModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSplineareaModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSplineareaComponent
      ],
      exports: [
        DxoSplineareaComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSplineareaModule, { declarations: [DxoSplineareaComponent], exports: [DxoSplineareaComponent] });
})();
var DxoStackedareaComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "stackedarea";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoStackedareaComponent.ɵfac = function DxoStackedareaComponent_Factory(t) {
  return new (t || DxoStackedareaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoStackedareaComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoStackedareaComponent, selectors: [["dxo-stackedarea"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoStackedareaComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedareaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-stackedarea",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoStackedareaModule = class {
};
DxoStackedareaModule.ɵfac = function DxoStackedareaModule_Factory(t) {
  return new (t || DxoStackedareaModule)();
};
DxoStackedareaModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoStackedareaModule });
DxoStackedareaModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedareaModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoStackedareaComponent
      ],
      exports: [
        DxoStackedareaComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoStackedareaModule, { declarations: [DxoStackedareaComponent], exports: [DxoStackedareaComponent] });
})();
var DxoStackedbarComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "stackedbar";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoStackedbarComponent.ɵfac = function DxoStackedbarComponent_Factory(t) {
  return new (t || DxoStackedbarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoStackedbarComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoStackedbarComponent, selectors: [["dxo-stackedbar"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", closed: "closed" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoStackedbarComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedbarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-stackedbar",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width",
        "closed"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoStackedbarModule = class {
};
DxoStackedbarModule.ɵfac = function DxoStackedbarModule_Factory(t) {
  return new (t || DxoStackedbarModule)();
};
DxoStackedbarModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoStackedbarModule });
DxoStackedbarModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedbarModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoStackedbarComponent
      ],
      exports: [
        DxoStackedbarComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoStackedbarModule, { declarations: [DxoStackedbarComponent], exports: [DxoStackedbarComponent] });
})();
var DxoStackedlineComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "stackedline";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoStackedlineComponent.ɵfac = function DxoStackedlineComponent_Factory(t) {
  return new (t || DxoStackedlineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoStackedlineComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoStackedlineComponent, selectors: [["dxo-stackedline"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoStackedlineComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedlineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-stackedline",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoStackedlineModule = class {
};
DxoStackedlineModule.ɵfac = function DxoStackedlineModule_Factory(t) {
  return new (t || DxoStackedlineModule)();
};
DxoStackedlineModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoStackedlineModule });
DxoStackedlineModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedlineModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoStackedlineComponent
      ],
      exports: [
        DxoStackedlineComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoStackedlineModule, { declarations: [DxoStackedlineComponent], exports: [DxoStackedlineComponent] });
})();
var DxoStackedsplineComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "stackedspline";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoStackedsplineComponent.ɵfac = function DxoStackedsplineComponent_Factory(t) {
  return new (t || DxoStackedsplineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoStackedsplineComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoStackedsplineComponent, selectors: [["dxo-stackedspline"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoStackedsplineComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedsplineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-stackedspline",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoStackedsplineModule = class {
};
DxoStackedsplineModule.ɵfac = function DxoStackedsplineModule_Factory(t) {
  return new (t || DxoStackedsplineModule)();
};
DxoStackedsplineModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoStackedsplineModule });
DxoStackedsplineModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedsplineModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoStackedsplineComponent
      ],
      exports: [
        DxoStackedsplineComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoStackedsplineModule, { declarations: [DxoStackedsplineComponent], exports: [DxoStackedsplineComponent] });
})();
var DxoStackedsplineareaComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "stackedsplinearea";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoStackedsplineareaComponent.ɵfac = function DxoStackedsplineareaComponent_Factory(t) {
  return new (t || DxoStackedsplineareaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoStackedsplineareaComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoStackedsplineareaComponent, selectors: [["dxo-stackedsplinearea"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoStackedsplineareaComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedsplineareaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-stackedsplinearea",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoStackedsplineareaModule = class {
};
DxoStackedsplineareaModule.ɵfac = function DxoStackedsplineareaModule_Factory(t) {
  return new (t || DxoStackedsplineareaModule)();
};
DxoStackedsplineareaModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoStackedsplineareaModule });
DxoStackedsplineareaModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStackedsplineareaModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoStackedsplineareaComponent
      ],
      exports: [
        DxoStackedsplineareaComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoStackedsplineareaModule, { declarations: [DxoStackedsplineareaComponent], exports: [DxoStackedsplineareaComponent] });
})();
var DxoStateStoringComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get customLoad() {
    return this._getOption("customLoad");
  }
  set customLoad(value) {
    this._setOption("customLoad", value);
  }
  get customSave() {
    return this._getOption("customSave");
  }
  set customSave(value) {
    this._setOption("customSave", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get savingTimeout() {
    return this._getOption("savingTimeout");
  }
  set savingTimeout(value) {
    this._setOption("savingTimeout", value);
  }
  get storageKey() {
    return this._getOption("storageKey");
  }
  set storageKey(value) {
    this._setOption("storageKey", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get _optionPath() {
    return "stateStoring";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoStateStoringComponent.ɵfac = function DxoStateStoringComponent_Factory(t) {
  return new (t || DxoStateStoringComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoStateStoringComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoStateStoringComponent, selectors: [["dxo-state-storing"]], inputs: { customLoad: "customLoad", customSave: "customSave", enabled: "enabled", savingTimeout: "savingTimeout", storageKey: "storageKey", type: "type" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoStateStoringComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStateStoringComponent, [{
    type: Component,
    args: [{
      selector: "dxo-state-storing",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { customLoad: [{
    type: Input
  }], customSave: [{
    type: Input
  }], enabled: [{
    type: Input
  }], savingTimeout: [{
    type: Input
  }], storageKey: [{
    type: Input
  }], type: [{
    type: Input
  }] });
})();
var DxoStateStoringModule = class {
};
DxoStateStoringModule.ɵfac = function DxoStateStoringModule_Factory(t) {
  return new (t || DxoStateStoringModule)();
};
DxoStateStoringModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoStateStoringModule });
DxoStateStoringModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStateStoringModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoStateStoringComponent
      ],
      exports: [
        DxoStateStoringComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoStateStoringModule, { declarations: [DxoStateStoringComponent], exports: [DxoStateStoringComponent] });
})();
var DxoStepareaComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "steparea";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoStepareaComponent.ɵfac = function DxoStepareaComponent_Factory(t) {
  return new (t || DxoStepareaComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoStepareaComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoStepareaComponent, selectors: [["dxo-steparea"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoStepareaComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStepareaComponent, [{
    type: Component,
    args: [{
      selector: "dxo-steparea",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoStepareaModule = class {
};
DxoStepareaModule.ɵfac = function DxoStepareaModule_Factory(t) {
  return new (t || DxoStepareaModule)();
};
DxoStepareaModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoStepareaModule });
DxoStepareaModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStepareaModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoStepareaComponent
      ],
      exports: [
        DxoStepareaComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoStepareaModule, { declarations: [DxoStepareaComponent], exports: [DxoStepareaComponent] });
})();
var DxoSteplineComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "stepline";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSteplineComponent.ɵfac = function DxoSteplineComponent_Factory(t) {
  return new (t || DxoSteplineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSteplineComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSteplineComponent, selectors: [["dxo-stepline"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSteplineComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSteplineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-stepline",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoSteplineModule = class {
};
DxoSteplineModule.ɵfac = function DxoSteplineModule_Factory(t) {
  return new (t || DxoSteplineModule)();
};
DxoSteplineModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSteplineModule });
DxoSteplineModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSteplineModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSteplineComponent
      ],
      exports: [
        DxoSteplineComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSteplineModule, { declarations: [DxoSteplineComponent], exports: [DxoSteplineComponent] });
})();
var DxoStockComponent = class extends DxoChartCommonSeriesSettings {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "stock";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoStockComponent.ɵfac = function DxoStockComponent_Factory(t) {
  return new (t || DxoStockComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoStockComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoStockComponent, selectors: [["dxo-stock"]], inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoStockComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStockComponent, [{
    type: Component,
    args: [{
      selector: "dxo-stock",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "aggregation",
        "area",
        "argumentField",
        "axis",
        "bar",
        "barOverlapGroup",
        "barPadding",
        "barWidth",
        "border",
        "bubble",
        "candlestick",
        "closeValueField",
        "color",
        "cornerRadius",
        "dashStyle",
        "fullstackedarea",
        "fullstackedbar",
        "fullstackedline",
        "fullstackedspline",
        "fullstackedsplinearea",
        "highValueField",
        "hoverMode",
        "hoverStyle",
        "ignoreEmptyPoints",
        "innerColor",
        "label",
        "line",
        "lowValueField",
        "maxLabelCount",
        "minBarSize",
        "opacity",
        "openValueField",
        "pane",
        "point",
        "rangearea",
        "rangebar",
        "rangeValue1Field",
        "rangeValue2Field",
        "reduction",
        "scatter",
        "selectionMode",
        "selectionStyle",
        "showInLegend",
        "sizeField",
        "spline",
        "splinearea",
        "stack",
        "stackedarea",
        "stackedbar",
        "stackedline",
        "stackedspline",
        "stackedsplinearea",
        "steparea",
        "stepline",
        "stock",
        "tagField",
        "type",
        "valueErrorBar",
        "valueField",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoStockModule = class {
};
DxoStockModule.ɵfac = function DxoStockModule_Factory(t) {
  return new (t || DxoStockModule)();
};
DxoStockModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoStockModule });
DxoStockModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStockModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoStockComponent
      ],
      exports: [
        DxoStockComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoStockModule, { declarations: [DxoStockComponent], exports: [DxoStockComponent] });
})();
var DxoStoreComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get _optionPath() {
    return "store";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoStoreComponent.ɵfac = function DxoStoreComponent_Factory(t) {
  return new (t || DxoStoreComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoStoreComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoStoreComponent, selectors: [["dxo-store"]], inputs: { type: "type" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoStoreComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStoreComponent, [{
    type: Component,
    args: [{
      selector: "dxo-store",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { type: [{
    type: Input
  }] });
})();
var DxoStoreModule = class {
};
DxoStoreModule.ɵfac = function DxoStoreModule_Factory(t) {
  return new (t || DxoStoreModule)();
};
DxoStoreModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoStoreModule });
DxoStoreModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStoreModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoStoreComponent
      ],
      exports: [
        DxoStoreComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoStoreModule, { declarations: [DxoStoreComponent], exports: [DxoStoreComponent] });
})();
var DxiGanttStripLine = class extends CollectionNestedOption {
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get end() {
    return this._getOption("end");
  }
  set end(value) {
    this._setOption("end", value);
  }
  get start() {
    return this._getOption("start");
  }
  set start(value) {
    this._setOption("start", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
};
DxiGanttStripLine.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxiGanttStripLine_BaseFactory;
  return function DxiGanttStripLine_Factory(t) {
    return (ɵDxiGanttStripLine_BaseFactory || (ɵDxiGanttStripLine_BaseFactory = ɵɵgetInheritedFactory(DxiGanttStripLine)))(t || DxiGanttStripLine);
  };
}();
DxiGanttStripLine.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiGanttStripLine, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiGanttStripLine_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiGanttStripLine, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxiStripLineComponent = class extends DxiGanttStripLine {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "stripLines";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiStripLineComponent.ɵfac = function DxiStripLineComponent_Factory(t) {
  return new (t || DxiStripLineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiStripLineComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiStripLineComponent, selectors: [["dxi-strip-line"]], inputs: { cssClass: "cssClass", end: "end", start: "start", title: "title" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiStripLineComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiStripLineComponent, [{
    type: Component,
    args: [{
      selector: "dxi-strip-line",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "cssClass",
        "end",
        "start",
        "title"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxiStripLineModule = class {
};
DxiStripLineModule.ɵfac = function DxiStripLineModule_Factory(t) {
  return new (t || DxiStripLineModule)();
};
DxiStripLineModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiStripLineModule });
DxiStripLineModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiStripLineModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiStripLineComponent
      ],
      exports: [
        DxiStripLineComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiStripLineModule, { declarations: [DxiStripLineComponent], exports: [DxiStripLineComponent] });
})();
var DxoStripStyleComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get _optionPath() {
    return "stripStyle";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoStripStyleComponent.ɵfac = function DxoStripStyleComponent_Factory(t) {
  return new (t || DxoStripStyleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoStripStyleComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoStripStyleComponent, selectors: [["dxo-strip-style"]], inputs: { label: "label", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoStripStyleComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStripStyleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-strip-style",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { label: [{
    type: Input
  }], paddingLeftRight: [{
    type: Input
  }], paddingTopBottom: [{
    type: Input
  }] });
})();
var DxoStripStyleModule = class {
};
DxoStripStyleModule.ɵfac = function DxoStripStyleModule_Factory(t) {
  return new (t || DxoStripStyleModule)();
};
DxoStripStyleModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoStripStyleModule });
DxoStripStyleModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoStripStyleModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoStripStyleComponent
      ],
      exports: [
        DxoStripStyleComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoStripStyleModule, { declarations: [DxoStripStyleComponent], exports: [DxoStripStyleComponent] });
})();
var DxoSubtitleComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get textOverflow() {
    return this._getOption("textOverflow");
  }
  set textOverflow(value) {
    this._setOption("textOverflow", value);
  }
  get wordWrap() {
    return this._getOption("wordWrap");
  }
  set wordWrap(value) {
    this._setOption("wordWrap", value);
  }
  get _optionPath() {
    return "subtitle";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSubtitleComponent.ɵfac = function DxoSubtitleComponent_Factory(t) {
  return new (t || DxoSubtitleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSubtitleComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSubtitleComponent, selectors: [["dxo-subtitle"]], inputs: { font: "font", offset: "offset", text: "text", textOverflow: "textOverflow", wordWrap: "wordWrap" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSubtitleComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSubtitleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-subtitle",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { font: [{
    type: Input
  }], offset: [{
    type: Input
  }], text: [{
    type: Input
  }], textOverflow: [{
    type: Input
  }], wordWrap: [{
    type: Input
  }] });
})();
var DxoSubtitleModule = class {
};
DxoSubtitleModule.ɵfac = function DxoSubtitleModule_Factory(t) {
  return new (t || DxoSubtitleModule)();
};
DxoSubtitleModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSubtitleModule });
DxoSubtitleModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSubtitleModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSubtitleComponent
      ],
      exports: [
        DxoSubtitleComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSubtitleModule, { declarations: [DxoSubtitleComponent], exports: [DxoSubtitleComponent] });
})();
var DxoGaugeIndicator = class extends NestedOption {
  get arrowLength() {
    return this._getOption("arrowLength");
  }
  set arrowLength(value) {
    this._setOption("arrowLength", value);
  }
  get backgroundColor() {
    return this._getOption("backgroundColor");
  }
  set backgroundColor(value) {
    this._setOption("backgroundColor", value);
  }
  get baseValue() {
    return this._getOption("baseValue");
  }
  set baseValue(value) {
    this._setOption("baseValue", value);
  }
  get beginAdaptingAtRadius() {
    return this._getOption("beginAdaptingAtRadius");
  }
  set beginAdaptingAtRadius(value) {
    this._setOption("beginAdaptingAtRadius", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get horizontalOrientation() {
    return this._getOption("horizontalOrientation");
  }
  set horizontalOrientation(value) {
    this._setOption("horizontalOrientation", value);
  }
  get indentFromCenter() {
    return this._getOption("indentFromCenter");
  }
  set indentFromCenter(value) {
    this._setOption("indentFromCenter", value);
  }
  get length() {
    return this._getOption("length");
  }
  set length(value) {
    this._setOption("length", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
  get palette() {
    return this._getOption("palette");
  }
  set palette(value) {
    this._setOption("palette", value);
  }
  get secondColor() {
    return this._getOption("secondColor");
  }
  set secondColor(value) {
    this._setOption("secondColor", value);
  }
  get secondFraction() {
    return this._getOption("secondFraction");
  }
  set secondFraction(value) {
    this._setOption("secondFraction", value);
  }
  get size() {
    return this._getOption("size");
  }
  set size(value) {
    this._setOption("size", value);
  }
  get spindleGapSize() {
    return this._getOption("spindleGapSize");
  }
  set spindleGapSize(value) {
    this._setOption("spindleGapSize", value);
  }
  get spindleSize() {
    return this._getOption("spindleSize");
  }
  set spindleSize(value) {
    this._setOption("spindleSize", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get verticalOrientation() {
    return this._getOption("verticalOrientation");
  }
  set verticalOrientation(value) {
    this._setOption("verticalOrientation", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
};
DxoGaugeIndicator.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoGaugeIndicator_BaseFactory;
  return function DxoGaugeIndicator_Factory(t) {
    return (ɵDxoGaugeIndicator_BaseFactory || (ɵDxoGaugeIndicator_BaseFactory = ɵɵgetInheritedFactory(DxoGaugeIndicator)))(t || DxoGaugeIndicator);
  };
}();
DxoGaugeIndicator.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoGaugeIndicator, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoGaugeIndicator_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGaugeIndicator, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoSubvalueIndicatorComponent = class extends DxoGaugeIndicator {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "subvalueIndicator";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSubvalueIndicatorComponent.ɵfac = function DxoSubvalueIndicatorComponent_Factory(t) {
  return new (t || DxoSubvalueIndicatorComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSubvalueIndicatorComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSubvalueIndicatorComponent, selectors: [["dxo-subvalue-indicator"]], inputs: { arrowLength: "arrowLength", backgroundColor: "backgroundColor", baseValue: "baseValue", beginAdaptingAtRadius: "beginAdaptingAtRadius", color: "color", horizontalOrientation: "horizontalOrientation", indentFromCenter: "indentFromCenter", length: "length", offset: "offset", palette: "palette", secondColor: "secondColor", secondFraction: "secondFraction", size: "size", spindleGapSize: "spindleGapSize", spindleSize: "spindleSize", text: "text", type: "type", verticalOrientation: "verticalOrientation", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSubvalueIndicatorComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSubvalueIndicatorComponent, [{
    type: Component,
    args: [{
      selector: "dxo-subvalue-indicator",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "arrowLength",
        "backgroundColor",
        "baseValue",
        "beginAdaptingAtRadius",
        "color",
        "horizontalOrientation",
        "indentFromCenter",
        "length",
        "offset",
        "palette",
        "secondColor",
        "secondFraction",
        "size",
        "spindleGapSize",
        "spindleSize",
        "text",
        "type",
        "verticalOrientation",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoSubvalueIndicatorModule = class {
};
DxoSubvalueIndicatorModule.ɵfac = function DxoSubvalueIndicatorModule_Factory(t) {
  return new (t || DxoSubvalueIndicatorModule)();
};
DxoSubvalueIndicatorModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSubvalueIndicatorModule });
DxoSubvalueIndicatorModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSubvalueIndicatorModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSubvalueIndicatorComponent
      ],
      exports: [
        DxoSubvalueIndicatorComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSubvalueIndicatorModule, { declarations: [DxoSubvalueIndicatorComponent], exports: [DxoSubvalueIndicatorComponent] });
})();
var DxiTotalItemComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get alignment() {
    return this._getOption("alignment");
  }
  set alignment(value) {
    this._setOption("alignment", value);
  }
  get column() {
    return this._getOption("column");
  }
  set column(value) {
    this._setOption("column", value);
  }
  get cssClass() {
    return this._getOption("cssClass");
  }
  set cssClass(value) {
    this._setOption("cssClass", value);
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get displayFormat() {
    return this._getOption("displayFormat");
  }
  set displayFormat(value) {
    this._setOption("displayFormat", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get showInColumn() {
    return this._getOption("showInColumn");
  }
  set showInColumn(value) {
    this._setOption("showInColumn", value);
  }
  get skipEmptyValues() {
    return this._getOption("skipEmptyValues");
  }
  set skipEmptyValues(value) {
    this._setOption("skipEmptyValues", value);
  }
  get summaryType() {
    return this._getOption("summaryType");
  }
  set summaryType(value) {
    this._setOption("summaryType", value);
  }
  get valueFormat() {
    return this._getOption("valueFormat");
  }
  set valueFormat(value) {
    this._setOption("valueFormat", value);
  }
  get _optionPath() {
    return "totalItems";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiTotalItemComponent.ɵfac = function DxiTotalItemComponent_Factory(t) {
  return new (t || DxiTotalItemComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiTotalItemComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiTotalItemComponent, selectors: [["dxi-total-item"]], inputs: { alignment: "alignment", column: "column", cssClass: "cssClass", customizeText: "customizeText", displayFormat: "displayFormat", name: "name", showInColumn: "showInColumn", skipEmptyValues: "skipEmptyValues", summaryType: "summaryType", valueFormat: "valueFormat" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiTotalItemComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiTotalItemComponent, [{
    type: Component,
    args: [{
      selector: "dxi-total-item",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { alignment: [{
    type: Input
  }], column: [{
    type: Input
  }], cssClass: [{
    type: Input
  }], customizeText: [{
    type: Input
  }], displayFormat: [{
    type: Input
  }], name: [{
    type: Input
  }], showInColumn: [{
    type: Input
  }], skipEmptyValues: [{
    type: Input
  }], summaryType: [{
    type: Input
  }], valueFormat: [{
    type: Input
  }] });
})();
var DxiTotalItemModule = class {
};
DxiTotalItemModule.ɵfac = function DxiTotalItemModule_Factory(t) {
  return new (t || DxiTotalItemModule)();
};
DxiTotalItemModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiTotalItemModule });
DxiTotalItemModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiTotalItemModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiTotalItemComponent
      ],
      exports: [
        DxiTotalItemComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiTotalItemModule, { declarations: [DxiTotalItemComponent], exports: [DxiTotalItemComponent] });
})();
var DxoSummaryComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get calculateCustomSummary() {
    return this._getOption("calculateCustomSummary");
  }
  set calculateCustomSummary(value) {
    this._setOption("calculateCustomSummary", value);
  }
  get groupItems() {
    return this._getOption("groupItems");
  }
  set groupItems(value) {
    this._setOption("groupItems", value);
  }
  get recalculateWhileEditing() {
    return this._getOption("recalculateWhileEditing");
  }
  set recalculateWhileEditing(value) {
    this._setOption("recalculateWhileEditing", value);
  }
  get skipEmptyValues() {
    return this._getOption("skipEmptyValues");
  }
  set skipEmptyValues(value) {
    this._setOption("skipEmptyValues", value);
  }
  get texts() {
    return this._getOption("texts");
  }
  set texts(value) {
    this._setOption("texts", value);
  }
  get totalItems() {
    return this._getOption("totalItems");
  }
  set totalItems(value) {
    this._setOption("totalItems", value);
  }
  get _optionPath() {
    return "summary";
  }
  get groupItemsChildren() {
    return this._getOption("groupItems");
  }
  set groupItemsChildren(value) {
    this.setChildren("groupItems", value);
  }
  get totalItemsChildren() {
    return this._getOption("totalItems");
  }
  set totalItemsChildren(value) {
    this.setChildren("totalItems", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoSummaryComponent.ɵfac = function DxoSummaryComponent_Factory(t) {
  return new (t || DxoSummaryComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoSummaryComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoSummaryComponent, selectors: [["dxo-summary"]], contentQueries: function DxoSummaryComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiGroupItemComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiTotalItemComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.groupItemsChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.totalItemsChildren = _t);
  }
}, inputs: { calculateCustomSummary: "calculateCustomSummary", groupItems: "groupItems", recalculateWhileEditing: "recalculateWhileEditing", skipEmptyValues: "skipEmptyValues", texts: "texts", totalItems: "totalItems" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoSummaryComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSummaryComponent, [{
    type: Component,
    args: [{
      selector: "dxo-summary",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { calculateCustomSummary: [{
    type: Input
  }], groupItems: [{
    type: Input
  }], recalculateWhileEditing: [{
    type: Input
  }], skipEmptyValues: [{
    type: Input
  }], texts: [{
    type: Input
  }], totalItems: [{
    type: Input
  }], groupItemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiGroupItemComponent)]
  }], totalItemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiTotalItemComponent)]
  }] });
})();
var DxoSummaryModule = class {
};
DxoSummaryModule.ɵfac = function DxoSummaryModule_Factory(t) {
  return new (t || DxoSummaryModule)();
};
DxoSummaryModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoSummaryModule });
DxoSummaryModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoSummaryModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoSummaryComponent
      ],
      exports: [
        DxoSummaryComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoSummaryModule, { declarations: [DxoSummaryComponent], exports: [DxoSummaryComponent] });
})();
var DxoTabPanelOptions = class extends NestedOption {
  get accessKey() {
    return this._getOption("accessKey");
  }
  set accessKey(value) {
    this._setOption("accessKey", value);
  }
  get activeStateEnabled() {
    return this._getOption("activeStateEnabled");
  }
  set activeStateEnabled(value) {
    this._setOption("activeStateEnabled", value);
  }
  get animationEnabled() {
    return this._getOption("animationEnabled");
  }
  set animationEnabled(value) {
    this._setOption("animationEnabled", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get deferRendering() {
    return this._getOption("deferRendering");
  }
  set deferRendering(value) {
    this._setOption("deferRendering", value);
  }
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get elementAttr() {
    return this._getOption("elementAttr");
  }
  set elementAttr(value) {
    this._setOption("elementAttr", value);
  }
  get focusStateEnabled() {
    return this._getOption("focusStateEnabled");
  }
  set focusStateEnabled(value) {
    this._setOption("focusStateEnabled", value);
  }
  get height() {
    return this._getOption("height");
  }
  set height(value) {
    this._setOption("height", value);
  }
  get hint() {
    return this._getOption("hint");
  }
  set hint(value) {
    this._setOption("hint", value);
  }
  get hoverStateEnabled() {
    return this._getOption("hoverStateEnabled");
  }
  set hoverStateEnabled(value) {
    this._setOption("hoverStateEnabled", value);
  }
  get iconPosition() {
    return this._getOption("iconPosition");
  }
  set iconPosition(value) {
    this._setOption("iconPosition", value);
  }
  get itemHoldTimeout() {
    return this._getOption("itemHoldTimeout");
  }
  set itemHoldTimeout(value) {
    this._setOption("itemHoldTimeout", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get itemTemplate() {
    return this._getOption("itemTemplate");
  }
  set itemTemplate(value) {
    this._setOption("itemTemplate", value);
  }
  get itemTitleTemplate() {
    return this._getOption("itemTitleTemplate");
  }
  set itemTitleTemplate(value) {
    this._setOption("itemTitleTemplate", value);
  }
  get loop() {
    return this._getOption("loop");
  }
  set loop(value) {
    this._setOption("loop", value);
  }
  get noDataText() {
    return this._getOption("noDataText");
  }
  set noDataText(value) {
    this._setOption("noDataText", value);
  }
  get onContentReady() {
    return this._getOption("onContentReady");
  }
  set onContentReady(value) {
    this._setOption("onContentReady", value);
  }
  get onDisposing() {
    return this._getOption("onDisposing");
  }
  set onDisposing(value) {
    this._setOption("onDisposing", value);
  }
  get onInitialized() {
    return this._getOption("onInitialized");
  }
  set onInitialized(value) {
    this._setOption("onInitialized", value);
  }
  get onItemClick() {
    return this._getOption("onItemClick");
  }
  set onItemClick(value) {
    this._setOption("onItemClick", value);
  }
  get onItemContextMenu() {
    return this._getOption("onItemContextMenu");
  }
  set onItemContextMenu(value) {
    this._setOption("onItemContextMenu", value);
  }
  get onItemHold() {
    return this._getOption("onItemHold");
  }
  set onItemHold(value) {
    this._setOption("onItemHold", value);
  }
  get onItemRendered() {
    return this._getOption("onItemRendered");
  }
  set onItemRendered(value) {
    this._setOption("onItemRendered", value);
  }
  get onOptionChanged() {
    return this._getOption("onOptionChanged");
  }
  set onOptionChanged(value) {
    this._setOption("onOptionChanged", value);
  }
  get onSelectionChanged() {
    return this._getOption("onSelectionChanged");
  }
  set onSelectionChanged(value) {
    this._setOption("onSelectionChanged", value);
  }
  get onTitleClick() {
    return this._getOption("onTitleClick");
  }
  set onTitleClick(value) {
    this._setOption("onTitleClick", value);
  }
  get onTitleHold() {
    return this._getOption("onTitleHold");
  }
  set onTitleHold(value) {
    this._setOption("onTitleHold", value);
  }
  get onTitleRendered() {
    return this._getOption("onTitleRendered");
  }
  set onTitleRendered(value) {
    this._setOption("onTitleRendered", value);
  }
  get repaintChangesOnly() {
    return this._getOption("repaintChangesOnly");
  }
  set repaintChangesOnly(value) {
    this._setOption("repaintChangesOnly", value);
  }
  get rtlEnabled() {
    return this._getOption("rtlEnabled");
  }
  set rtlEnabled(value) {
    this._setOption("rtlEnabled", value);
  }
  get scrollByContent() {
    return this._getOption("scrollByContent");
  }
  set scrollByContent(value) {
    this._setOption("scrollByContent", value);
  }
  get scrollingEnabled() {
    return this._getOption("scrollingEnabled");
  }
  set scrollingEnabled(value) {
    this._setOption("scrollingEnabled", value);
  }
  get selectedIndex() {
    return this._getOption("selectedIndex");
  }
  set selectedIndex(value) {
    this._setOption("selectedIndex", value);
  }
  get selectedItem() {
    return this._getOption("selectedItem");
  }
  set selectedItem(value) {
    this._setOption("selectedItem", value);
  }
  get showNavButtons() {
    return this._getOption("showNavButtons");
  }
  set showNavButtons(value) {
    this._setOption("showNavButtons", value);
  }
  get stylingMode() {
    return this._getOption("stylingMode");
  }
  set stylingMode(value) {
    this._setOption("stylingMode", value);
  }
  get swipeEnabled() {
    return this._getOption("swipeEnabled");
  }
  set swipeEnabled(value) {
    this._setOption("swipeEnabled", value);
  }
  get tabIndex() {
    return this._getOption("tabIndex");
  }
  set tabIndex(value) {
    this._setOption("tabIndex", value);
  }
  get tabsPosition() {
    return this._getOption("tabsPosition");
  }
  set tabsPosition(value) {
    this._setOption("tabsPosition", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
};
DxoTabPanelOptions.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoTabPanelOptions_BaseFactory;
  return function DxoTabPanelOptions_Factory(t) {
    return (ɵDxoTabPanelOptions_BaseFactory || (ɵDxoTabPanelOptions_BaseFactory = ɵɵgetInheritedFactory(DxoTabPanelOptions)))(t || DxoTabPanelOptions);
  };
}();
DxoTabPanelOptions.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoTabPanelOptions, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTabPanelOptions_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTabPanelOptions, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoTabPanelOptionsComponent = class extends DxoTabPanelOptions {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "itemsChange" },
      { emit: "selectedIndexChange" },
      { emit: "selectedItemChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "tabPanelOptions";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoTabPanelOptionsComponent.ɵfac = function DxoTabPanelOptionsComponent_Factory(t) {
  return new (t || DxoTabPanelOptionsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoTabPanelOptionsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoTabPanelOptionsComponent, selectors: [["dxo-tab-panel-options"]], contentQueries: function DxoTabPanelOptionsComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
  }
}, inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", animationEnabled: "animationEnabled", dataSource: "dataSource", deferRendering: "deferRendering", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", iconPosition: "iconPosition", itemHoldTimeout: "itemHoldTimeout", items: "items", itemTemplate: "itemTemplate", itemTitleTemplate: "itemTitleTemplate", loop: "loop", noDataText: "noDataText", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onItemClick: "onItemClick", onItemContextMenu: "onItemContextMenu", onItemHold: "onItemHold", onItemRendered: "onItemRendered", onOptionChanged: "onOptionChanged", onSelectionChanged: "onSelectionChanged", onTitleClick: "onTitleClick", onTitleHold: "onTitleHold", onTitleRendered: "onTitleRendered", repaintChangesOnly: "repaintChangesOnly", rtlEnabled: "rtlEnabled", scrollByContent: "scrollByContent", scrollingEnabled: "scrollingEnabled", selectedIndex: "selectedIndex", selectedItem: "selectedItem", showNavButtons: "showNavButtons", stylingMode: "stylingMode", swipeEnabled: "swipeEnabled", tabIndex: "tabIndex", tabsPosition: "tabsPosition", visible: "visible", width: "width" }, outputs: { itemsChange: "itemsChange", selectedIndexChange: "selectedIndexChange", selectedItemChange: "selectedItemChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTabPanelOptionsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTabPanelOptionsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-tab-panel-options",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "accessKey",
        "activeStateEnabled",
        "animationEnabled",
        "dataSource",
        "deferRendering",
        "disabled",
        "elementAttr",
        "focusStateEnabled",
        "height",
        "hint",
        "hoverStateEnabled",
        "iconPosition",
        "itemHoldTimeout",
        "items",
        "itemTemplate",
        "itemTitleTemplate",
        "loop",
        "noDataText",
        "onContentReady",
        "onDisposing",
        "onInitialized",
        "onItemClick",
        "onItemContextMenu",
        "onItemHold",
        "onItemRendered",
        "onOptionChanged",
        "onSelectionChanged",
        "onTitleClick",
        "onTitleHold",
        "onTitleRendered",
        "repaintChangesOnly",
        "rtlEnabled",
        "scrollByContent",
        "scrollingEnabled",
        "selectedIndex",
        "selectedItem",
        "showNavButtons",
        "stylingMode",
        "swipeEnabled",
        "tabIndex",
        "tabsPosition",
        "visible",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { itemsChange: [{
    type: Output
  }], selectedIndexChange: [{
    type: Output
  }], selectedItemChange: [{
    type: Output
  }], itemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiItemComponent)]
  }] });
})();
var DxoTabPanelOptionsModule = class {
};
DxoTabPanelOptionsModule.ɵfac = function DxoTabPanelOptionsModule_Factory(t) {
  return new (t || DxoTabPanelOptionsModule)();
};
DxoTabPanelOptionsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoTabPanelOptionsModule });
DxoTabPanelOptionsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTabPanelOptionsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoTabPanelOptionsComponent
      ],
      exports: [
        DxoTabPanelOptionsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoTabPanelOptionsModule, { declarations: [DxoTabPanelOptionsComponent], exports: [DxoTabPanelOptionsComponent] });
})();
var DxoHtmlEditorTableContextMenu = class extends NestedOption {
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
};
DxoHtmlEditorTableContextMenu.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoHtmlEditorTableContextMenu_BaseFactory;
  return function DxoHtmlEditorTableContextMenu_Factory(t) {
    return (ɵDxoHtmlEditorTableContextMenu_BaseFactory || (ɵDxoHtmlEditorTableContextMenu_BaseFactory = ɵɵgetInheritedFactory(DxoHtmlEditorTableContextMenu)))(t || DxoHtmlEditorTableContextMenu);
  };
}();
DxoHtmlEditorTableContextMenu.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoHtmlEditorTableContextMenu, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoHtmlEditorTableContextMenu_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHtmlEditorTableContextMenu, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoTableContextMenuComponent = class extends DxoHtmlEditorTableContextMenu {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "tableContextMenu";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoTableContextMenuComponent.ɵfac = function DxoTableContextMenuComponent_Factory(t) {
  return new (t || DxoTableContextMenuComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoTableContextMenuComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoTableContextMenuComponent, selectors: [["dxo-table-context-menu"]], contentQueries: function DxoTableContextMenuComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
  }
}, inputs: { enabled: "enabled", items: "items" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTableContextMenuComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTableContextMenuComponent, [{
    type: Component,
    args: [{
      selector: "dxo-table-context-menu",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "enabled",
        "items"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { itemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiItemComponent)]
  }] });
})();
var DxoTableContextMenuModule = class {
};
DxoTableContextMenuModule.ɵfac = function DxoTableContextMenuModule_Factory(t) {
  return new (t || DxoTableContextMenuModule)();
};
DxoTableContextMenuModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoTableContextMenuModule });
DxoTableContextMenuModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTableContextMenuModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoTableContextMenuComponent
      ],
      exports: [
        DxoTableContextMenuComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoTableContextMenuModule, { declarations: [DxoTableContextMenuComponent], exports: [DxoTableContextMenuComponent] });
})();
var DxoHtmlEditorTableResizing = class extends NestedOption {
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get minColumnWidth() {
    return this._getOption("minColumnWidth");
  }
  set minColumnWidth(value) {
    this._setOption("minColumnWidth", value);
  }
  get minRowHeight() {
    return this._getOption("minRowHeight");
  }
  set minRowHeight(value) {
    this._setOption("minRowHeight", value);
  }
};
DxoHtmlEditorTableResizing.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoHtmlEditorTableResizing_BaseFactory;
  return function DxoHtmlEditorTableResizing_Factory(t) {
    return (ɵDxoHtmlEditorTableResizing_BaseFactory || (ɵDxoHtmlEditorTableResizing_BaseFactory = ɵɵgetInheritedFactory(DxoHtmlEditorTableResizing)))(t || DxoHtmlEditorTableResizing);
  };
}();
DxoHtmlEditorTableResizing.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoHtmlEditorTableResizing, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoHtmlEditorTableResizing_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHtmlEditorTableResizing, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoTableResizingComponent = class extends DxoHtmlEditorTableResizing {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "tableResizing";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoTableResizingComponent.ɵfac = function DxoTableResizingComponent_Factory(t) {
  return new (t || DxoTableResizingComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoTableResizingComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoTableResizingComponent, selectors: [["dxo-table-resizing"]], inputs: { enabled: "enabled", minColumnWidth: "minColumnWidth", minRowHeight: "minRowHeight" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTableResizingComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTableResizingComponent, [{
    type: Component,
    args: [{
      selector: "dxo-table-resizing",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "enabled",
        "minColumnWidth",
        "minRowHeight"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoTableResizingModule = class {
};
DxoTableResizingModule.ɵfac = function DxoTableResizingModule_Factory(t) {
  return new (t || DxoTableResizingModule)();
};
DxoTableResizingModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoTableResizingModule });
DxoTableResizingModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTableResizingModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoTableResizingComponent
      ],
      exports: [
        DxoTableResizingComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoTableResizingModule, { declarations: [DxoTableResizingComponent], exports: [DxoTableResizingComponent] });
})();
var DxoTasksComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get colorExpr() {
    return this._getOption("colorExpr");
  }
  set colorExpr(value) {
    this._setOption("colorExpr", value);
  }
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get endExpr() {
    return this._getOption("endExpr");
  }
  set endExpr(value) {
    this._setOption("endExpr", value);
  }
  get keyExpr() {
    return this._getOption("keyExpr");
  }
  set keyExpr(value) {
    this._setOption("keyExpr", value);
  }
  get parentIdExpr() {
    return this._getOption("parentIdExpr");
  }
  set parentIdExpr(value) {
    this._setOption("parentIdExpr", value);
  }
  get progressExpr() {
    return this._getOption("progressExpr");
  }
  set progressExpr(value) {
    this._setOption("progressExpr", value);
  }
  get startExpr() {
    return this._getOption("startExpr");
  }
  set startExpr(value) {
    this._setOption("startExpr", value);
  }
  get titleExpr() {
    return this._getOption("titleExpr");
  }
  set titleExpr(value) {
    this._setOption("titleExpr", value);
  }
  get _optionPath() {
    return "tasks";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoTasksComponent.ɵfac = function DxoTasksComponent_Factory(t) {
  return new (t || DxoTasksComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoTasksComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoTasksComponent, selectors: [["dxo-tasks"]], inputs: { colorExpr: "colorExpr", dataSource: "dataSource", endExpr: "endExpr", keyExpr: "keyExpr", parentIdExpr: "parentIdExpr", progressExpr: "progressExpr", startExpr: "startExpr", titleExpr: "titleExpr" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTasksComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTasksComponent, [{
    type: Component,
    args: [{
      selector: "dxo-tasks",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { colorExpr: [{
    type: Input
  }], dataSource: [{
    type: Input
  }], endExpr: [{
    type: Input
  }], keyExpr: [{
    type: Input
  }], parentIdExpr: [{
    type: Input
  }], progressExpr: [{
    type: Input
  }], startExpr: [{
    type: Input
  }], titleExpr: [{
    type: Input
  }] });
})();
var DxoTasksModule = class {
};
DxoTasksModule.ɵfac = function DxoTasksModule_Factory(t) {
  return new (t || DxoTasksModule)();
};
DxoTasksModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoTasksModule });
DxoTasksModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTasksModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoTasksComponent
      ],
      exports: [
        DxoTasksComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoTasksModule, { declarations: [DxoTasksComponent], exports: [DxoTasksComponent] });
})();
var DxoTextComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get customizeText() {
    return this._getOption("customizeText");
  }
  set customizeText(value) {
    this._setOption("customizeText", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get format() {
    return this._getOption("format");
  }
  set format(value) {
    this._setOption("format", value);
  }
  get indent() {
    return this._getOption("indent");
  }
  set indent(value) {
    this._setOption("indent", value);
  }
  get _optionPath() {
    return "text";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoTextComponent.ɵfac = function DxoTextComponent_Factory(t) {
  return new (t || DxoTextComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoTextComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoTextComponent, selectors: [["dxo-text"]], inputs: { customizeText: "customizeText", font: "font", format: "format", indent: "indent" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTextComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTextComponent, [{
    type: Component,
    args: [{
      selector: "dxo-text",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { customizeText: [{
    type: Input
  }], font: [{
    type: Input
  }], format: [{
    type: Input
  }], indent: [{
    type: Input
  }] });
})();
var DxoTextModule = class {
};
DxoTextModule.ɵfac = function DxoTextModule_Factory(t) {
  return new (t || DxoTextModule)();
};
DxoTextModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoTextModule });
DxoTextModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTextModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoTextComponent
      ],
      exports: [
        DxoTextComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoTextModule, { declarations: [DxoTextComponent], exports: [DxoTextComponent] });
})();
var DxoGanttHeaderFilterTexts = class extends NestedOption {
  get fix() {
    return this._getOption("fix");
  }
  set fix(value) {
    this._setOption("fix", value);
  }
  get leftPosition() {
    return this._getOption("leftPosition");
  }
  set leftPosition(value) {
    this._setOption("leftPosition", value);
  }
  get rightPosition() {
    return this._getOption("rightPosition");
  }
  set rightPosition(value) {
    this._setOption("rightPosition", value);
  }
  get unfix() {
    return this._getOption("unfix");
  }
  set unfix(value) {
    this._setOption("unfix", value);
  }
  get addRow() {
    return this._getOption("addRow");
  }
  set addRow(value) {
    this._setOption("addRow", value);
  }
  get cancelAllChanges() {
    return this._getOption("cancelAllChanges");
  }
  set cancelAllChanges(value) {
    this._setOption("cancelAllChanges", value);
  }
  get cancelRowChanges() {
    return this._getOption("cancelRowChanges");
  }
  set cancelRowChanges(value) {
    this._setOption("cancelRowChanges", value);
  }
  get confirmDeleteMessage() {
    return this._getOption("confirmDeleteMessage");
  }
  set confirmDeleteMessage(value) {
    this._setOption("confirmDeleteMessage", value);
  }
  get confirmDeleteTitle() {
    return this._getOption("confirmDeleteTitle");
  }
  set confirmDeleteTitle(value) {
    this._setOption("confirmDeleteTitle", value);
  }
  get deleteRow() {
    return this._getOption("deleteRow");
  }
  set deleteRow(value) {
    this._setOption("deleteRow", value);
  }
  get editRow() {
    return this._getOption("editRow");
  }
  set editRow(value) {
    this._setOption("editRow", value);
  }
  get saveAllChanges() {
    return this._getOption("saveAllChanges");
  }
  set saveAllChanges(value) {
    this._setOption("saveAllChanges", value);
  }
  get saveRowChanges() {
    return this._getOption("saveRowChanges");
  }
  set saveRowChanges(value) {
    this._setOption("saveRowChanges", value);
  }
  get undeleteRow() {
    return this._getOption("undeleteRow");
  }
  set undeleteRow(value) {
    this._setOption("undeleteRow", value);
  }
  get validationCancelChanges() {
    return this._getOption("validationCancelChanges");
  }
  set validationCancelChanges(value) {
    this._setOption("validationCancelChanges", value);
  }
  get exportAll() {
    return this._getOption("exportAll");
  }
  set exportAll(value) {
    this._setOption("exportAll", value);
  }
  get exportSelectedRows() {
    return this._getOption("exportSelectedRows");
  }
  set exportSelectedRows(value) {
    this._setOption("exportSelectedRows", value);
  }
  get exportTo() {
    return this._getOption("exportTo");
  }
  set exportTo(value) {
    this._setOption("exportTo", value);
  }
  get clearFilter() {
    return this._getOption("clearFilter");
  }
  set clearFilter(value) {
    this._setOption("clearFilter", value);
  }
  get createFilter() {
    return this._getOption("createFilter");
  }
  set createFilter(value) {
    this._setOption("createFilter", value);
  }
  get filterEnabledHint() {
    return this._getOption("filterEnabledHint");
  }
  set filterEnabledHint(value) {
    this._setOption("filterEnabledHint", value);
  }
  get groupByThisColumn() {
    return this._getOption("groupByThisColumn");
  }
  set groupByThisColumn(value) {
    this._setOption("groupByThisColumn", value);
  }
  get groupContinuedMessage() {
    return this._getOption("groupContinuedMessage");
  }
  set groupContinuedMessage(value) {
    this._setOption("groupContinuedMessage", value);
  }
  get groupContinuesMessage() {
    return this._getOption("groupContinuesMessage");
  }
  set groupContinuesMessage(value) {
    this._setOption("groupContinuesMessage", value);
  }
  get ungroup() {
    return this._getOption("ungroup");
  }
  set ungroup(value) {
    this._setOption("ungroup", value);
  }
  get ungroupAll() {
    return this._getOption("ungroupAll");
  }
  set ungroupAll(value) {
    this._setOption("ungroupAll", value);
  }
  get cancel() {
    return this._getOption("cancel");
  }
  set cancel(value) {
    this._setOption("cancel", value);
  }
  get emptyValue() {
    return this._getOption("emptyValue");
  }
  set emptyValue(value) {
    this._setOption("emptyValue", value);
  }
  get ok() {
    return this._getOption("ok");
  }
  set ok(value) {
    this._setOption("ok", value);
  }
  get avg() {
    return this._getOption("avg");
  }
  set avg(value) {
    this._setOption("avg", value);
  }
  get avgOtherColumn() {
    return this._getOption("avgOtherColumn");
  }
  set avgOtherColumn(value) {
    this._setOption("avgOtherColumn", value);
  }
  get count() {
    return this._getOption("count");
  }
  set count(value) {
    this._setOption("count", value);
  }
  get max() {
    return this._getOption("max");
  }
  set max(value) {
    this._setOption("max", value);
  }
  get maxOtherColumn() {
    return this._getOption("maxOtherColumn");
  }
  set maxOtherColumn(value) {
    this._setOption("maxOtherColumn", value);
  }
  get min() {
    return this._getOption("min");
  }
  set min(value) {
    this._setOption("min", value);
  }
  get minOtherColumn() {
    return this._getOption("minOtherColumn");
  }
  set minOtherColumn(value) {
    this._setOption("minOtherColumn", value);
  }
  get sum() {
    return this._getOption("sum");
  }
  set sum(value) {
    this._setOption("sum", value);
  }
  get sumOtherColumn() {
    return this._getOption("sumOtherColumn");
  }
  set sumOtherColumn(value) {
    this._setOption("sumOtherColumn", value);
  }
  get allFields() {
    return this._getOption("allFields");
  }
  set allFields(value) {
    this._setOption("allFields", value);
  }
  get columnFields() {
    return this._getOption("columnFields");
  }
  set columnFields(value) {
    this._setOption("columnFields", value);
  }
  get dataFields() {
    return this._getOption("dataFields");
  }
  set dataFields(value) {
    this._setOption("dataFields", value);
  }
  get filterFields() {
    return this._getOption("filterFields");
  }
  set filterFields(value) {
    this._setOption("filterFields", value);
  }
  get rowFields() {
    return this._getOption("rowFields");
  }
  set rowFields(value) {
    this._setOption("rowFields", value);
  }
  get columnFieldArea() {
    return this._getOption("columnFieldArea");
  }
  set columnFieldArea(value) {
    this._setOption("columnFieldArea", value);
  }
  get dataFieldArea() {
    return this._getOption("dataFieldArea");
  }
  set dataFieldArea(value) {
    this._setOption("dataFieldArea", value);
  }
  get filterFieldArea() {
    return this._getOption("filterFieldArea");
  }
  set filterFieldArea(value) {
    this._setOption("filterFieldArea", value);
  }
  get rowFieldArea() {
    return this._getOption("rowFieldArea");
  }
  set rowFieldArea(value) {
    this._setOption("rowFieldArea", value);
  }
  get collapseAll() {
    return this._getOption("collapseAll");
  }
  set collapseAll(value) {
    this._setOption("collapseAll", value);
  }
  get dataNotAvailable() {
    return this._getOption("dataNotAvailable");
  }
  set dataNotAvailable(value) {
    this._setOption("dataNotAvailable", value);
  }
  get expandAll() {
    return this._getOption("expandAll");
  }
  set expandAll(value) {
    this._setOption("expandAll", value);
  }
  get exportToExcel() {
    return this._getOption("exportToExcel");
  }
  set exportToExcel(value) {
    this._setOption("exportToExcel", value);
  }
  get grandTotal() {
    return this._getOption("grandTotal");
  }
  set grandTotal(value) {
    this._setOption("grandTotal", value);
  }
  get noData() {
    return this._getOption("noData");
  }
  set noData(value) {
    this._setOption("noData", value);
  }
  get removeAllSorting() {
    return this._getOption("removeAllSorting");
  }
  set removeAllSorting(value) {
    this._setOption("removeAllSorting", value);
  }
  get showFieldChooser() {
    return this._getOption("showFieldChooser");
  }
  set showFieldChooser(value) {
    this._setOption("showFieldChooser", value);
  }
  get sortColumnBySummary() {
    return this._getOption("sortColumnBySummary");
  }
  set sortColumnBySummary(value) {
    this._setOption("sortColumnBySummary", value);
  }
  get sortRowBySummary() {
    return this._getOption("sortRowBySummary");
  }
  set sortRowBySummary(value) {
    this._setOption("sortRowBySummary", value);
  }
  get total() {
    return this._getOption("total");
  }
  set total(value) {
    this._setOption("total", value);
  }
  get addRowToNode() {
    return this._getOption("addRowToNode");
  }
  set addRowToNode(value) {
    this._setOption("addRowToNode", value);
  }
};
DxoGanttHeaderFilterTexts.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoGanttHeaderFilterTexts_BaseFactory;
  return function DxoGanttHeaderFilterTexts_Factory(t) {
    return (ɵDxoGanttHeaderFilterTexts_BaseFactory || (ɵDxoGanttHeaderFilterTexts_BaseFactory = ɵɵgetInheritedFactory(DxoGanttHeaderFilterTexts)))(t || DxoGanttHeaderFilterTexts);
  };
}();
DxoGanttHeaderFilterTexts.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoGanttHeaderFilterTexts, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoGanttHeaderFilterTexts_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoGanttHeaderFilterTexts, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoTextsComponent = class extends DxoGanttHeaderFilterTexts {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "texts";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoTextsComponent.ɵfac = function DxoTextsComponent_Factory(t) {
  return new (t || DxoTextsComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoTextsComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoTextsComponent, selectors: [["dxo-texts"]], inputs: { fix: "fix", leftPosition: "leftPosition", rightPosition: "rightPosition", unfix: "unfix", addRow: "addRow", cancelAllChanges: "cancelAllChanges", cancelRowChanges: "cancelRowChanges", confirmDeleteMessage: "confirmDeleteMessage", confirmDeleteTitle: "confirmDeleteTitle", deleteRow: "deleteRow", editRow: "editRow", saveAllChanges: "saveAllChanges", saveRowChanges: "saveRowChanges", undeleteRow: "undeleteRow", validationCancelChanges: "validationCancelChanges", exportAll: "exportAll", exportSelectedRows: "exportSelectedRows", exportTo: "exportTo", clearFilter: "clearFilter", createFilter: "createFilter", filterEnabledHint: "filterEnabledHint", groupByThisColumn: "groupByThisColumn", groupContinuedMessage: "groupContinuedMessage", groupContinuesMessage: "groupContinuesMessage", ungroup: "ungroup", ungroupAll: "ungroupAll", cancel: "cancel", emptyValue: "emptyValue", ok: "ok", avg: "avg", avgOtherColumn: "avgOtherColumn", count: "count", max: "max", maxOtherColumn: "maxOtherColumn", min: "min", minOtherColumn: "minOtherColumn", sum: "sum", sumOtherColumn: "sumOtherColumn", allFields: "allFields", columnFields: "columnFields", dataFields: "dataFields", filterFields: "filterFields", rowFields: "rowFields", columnFieldArea: "columnFieldArea", dataFieldArea: "dataFieldArea", filterFieldArea: "filterFieldArea", rowFieldArea: "rowFieldArea", collapseAll: "collapseAll", dataNotAvailable: "dataNotAvailable", expandAll: "expandAll", exportToExcel: "exportToExcel", grandTotal: "grandTotal", noData: "noData", removeAllSorting: "removeAllSorting", showFieldChooser: "showFieldChooser", sortColumnBySummary: "sortColumnBySummary", sortRowBySummary: "sortRowBySummary", total: "total", addRowToNode: "addRowToNode" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTextsComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTextsComponent, [{
    type: Component,
    args: [{
      selector: "dxo-texts",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "fix",
        "leftPosition",
        "rightPosition",
        "unfix",
        "addRow",
        "cancelAllChanges",
        "cancelRowChanges",
        "confirmDeleteMessage",
        "confirmDeleteTitle",
        "deleteRow",
        "editRow",
        "saveAllChanges",
        "saveRowChanges",
        "undeleteRow",
        "validationCancelChanges",
        "exportAll",
        "exportSelectedRows",
        "exportTo",
        "clearFilter",
        "createFilter",
        "filterEnabledHint",
        "groupByThisColumn",
        "groupContinuedMessage",
        "groupContinuesMessage",
        "ungroup",
        "ungroupAll",
        "cancel",
        "emptyValue",
        "ok",
        "avg",
        "avgOtherColumn",
        "count",
        "max",
        "maxOtherColumn",
        "min",
        "minOtherColumn",
        "sum",
        "sumOtherColumn",
        "allFields",
        "columnFields",
        "dataFields",
        "filterFields",
        "rowFields",
        "columnFieldArea",
        "dataFieldArea",
        "filterFieldArea",
        "rowFieldArea",
        "collapseAll",
        "dataNotAvailable",
        "expandAll",
        "exportToExcel",
        "grandTotal",
        "noData",
        "removeAllSorting",
        "showFieldChooser",
        "sortColumnBySummary",
        "sortRowBySummary",
        "total",
        "addRowToNode"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoTextsModule = class {
};
DxoTextsModule.ɵfac = function DxoTextsModule_Factory(t) {
  return new (t || DxoTextsModule)();
};
DxoTextsModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoTextsModule });
DxoTextsModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTextsModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoTextsComponent
      ],
      exports: [
        DxoTextsComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoTextsModule, { declarations: [DxoTextsComponent], exports: [DxoTextsComponent] });
})();
var DxoTickIntervalComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get days() {
    return this._getOption("days");
  }
  set days(value) {
    this._setOption("days", value);
  }
  get hours() {
    return this._getOption("hours");
  }
  set hours(value) {
    this._setOption("hours", value);
  }
  get milliseconds() {
    return this._getOption("milliseconds");
  }
  set milliseconds(value) {
    this._setOption("milliseconds", value);
  }
  get minutes() {
    return this._getOption("minutes");
  }
  set minutes(value) {
    this._setOption("minutes", value);
  }
  get months() {
    return this._getOption("months");
  }
  set months(value) {
    this._setOption("months", value);
  }
  get quarters() {
    return this._getOption("quarters");
  }
  set quarters(value) {
    this._setOption("quarters", value);
  }
  get seconds() {
    return this._getOption("seconds");
  }
  set seconds(value) {
    this._setOption("seconds", value);
  }
  get weeks() {
    return this._getOption("weeks");
  }
  set weeks(value) {
    this._setOption("weeks", value);
  }
  get years() {
    return this._getOption("years");
  }
  set years(value) {
    this._setOption("years", value);
  }
  get _optionPath() {
    return "tickInterval";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoTickIntervalComponent.ɵfac = function DxoTickIntervalComponent_Factory(t) {
  return new (t || DxoTickIntervalComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoTickIntervalComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoTickIntervalComponent, selectors: [["dxo-tick-interval"]], inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTickIntervalComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTickIntervalComponent, [{
    type: Component,
    args: [{
      selector: "dxo-tick-interval",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { days: [{
    type: Input
  }], hours: [{
    type: Input
  }], milliseconds: [{
    type: Input
  }], minutes: [{
    type: Input
  }], months: [{
    type: Input
  }], quarters: [{
    type: Input
  }], seconds: [{
    type: Input
  }], weeks: [{
    type: Input
  }], years: [{
    type: Input
  }] });
})();
var DxoTickIntervalModule = class {
};
DxoTickIntervalModule.ɵfac = function DxoTickIntervalModule_Factory(t) {
  return new (t || DxoTickIntervalModule)();
};
DxoTickIntervalModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoTickIntervalModule });
DxoTickIntervalModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTickIntervalModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoTickIntervalComponent
      ],
      exports: [
        DxoTickIntervalComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoTickIntervalModule, { declarations: [DxoTickIntervalComponent], exports: [DxoTickIntervalComponent] });
})();
var DxoTickComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get length() {
    return this._getOption("length");
  }
  set length(value) {
    this._setOption("length", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get shift() {
    return this._getOption("shift");
  }
  set shift(value) {
    this._setOption("shift", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "tick";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoTickComponent.ɵfac = function DxoTickComponent_Factory(t) {
  return new (t || DxoTickComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoTickComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoTickComponent, selectors: [["dxo-tick"]], inputs: { color: "color", length: "length", opacity: "opacity", shift: "shift", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTickComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTickComponent, [{
    type: Component,
    args: [{
      selector: "dxo-tick",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], length: [{
    type: Input
  }], opacity: [{
    type: Input
  }], shift: [{
    type: Input
  }], visible: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoTickModule = class {
};
DxoTickModule.ɵfac = function DxoTickModule_Factory(t) {
  return new (t || DxoTickModule)();
};
DxoTickModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoTickModule });
DxoTickModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTickModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoTickComponent
      ],
      exports: [
        DxoTickComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoTickModule, { declarations: [DxoTickComponent], exports: [DxoTickComponent] });
})();
var DxoTileComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get hoverStyle() {
    return this._getOption("hoverStyle");
  }
  set hoverStyle(value) {
    this._setOption("hoverStyle", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get selectionStyle() {
    return this._getOption("selectionStyle");
  }
  set selectionStyle(value) {
    this._setOption("selectionStyle", value);
  }
  get _optionPath() {
    return "tile";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoTileComponent.ɵfac = function DxoTileComponent_Factory(t) {
  return new (t || DxoTileComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoTileComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoTileComponent, selectors: [["dxo-tile"]], inputs: { border: "border", color: "color", hoverStyle: "hoverStyle", label: "label", selectionStyle: "selectionStyle" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTileComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTileComponent, [{
    type: Component,
    args: [{
      selector: "dxo-tile",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { border: [{
    type: Input
  }], color: [{
    type: Input
  }], hoverStyle: [{
    type: Input
  }], label: [{
    type: Input
  }], selectionStyle: [{
    type: Input
  }] });
})();
var DxoTileModule = class {
};
DxoTileModule.ɵfac = function DxoTileModule_Factory(t) {
  return new (t || DxoTileModule)();
};
DxoTileModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoTileModule });
DxoTileModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTileModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoTileComponent
      ],
      exports: [
        DxoTileComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoTileModule, { declarations: [DxoTileComponent], exports: [DxoTileComponent] });
})();
var DxoTitleComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get horizontalAlignment() {
    return this._getOption("horizontalAlignment");
  }
  set horizontalAlignment(value) {
    this._setOption("horizontalAlignment", value);
  }
  get margin() {
    return this._getOption("margin");
  }
  set margin(value) {
    this._setOption("margin", value);
  }
  get placeholderSize() {
    return this._getOption("placeholderSize");
  }
  set placeholderSize(value) {
    this._setOption("placeholderSize", value);
  }
  get subtitle() {
    return this._getOption("subtitle");
  }
  set subtitle(value) {
    this._setOption("subtitle", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get verticalAlignment() {
    return this._getOption("verticalAlignment");
  }
  set verticalAlignment(value) {
    this._setOption("verticalAlignment", value);
  }
  get textOverflow() {
    return this._getOption("textOverflow");
  }
  set textOverflow(value) {
    this._setOption("textOverflow", value);
  }
  get wordWrap() {
    return this._getOption("wordWrap");
  }
  set wordWrap(value) {
    this._setOption("wordWrap", value);
  }
  get alignment() {
    return this._getOption("alignment");
  }
  set alignment(value) {
    this._setOption("alignment", value);
  }
  get _optionPath() {
    return "title";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoTitleComponent.ɵfac = function DxoTitleComponent_Factory(t) {
  return new (t || DxoTitleComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoTitleComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoTitleComponent, selectors: [["dxo-title"]], inputs: { font: "font", horizontalAlignment: "horizontalAlignment", margin: "margin", placeholderSize: "placeholderSize", subtitle: "subtitle", text: "text", verticalAlignment: "verticalAlignment", textOverflow: "textOverflow", wordWrap: "wordWrap", alignment: "alignment" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTitleComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTitleComponent, [{
    type: Component,
    args: [{
      selector: "dxo-title",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { font: [{
    type: Input
  }], horizontalAlignment: [{
    type: Input
  }], margin: [{
    type: Input
  }], placeholderSize: [{
    type: Input
  }], subtitle: [{
    type: Input
  }], text: [{
    type: Input
  }], verticalAlignment: [{
    type: Input
  }], textOverflow: [{
    type: Input
  }], wordWrap: [{
    type: Input
  }], alignment: [{
    type: Input
  }] });
})();
var DxoTitleModule = class {
};
DxoTitleModule.ɵfac = function DxoTitleModule_Factory(t) {
  return new (t || DxoTitleModule)();
};
DxoTitleModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoTitleModule });
DxoTitleModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTitleModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoTitleComponent
      ],
      exports: [
        DxoTitleComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoTitleModule, { declarations: [DxoTitleComponent], exports: [DxoTitleComponent] });
})();
var DxoToComponent = class extends DxoAnimationState {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "to";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoToComponent.ɵfac = function DxoToComponent_Factory(t) {
  return new (t || DxoToComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoToComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoToComponent, selectors: [["dxo-to"]], inputs: { left: "left", opacity: "opacity", position: "position", scale: "scale", top: "top" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoToComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoToComponent, [{
    type: Component,
    args: [{
      selector: "dxo-to",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "left",
        "opacity",
        "position",
        "scale",
        "top"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoToModule = class {
};
DxoToModule.ɵfac = function DxoToModule_Factory(t) {
  return new (t || DxoToModule)();
};
DxoToModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoToModule });
DxoToModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoToModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoToComponent
      ],
      exports: [
        DxoToComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoToModule, { declarations: [DxoToComponent], exports: [DxoToComponent] });
})();
var DxoDataGridToolbar = class extends NestedOption {
  get disabled() {
    return this._getOption("disabled");
  }
  set disabled(value) {
    this._setOption("disabled", value);
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get fileSelectionItems() {
    return this._getOption("fileSelectionItems");
  }
  set fileSelectionItems(value) {
    this._setOption("fileSelectionItems", value);
  }
  get container() {
    return this._getOption("container");
  }
  set container(value) {
    this._setOption("container", value);
  }
  get multiline() {
    return this._getOption("multiline");
  }
  set multiline(value) {
    this._setOption("multiline", value);
  }
};
DxoDataGridToolbar.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoDataGridToolbar_BaseFactory;
  return function DxoDataGridToolbar_Factory(t) {
    return (ɵDxoDataGridToolbar_BaseFactory || (ɵDxoDataGridToolbar_BaseFactory = ɵɵgetInheritedFactory(DxoDataGridToolbar)))(t || DxoDataGridToolbar);
  };
}();
DxoDataGridToolbar.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoDataGridToolbar, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoDataGridToolbar_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoDataGridToolbar, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoToolbarComponent = class extends DxoDataGridToolbar {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "toolbar";
  }
  get itemsChildren() {
    return this._getOption("items");
  }
  set itemsChildren(value) {
    this.setChildren("items", value);
  }
  get fileSelectionItemsChildren() {
    return this._getOption("fileSelectionItems");
  }
  set fileSelectionItemsChildren(value) {
    this.setChildren("fileSelectionItems", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoToolbarComponent.ɵfac = function DxoToolbarComponent_Factory(t) {
  return new (t || DxoToolbarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoToolbarComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoToolbarComponent, selectors: [["dxo-toolbar"]], contentQueries: function DxoToolbarComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiFileSelectionItemComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.itemsChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.fileSelectionItemsChildren = _t);
  }
}, inputs: { disabled: "disabled", items: "items", visible: "visible", fileSelectionItems: "fileSelectionItems", container: "container", multiline: "multiline" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoToolbarComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoToolbarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-toolbar",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "disabled",
        "items",
        "visible",
        "fileSelectionItems",
        "container",
        "multiline"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { itemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiItemComponent)]
  }], fileSelectionItemsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiFileSelectionItemComponent)]
  }] });
})();
var DxoToolbarModule = class {
};
DxoToolbarModule.ɵfac = function DxoToolbarModule_Factory(t) {
  return new (t || DxoToolbarModule)();
};
DxoToolbarModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoToolbarModule });
DxoToolbarModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoToolbarModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoToolbarComponent
      ],
      exports: [
        DxoToolbarComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoToolbarModule, { declarations: [DxoToolbarComponent], exports: [DxoToolbarComponent] });
})();
var DxoToolboxComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get groups() {
    return this._getOption("groups");
  }
  set groups(value) {
    this._setOption("groups", value);
  }
  get shapeIconsPerRow() {
    return this._getOption("shapeIconsPerRow");
  }
  set shapeIconsPerRow(value) {
    this._setOption("shapeIconsPerRow", value);
  }
  get showSearch() {
    return this._getOption("showSearch");
  }
  set showSearch(value) {
    this._setOption("showSearch", value);
  }
  get visibility() {
    return this._getOption("visibility");
  }
  set visibility(value) {
    this._setOption("visibility", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "toolbox";
  }
  get groupsChildren() {
    return this._getOption("groups");
  }
  set groupsChildren(value) {
    this.setChildren("groups", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoToolboxComponent.ɵfac = function DxoToolboxComponent_Factory(t) {
  return new (t || DxoToolboxComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoToolboxComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoToolboxComponent, selectors: [["dxo-toolbox"]], contentQueries: function DxoToolboxComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiGroupComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.groupsChildren = _t);
  }
}, inputs: { groups: "groups", shapeIconsPerRow: "shapeIconsPerRow", showSearch: "showSearch", visibility: "visibility", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoToolboxComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoToolboxComponent, [{
    type: Component,
    args: [{
      selector: "dxo-toolbox",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { groups: [{
    type: Input
  }], shapeIconsPerRow: [{
    type: Input
  }], showSearch: [{
    type: Input
  }], visibility: [{
    type: Input
  }], width: [{
    type: Input
  }], groupsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiGroupComponent)]
  }] });
})();
var DxoToolboxModule = class {
};
DxoToolboxModule.ɵfac = function DxoToolboxModule_Factory(t) {
  return new (t || DxoToolboxModule)();
};
DxoToolboxModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoToolboxModule });
DxoToolboxModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoToolboxModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoToolboxComponent
      ],
      exports: [
        DxoToolboxComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoToolboxModule, { declarations: [DxoToolboxComponent], exports: [DxoToolboxComponent] });
})();
var DxoTooltipComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get arrowLength() {
    return this._getOption("arrowLength");
  }
  set arrowLength(value) {
    this._setOption("arrowLength", value);
  }
  get border() {
    return this._getOption("border");
  }
  set border(value) {
    this._setOption("border", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get container() {
    return this._getOption("container");
  }
  set container(value) {
    this._setOption("container", value);
  }
  get contentTemplate() {
    return this._getOption("contentTemplate");
  }
  set contentTemplate(value) {
    this._setOption("contentTemplate", value);
  }
  get cornerRadius() {
    return this._getOption("cornerRadius");
  }
  set cornerRadius(value) {
    this._setOption("cornerRadius", value);
  }
  get customizeTooltip() {
    return this._getOption("customizeTooltip");
  }
  set customizeTooltip(value) {
    this._setOption("customizeTooltip", value);
  }
  get enabled() {
    return this._getOption("enabled");
  }
  set enabled(value) {
    this._setOption("enabled", value);
  }
  get font() {
    return this._getOption("font");
  }
  set font(value) {
    this._setOption("font", value);
  }
  get format() {
    return this._getOption("format");
  }
  set format(value) {
    this._setOption("format", value);
  }
  get interactive() {
    return this._getOption("interactive");
  }
  set interactive(value) {
    this._setOption("interactive", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get paddingLeftRight() {
    return this._getOption("paddingLeftRight");
  }
  set paddingLeftRight(value) {
    this._setOption("paddingLeftRight", value);
  }
  get paddingTopBottom() {
    return this._getOption("paddingTopBottom");
  }
  set paddingTopBottom(value) {
    this._setOption("paddingTopBottom", value);
  }
  get shadow() {
    return this._getOption("shadow");
  }
  set shadow(value) {
    this._setOption("shadow", value);
  }
  get zIndex() {
    return this._getOption("zIndex");
  }
  set zIndex(value) {
    this._setOption("zIndex", value);
  }
  get argumentFormat() {
    return this._getOption("argumentFormat");
  }
  set argumentFormat(value) {
    this._setOption("argumentFormat", value);
  }
  get location() {
    return this._getOption("location");
  }
  set location(value) {
    this._setOption("location", value);
  }
  get shared() {
    return this._getOption("shared");
  }
  set shared(value) {
    this._setOption("shared", value);
  }
  get isShown() {
    return this._getOption("isShown");
  }
  set isShown(value) {
    this._setOption("isShown", value);
  }
  get text() {
    return this._getOption("text");
  }
  set text(value) {
    this._setOption("text", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get showMode() {
    return this._getOption("showMode");
  }
  set showMode(value) {
    this._setOption("showMode", value);
  }
  get customizeLinkTooltip() {
    return this._getOption("customizeLinkTooltip");
  }
  set customizeLinkTooltip(value) {
    this._setOption("customizeLinkTooltip", value);
  }
  get customizeNodeTooltip() {
    return this._getOption("customizeNodeTooltip");
  }
  set customizeNodeTooltip(value) {
    this._setOption("customizeNodeTooltip", value);
  }
  get linkTooltipTemplate() {
    return this._getOption("linkTooltipTemplate");
  }
  set linkTooltipTemplate(value) {
    this._setOption("linkTooltipTemplate", value);
  }
  get nodeTooltipTemplate() {
    return this._getOption("nodeTooltipTemplate");
  }
  set nodeTooltipTemplate(value) {
    this._setOption("nodeTooltipTemplate", value);
  }
  get _optionPath() {
    return "tooltip";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoTooltipComponent.ɵfac = function DxoTooltipComponent_Factory(t) {
  return new (t || DxoTooltipComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoTooltipComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoTooltipComponent, selectors: [["dxo-tooltip"]], inputs: { arrowLength: "arrowLength", border: "border", color: "color", container: "container", contentTemplate: "contentTemplate", cornerRadius: "cornerRadius", customizeTooltip: "customizeTooltip", enabled: "enabled", font: "font", format: "format", interactive: "interactive", opacity: "opacity", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", shadow: "shadow", zIndex: "zIndex", argumentFormat: "argumentFormat", location: "location", shared: "shared", isShown: "isShown", text: "text", position: "position", showMode: "showMode", customizeLinkTooltip: "customizeLinkTooltip", customizeNodeTooltip: "customizeNodeTooltip", linkTooltipTemplate: "linkTooltipTemplate", nodeTooltipTemplate: "nodeTooltipTemplate" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTooltipComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTooltipComponent, [{
    type: Component,
    args: [{
      selector: "dxo-tooltip",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { arrowLength: [{
    type: Input
  }], border: [{
    type: Input
  }], color: [{
    type: Input
  }], container: [{
    type: Input
  }], contentTemplate: [{
    type: Input
  }], cornerRadius: [{
    type: Input
  }], customizeTooltip: [{
    type: Input
  }], enabled: [{
    type: Input
  }], font: [{
    type: Input
  }], format: [{
    type: Input
  }], interactive: [{
    type: Input
  }], opacity: [{
    type: Input
  }], paddingLeftRight: [{
    type: Input
  }], paddingTopBottom: [{
    type: Input
  }], shadow: [{
    type: Input
  }], zIndex: [{
    type: Input
  }], argumentFormat: [{
    type: Input
  }], location: [{
    type: Input
  }], shared: [{
    type: Input
  }], isShown: [{
    type: Input
  }], text: [{
    type: Input
  }], position: [{
    type: Input
  }], showMode: [{
    type: Input
  }], customizeLinkTooltip: [{
    type: Input
  }], customizeNodeTooltip: [{
    type: Input
  }], linkTooltipTemplate: [{
    type: Input
  }], nodeTooltipTemplate: [{
    type: Input
  }] });
})();
var DxoTooltipModule = class {
};
DxoTooltipModule.ɵfac = function DxoTooltipModule_Factory(t) {
  return new (t || DxoTooltipModule)();
};
DxoTooltipModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoTooltipModule });
DxoTooltipModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoTooltipModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoTooltipComponent
      ],
      exports: [
        DxoTooltipComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoTooltipModule, { declarations: [DxoTooltipComponent], exports: [DxoTooltipComponent] });
})();
var DxoUploadComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get chunkSize() {
    return this._getOption("chunkSize");
  }
  set chunkSize(value) {
    this._setOption("chunkSize", value);
  }
  get maxFileSize() {
    return this._getOption("maxFileSize");
  }
  set maxFileSize(value) {
    this._setOption("maxFileSize", value);
  }
  get _optionPath() {
    return "upload";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoUploadComponent.ɵfac = function DxoUploadComponent_Factory(t) {
  return new (t || DxoUploadComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoUploadComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoUploadComponent, selectors: [["dxo-upload"]], inputs: { chunkSize: "chunkSize", maxFileSize: "maxFileSize" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoUploadComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoUploadComponent, [{
    type: Component,
    args: [{
      selector: "dxo-upload",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { chunkSize: [{
    type: Input
  }], maxFileSize: [{
    type: Input
  }] });
})();
var DxoUploadModule = class {
};
DxoUploadModule.ɵfac = function DxoUploadModule_Factory(t) {
  return new (t || DxoUploadModule)();
};
DxoUploadModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoUploadModule });
DxoUploadModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoUploadModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoUploadComponent
      ],
      exports: [
        DxoUploadComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoUploadModule, { declarations: [DxoUploadComponent], exports: [DxoUploadComponent] });
})();
var DxoUrlComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get rangeMaxPoint() {
    return this._getOption("rangeMaxPoint");
  }
  set rangeMaxPoint(value) {
    this._setOption("rangeMaxPoint", value);
  }
  get rangeMinPoint() {
    return this._getOption("rangeMinPoint");
  }
  set rangeMinPoint(value) {
    this._setOption("rangeMinPoint", value);
  }
  get _optionPath() {
    return "url";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoUrlComponent.ɵfac = function DxoUrlComponent_Factory(t) {
  return new (t || DxoUrlComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoUrlComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoUrlComponent, selectors: [["dxo-url"]], inputs: { rangeMaxPoint: "rangeMaxPoint", rangeMinPoint: "rangeMinPoint" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoUrlComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoUrlComponent, [{
    type: Component,
    args: [{
      selector: "dxo-url",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { rangeMaxPoint: [{
    type: Input
  }], rangeMinPoint: [{
    type: Input
  }] });
})();
var DxoUrlModule = class {
};
DxoUrlModule.ɵfac = function DxoUrlModule_Factory(t) {
  return new (t || DxoUrlModule)();
};
DxoUrlModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoUrlModule });
DxoUrlModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoUrlModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoUrlComponent
      ],
      exports: [
        DxoUrlComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoUrlModule, { declarations: [DxoUrlComponent], exports: [DxoUrlComponent] });
})();
var DxoValidationComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get autoUpdateParentTasks() {
    return this._getOption("autoUpdateParentTasks");
  }
  set autoUpdateParentTasks(value) {
    this._setOption("autoUpdateParentTasks", value);
  }
  get enablePredecessorGap() {
    return this._getOption("enablePredecessorGap");
  }
  set enablePredecessorGap(value) {
    this._setOption("enablePredecessorGap", value);
  }
  get validateDependencies() {
    return this._getOption("validateDependencies");
  }
  set validateDependencies(value) {
    this._setOption("validateDependencies", value);
  }
  get _optionPath() {
    return "validation";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoValidationComponent.ɵfac = function DxoValidationComponent_Factory(t) {
  return new (t || DxoValidationComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoValidationComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoValidationComponent, selectors: [["dxo-validation"]], inputs: { autoUpdateParentTasks: "autoUpdateParentTasks", enablePredecessorGap: "enablePredecessorGap", validateDependencies: "validateDependencies" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoValidationComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValidationComponent, [{
    type: Component,
    args: [{
      selector: "dxo-validation",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { autoUpdateParentTasks: [{
    type: Input
  }], enablePredecessorGap: [{
    type: Input
  }], validateDependencies: [{
    type: Input
  }] });
})();
var DxoValidationModule = class {
};
DxoValidationModule.ɵfac = function DxoValidationModule_Factory(t) {
  return new (t || DxoValidationModule)();
};
DxoValidationModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoValidationModule });
DxoValidationModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValidationModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoValidationComponent
      ],
      exports: [
        DxoValidationComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoValidationModule, { declarations: [DxoValidationComponent], exports: [DxoValidationComponent] });
})();
var DxiValueAxisComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "categoriesChange" },
      { emit: "visualRangeChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get aggregatedPointsPosition() {
    return this._getOption("aggregatedPointsPosition");
  }
  set aggregatedPointsPosition(value) {
    this._setOption("aggregatedPointsPosition", value);
  }
  get allowDecimals() {
    return this._getOption("allowDecimals");
  }
  set allowDecimals(value) {
    this._setOption("allowDecimals", value);
  }
  get autoBreaksEnabled() {
    return this._getOption("autoBreaksEnabled");
  }
  set autoBreaksEnabled(value) {
    this._setOption("autoBreaksEnabled", value);
  }
  get axisDivisionFactor() {
    return this._getOption("axisDivisionFactor");
  }
  set axisDivisionFactor(value) {
    this._setOption("axisDivisionFactor", value);
  }
  get breaks() {
    return this._getOption("breaks");
  }
  set breaks(value) {
    this._setOption("breaks", value);
  }
  get breakStyle() {
    return this._getOption("breakStyle");
  }
  set breakStyle(value) {
    this._setOption("breakStyle", value);
  }
  get categories() {
    return this._getOption("categories");
  }
  set categories(value) {
    this._setOption("categories", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get constantLines() {
    return this._getOption("constantLines");
  }
  set constantLines(value) {
    this._setOption("constantLines", value);
  }
  get constantLineStyle() {
    return this._getOption("constantLineStyle");
  }
  set constantLineStyle(value) {
    this._setOption("constantLineStyle", value);
  }
  get customPosition() {
    return this._getOption("customPosition");
  }
  set customPosition(value) {
    this._setOption("customPosition", value);
  }
  get discreteAxisDivisionMode() {
    return this._getOption("discreteAxisDivisionMode");
  }
  set discreteAxisDivisionMode(value) {
    this._setOption("discreteAxisDivisionMode", value);
  }
  get endOnTick() {
    return this._getOption("endOnTick");
  }
  set endOnTick(value) {
    this._setOption("endOnTick", value);
  }
  get grid() {
    return this._getOption("grid");
  }
  set grid(value) {
    this._setOption("grid", value);
  }
  get inverted() {
    return this._getOption("inverted");
  }
  set inverted(value) {
    this._setOption("inverted", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get linearThreshold() {
    return this._getOption("linearThreshold");
  }
  set linearThreshold(value) {
    this._setOption("linearThreshold", value);
  }
  get logarithmBase() {
    return this._getOption("logarithmBase");
  }
  set logarithmBase(value) {
    this._setOption("logarithmBase", value);
  }
  get maxAutoBreakCount() {
    return this._getOption("maxAutoBreakCount");
  }
  set maxAutoBreakCount(value) {
    this._setOption("maxAutoBreakCount", value);
  }
  get maxValueMargin() {
    return this._getOption("maxValueMargin");
  }
  set maxValueMargin(value) {
    this._setOption("maxValueMargin", value);
  }
  get minorGrid() {
    return this._getOption("minorGrid");
  }
  set minorGrid(value) {
    this._setOption("minorGrid", value);
  }
  get minorTick() {
    return this._getOption("minorTick");
  }
  set minorTick(value) {
    this._setOption("minorTick", value);
  }
  get minorTickCount() {
    return this._getOption("minorTickCount");
  }
  set minorTickCount(value) {
    this._setOption("minorTickCount", value);
  }
  get minorTickInterval() {
    return this._getOption("minorTickInterval");
  }
  set minorTickInterval(value) {
    this._setOption("minorTickInterval", value);
  }
  get minValueMargin() {
    return this._getOption("minValueMargin");
  }
  set minValueMargin(value) {
    this._setOption("minValueMargin", value);
  }
  get minVisualRangeLength() {
    return this._getOption("minVisualRangeLength");
  }
  set minVisualRangeLength(value) {
    this._setOption("minVisualRangeLength", value);
  }
  get multipleAxesSpacing() {
    return this._getOption("multipleAxesSpacing");
  }
  set multipleAxesSpacing(value) {
    this._setOption("multipleAxesSpacing", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get pane() {
    return this._getOption("pane");
  }
  set pane(value) {
    this._setOption("pane", value);
  }
  get placeholderSize() {
    return this._getOption("placeholderSize");
  }
  set placeholderSize(value) {
    this._setOption("placeholderSize", value);
  }
  get position() {
    return this._getOption("position");
  }
  set position(value) {
    this._setOption("position", value);
  }
  get showZero() {
    return this._getOption("showZero");
  }
  set showZero(value) {
    this._setOption("showZero", value);
  }
  get strips() {
    return this._getOption("strips");
  }
  set strips(value) {
    this._setOption("strips", value);
  }
  get stripStyle() {
    return this._getOption("stripStyle");
  }
  set stripStyle(value) {
    this._setOption("stripStyle", value);
  }
  get synchronizedValue() {
    return this._getOption("synchronizedValue");
  }
  set synchronizedValue(value) {
    this._setOption("synchronizedValue", value);
  }
  get tick() {
    return this._getOption("tick");
  }
  set tick(value) {
    this._setOption("tick", value);
  }
  get tickInterval() {
    return this._getOption("tickInterval");
  }
  set tickInterval(value) {
    this._setOption("tickInterval", value);
  }
  get title() {
    return this._getOption("title");
  }
  set title(value) {
    this._setOption("title", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get valueMarginsEnabled() {
    return this._getOption("valueMarginsEnabled");
  }
  set valueMarginsEnabled(value) {
    this._setOption("valueMarginsEnabled", value);
  }
  get valueType() {
    return this._getOption("valueType");
  }
  set valueType(value) {
    this._setOption("valueType", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get visualRange() {
    return this._getOption("visualRange");
  }
  set visualRange(value) {
    this._setOption("visualRange", value);
  }
  get visualRangeUpdateMode() {
    return this._getOption("visualRangeUpdateMode");
  }
  set visualRangeUpdateMode(value) {
    this._setOption("visualRangeUpdateMode", value);
  }
  get wholeRange() {
    return this._getOption("wholeRange");
  }
  set wholeRange(value) {
    this._setOption("wholeRange", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "valueAxis";
  }
  get breaksChildren() {
    return this._getOption("breaks");
  }
  set breaksChildren(value) {
    this.setChildren("breaks", value);
  }
  get constantLinesChildren() {
    return this._getOption("constantLines");
  }
  set constantLinesChildren(value) {
    this.setChildren("constantLines", value);
  }
  get stripsChildren() {
    return this._getOption("strips");
  }
  set stripsChildren(value) {
    this.setChildren("strips", value);
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiValueAxisComponent.ɵfac = function DxiValueAxisComponent_Factory(t) {
  return new (t || DxiValueAxisComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiValueAxisComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiValueAxisComponent, selectors: [["dxi-value-axis"]], contentQueries: function DxiValueAxisComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiBreakComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiConstantLineComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiStripComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.breaksChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.constantLinesChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.stripsChildren = _t);
  }
}, inputs: { aggregatedPointsPosition: "aggregatedPointsPosition", allowDecimals: "allowDecimals", autoBreaksEnabled: "autoBreaksEnabled", axisDivisionFactor: "axisDivisionFactor", breaks: "breaks", breakStyle: "breakStyle", categories: "categories", color: "color", constantLines: "constantLines", constantLineStyle: "constantLineStyle", customPosition: "customPosition", discreteAxisDivisionMode: "discreteAxisDivisionMode", endOnTick: "endOnTick", grid: "grid", inverted: "inverted", label: "label", linearThreshold: "linearThreshold", logarithmBase: "logarithmBase", maxAutoBreakCount: "maxAutoBreakCount", maxValueMargin: "maxValueMargin", minorGrid: "minorGrid", minorTick: "minorTick", minorTickCount: "minorTickCount", minorTickInterval: "minorTickInterval", minValueMargin: "minValueMargin", minVisualRangeLength: "minVisualRangeLength", multipleAxesSpacing: "multipleAxesSpacing", name: "name", offset: "offset", opacity: "opacity", pane: "pane", placeholderSize: "placeholderSize", position: "position", showZero: "showZero", strips: "strips", stripStyle: "stripStyle", synchronizedValue: "synchronizedValue", tick: "tick", tickInterval: "tickInterval", title: "title", type: "type", valueMarginsEnabled: "valueMarginsEnabled", valueType: "valueType", visible: "visible", visualRange: "visualRange", visualRangeUpdateMode: "visualRangeUpdateMode", wholeRange: "wholeRange", width: "width" }, outputs: { categoriesChange: "categoriesChange", visualRangeChange: "visualRangeChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiValueAxisComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiValueAxisComponent, [{
    type: Component,
    args: [{
      selector: "dxi-value-axis",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { aggregatedPointsPosition: [{
    type: Input
  }], allowDecimals: [{
    type: Input
  }], autoBreaksEnabled: [{
    type: Input
  }], axisDivisionFactor: [{
    type: Input
  }], breaks: [{
    type: Input
  }], breakStyle: [{
    type: Input
  }], categories: [{
    type: Input
  }], color: [{
    type: Input
  }], constantLines: [{
    type: Input
  }], constantLineStyle: [{
    type: Input
  }], customPosition: [{
    type: Input
  }], discreteAxisDivisionMode: [{
    type: Input
  }], endOnTick: [{
    type: Input
  }], grid: [{
    type: Input
  }], inverted: [{
    type: Input
  }], label: [{
    type: Input
  }], linearThreshold: [{
    type: Input
  }], logarithmBase: [{
    type: Input
  }], maxAutoBreakCount: [{
    type: Input
  }], maxValueMargin: [{
    type: Input
  }], minorGrid: [{
    type: Input
  }], minorTick: [{
    type: Input
  }], minorTickCount: [{
    type: Input
  }], minorTickInterval: [{
    type: Input
  }], minValueMargin: [{
    type: Input
  }], minVisualRangeLength: [{
    type: Input
  }], multipleAxesSpacing: [{
    type: Input
  }], name: [{
    type: Input
  }], offset: [{
    type: Input
  }], opacity: [{
    type: Input
  }], pane: [{
    type: Input
  }], placeholderSize: [{
    type: Input
  }], position: [{
    type: Input
  }], showZero: [{
    type: Input
  }], strips: [{
    type: Input
  }], stripStyle: [{
    type: Input
  }], synchronizedValue: [{
    type: Input
  }], tick: [{
    type: Input
  }], tickInterval: [{
    type: Input
  }], title: [{
    type: Input
  }], type: [{
    type: Input
  }], valueMarginsEnabled: [{
    type: Input
  }], valueType: [{
    type: Input
  }], visible: [{
    type: Input
  }], visualRange: [{
    type: Input
  }], visualRangeUpdateMode: [{
    type: Input
  }], wholeRange: [{
    type: Input
  }], width: [{
    type: Input
  }], categoriesChange: [{
    type: Output
  }], visualRangeChange: [{
    type: Output
  }], breaksChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiBreakComponent)]
  }], constantLinesChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiConstantLineComponent)]
  }], stripsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiStripComponent)]
  }] });
})();
var DxiValueAxisModule = class {
};
DxiValueAxisModule.ɵfac = function DxiValueAxisModule_Factory(t) {
  return new (t || DxiValueAxisModule)();
};
DxiValueAxisModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiValueAxisModule });
DxiValueAxisModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiValueAxisModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiValueAxisComponent
      ],
      exports: [
        DxiValueAxisComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiValueAxisModule, { declarations: [DxiValueAxisComponent], exports: [DxiValueAxisComponent] });
})();
var DxoValueAxisComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "visualRangeChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get allowDecimals() {
    return this._getOption("allowDecimals");
  }
  set allowDecimals(value) {
    this._setOption("allowDecimals", value);
  }
  get axisDivisionFactor() {
    return this._getOption("axisDivisionFactor");
  }
  set axisDivisionFactor(value) {
    this._setOption("axisDivisionFactor", value);
  }
  get categories() {
    return this._getOption("categories");
  }
  set categories(value) {
    this._setOption("categories", value);
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get constantLines() {
    return this._getOption("constantLines");
  }
  set constantLines(value) {
    this._setOption("constantLines", value);
  }
  get constantLineStyle() {
    return this._getOption("constantLineStyle");
  }
  set constantLineStyle(value) {
    this._setOption("constantLineStyle", value);
  }
  get discreteAxisDivisionMode() {
    return this._getOption("discreteAxisDivisionMode");
  }
  set discreteAxisDivisionMode(value) {
    this._setOption("discreteAxisDivisionMode", value);
  }
  get endOnTick() {
    return this._getOption("endOnTick");
  }
  set endOnTick(value) {
    this._setOption("endOnTick", value);
  }
  get grid() {
    return this._getOption("grid");
  }
  set grid(value) {
    this._setOption("grid", value);
  }
  get inverted() {
    return this._getOption("inverted");
  }
  set inverted(value) {
    this._setOption("inverted", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get linearThreshold() {
    return this._getOption("linearThreshold");
  }
  set linearThreshold(value) {
    this._setOption("linearThreshold", value);
  }
  get logarithmBase() {
    return this._getOption("logarithmBase");
  }
  set logarithmBase(value) {
    this._setOption("logarithmBase", value);
  }
  get maxValueMargin() {
    return this._getOption("maxValueMargin");
  }
  set maxValueMargin(value) {
    this._setOption("maxValueMargin", value);
  }
  get minorGrid() {
    return this._getOption("minorGrid");
  }
  set minorGrid(value) {
    this._setOption("minorGrid", value);
  }
  get minorTick() {
    return this._getOption("minorTick");
  }
  set minorTick(value) {
    this._setOption("minorTick", value);
  }
  get minorTickCount() {
    return this._getOption("minorTickCount");
  }
  set minorTickCount(value) {
    this._setOption("minorTickCount", value);
  }
  get minorTickInterval() {
    return this._getOption("minorTickInterval");
  }
  set minorTickInterval(value) {
    this._setOption("minorTickInterval", value);
  }
  get minValueMargin() {
    return this._getOption("minValueMargin");
  }
  set minValueMargin(value) {
    this._setOption("minValueMargin", value);
  }
  get minVisualRangeLength() {
    return this._getOption("minVisualRangeLength");
  }
  set minVisualRangeLength(value) {
    this._setOption("minVisualRangeLength", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get showZero() {
    return this._getOption("showZero");
  }
  set showZero(value) {
    this._setOption("showZero", value);
  }
  get strips() {
    return this._getOption("strips");
  }
  set strips(value) {
    this._setOption("strips", value);
  }
  get stripStyle() {
    return this._getOption("stripStyle");
  }
  set stripStyle(value) {
    this._setOption("stripStyle", value);
  }
  get tick() {
    return this._getOption("tick");
  }
  set tick(value) {
    this._setOption("tick", value);
  }
  get tickInterval() {
    return this._getOption("tickInterval");
  }
  set tickInterval(value) {
    this._setOption("tickInterval", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get valueMarginsEnabled() {
    return this._getOption("valueMarginsEnabled");
  }
  set valueMarginsEnabled(value) {
    this._setOption("valueMarginsEnabled", value);
  }
  get valueType() {
    return this._getOption("valueType");
  }
  set valueType(value) {
    this._setOption("valueType", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get visualRange() {
    return this._getOption("visualRange");
  }
  set visualRange(value) {
    this._setOption("visualRange", value);
  }
  get visualRangeUpdateMode() {
    return this._getOption("visualRangeUpdateMode");
  }
  set visualRangeUpdateMode(value) {
    this._setOption("visualRangeUpdateMode", value);
  }
  get wholeRange() {
    return this._getOption("wholeRange");
  }
  set wholeRange(value) {
    this._setOption("wholeRange", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get max() {
    return this._getOption("max");
  }
  set max(value) {
    this._setOption("max", value);
  }
  get min() {
    return this._getOption("min");
  }
  set min(value) {
    this._setOption("min", value);
  }
  get _optionPath() {
    return "valueAxis";
  }
  get constantLinesChildren() {
    return this._getOption("constantLines");
  }
  set constantLinesChildren(value) {
    this.setChildren("constantLines", value);
  }
  get stripsChildren() {
    return this._getOption("strips");
  }
  set stripsChildren(value) {
    this.setChildren("strips", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoValueAxisComponent.ɵfac = function DxoValueAxisComponent_Factory(t) {
  return new (t || DxoValueAxisComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoValueAxisComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoValueAxisComponent, selectors: [["dxo-value-axis"]], contentQueries: function DxoValueAxisComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiConstantLineComponent, 4);
    ɵɵcontentQuery(dirIndex, DxiStripComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.constantLinesChildren = _t);
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.stripsChildren = _t);
  }
}, inputs: { allowDecimals: "allowDecimals", axisDivisionFactor: "axisDivisionFactor", categories: "categories", color: "color", constantLines: "constantLines", constantLineStyle: "constantLineStyle", discreteAxisDivisionMode: "discreteAxisDivisionMode", endOnTick: "endOnTick", grid: "grid", inverted: "inverted", label: "label", linearThreshold: "linearThreshold", logarithmBase: "logarithmBase", maxValueMargin: "maxValueMargin", minorGrid: "minorGrid", minorTick: "minorTick", minorTickCount: "minorTickCount", minorTickInterval: "minorTickInterval", minValueMargin: "minValueMargin", minVisualRangeLength: "minVisualRangeLength", opacity: "opacity", showZero: "showZero", strips: "strips", stripStyle: "stripStyle", tick: "tick", tickInterval: "tickInterval", type: "type", valueMarginsEnabled: "valueMarginsEnabled", valueType: "valueType", visible: "visible", visualRange: "visualRange", visualRangeUpdateMode: "visualRangeUpdateMode", wholeRange: "wholeRange", width: "width", max: "max", min: "min" }, outputs: { visualRangeChange: "visualRangeChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoValueAxisComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueAxisComponent, [{
    type: Component,
    args: [{
      selector: "dxo-value-axis",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { allowDecimals: [{
    type: Input
  }], axisDivisionFactor: [{
    type: Input
  }], categories: [{
    type: Input
  }], color: [{
    type: Input
  }], constantLines: [{
    type: Input
  }], constantLineStyle: [{
    type: Input
  }], discreteAxisDivisionMode: [{
    type: Input
  }], endOnTick: [{
    type: Input
  }], grid: [{
    type: Input
  }], inverted: [{
    type: Input
  }], label: [{
    type: Input
  }], linearThreshold: [{
    type: Input
  }], logarithmBase: [{
    type: Input
  }], maxValueMargin: [{
    type: Input
  }], minorGrid: [{
    type: Input
  }], minorTick: [{
    type: Input
  }], minorTickCount: [{
    type: Input
  }], minorTickInterval: [{
    type: Input
  }], minValueMargin: [{
    type: Input
  }], minVisualRangeLength: [{
    type: Input
  }], opacity: [{
    type: Input
  }], showZero: [{
    type: Input
  }], strips: [{
    type: Input
  }], stripStyle: [{
    type: Input
  }], tick: [{
    type: Input
  }], tickInterval: [{
    type: Input
  }], type: [{
    type: Input
  }], valueMarginsEnabled: [{
    type: Input
  }], valueType: [{
    type: Input
  }], visible: [{
    type: Input
  }], visualRange: [{
    type: Input
  }], visualRangeUpdateMode: [{
    type: Input
  }], wholeRange: [{
    type: Input
  }], width: [{
    type: Input
  }], max: [{
    type: Input
  }], min: [{
    type: Input
  }], visualRangeChange: [{
    type: Output
  }], constantLinesChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiConstantLineComponent)]
  }], stripsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiStripComponent)]
  }] });
})();
var DxoValueAxisModule = class {
};
DxoValueAxisModule.ɵfac = function DxoValueAxisModule_Factory(t) {
  return new (t || DxoValueAxisModule)();
};
DxoValueAxisModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoValueAxisModule });
DxoValueAxisModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueAxisModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoValueAxisComponent
      ],
      exports: [
        DxoValueAxisComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoValueAxisModule, { declarations: [DxoValueAxisComponent], exports: [DxoValueAxisComponent] });
})();
var DxoValueErrorBarComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get displayMode() {
    return this._getOption("displayMode");
  }
  set displayMode(value) {
    this._setOption("displayMode", value);
  }
  get edgeLength() {
    return this._getOption("edgeLength");
  }
  set edgeLength(value) {
    this._setOption("edgeLength", value);
  }
  get highValueField() {
    return this._getOption("highValueField");
  }
  set highValueField(value) {
    this._setOption("highValueField", value);
  }
  get lineWidth() {
    return this._getOption("lineWidth");
  }
  set lineWidth(value) {
    this._setOption("lineWidth", value);
  }
  get lowValueField() {
    return this._getOption("lowValueField");
  }
  set lowValueField(value) {
    this._setOption("lowValueField", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get _optionPath() {
    return "valueErrorBar";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoValueErrorBarComponent.ɵfac = function DxoValueErrorBarComponent_Factory(t) {
  return new (t || DxoValueErrorBarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoValueErrorBarComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoValueErrorBarComponent, selectors: [["dxo-value-error-bar"]], inputs: { color: "color", displayMode: "displayMode", edgeLength: "edgeLength", highValueField: "highValueField", lineWidth: "lineWidth", lowValueField: "lowValueField", opacity: "opacity", type: "type", value: "value" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoValueErrorBarComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueErrorBarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-value-error-bar",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], displayMode: [{
    type: Input
  }], edgeLength: [{
    type: Input
  }], highValueField: [{
    type: Input
  }], lineWidth: [{
    type: Input
  }], lowValueField: [{
    type: Input
  }], opacity: [{
    type: Input
  }], type: [{
    type: Input
  }], value: [{
    type: Input
  }] });
})();
var DxoValueErrorBarModule = class {
};
DxoValueErrorBarModule.ɵfac = function DxoValueErrorBarModule_Factory(t) {
  return new (t || DxoValueErrorBarModule)();
};
DxoValueErrorBarModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoValueErrorBarModule });
DxoValueErrorBarModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueErrorBarModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoValueErrorBarComponent
      ],
      exports: [
        DxoValueErrorBarComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoValueErrorBarModule, { declarations: [DxoValueErrorBarComponent], exports: [DxoValueErrorBarComponent] });
})();
var DxoValueFormatComponent = class extends DxoFormat {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "valueFormat";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoValueFormatComponent.ɵfac = function DxoValueFormatComponent_Factory(t) {
  return new (t || DxoValueFormatComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoValueFormatComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoValueFormatComponent, selectors: [["dxo-value-format"]], inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type", useCurrencyAccountingStyle: "useCurrencyAccountingStyle" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoValueFormatComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueFormatComponent, [{
    type: Component,
    args: [{
      selector: "dxo-value-format",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "currency",
        "formatter",
        "parser",
        "precision",
        "type",
        "useCurrencyAccountingStyle"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoValueFormatModule = class {
};
DxoValueFormatModule.ɵfac = function DxoValueFormatModule_Factory(t) {
  return new (t || DxoValueFormatModule)();
};
DxoValueFormatModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoValueFormatModule });
DxoValueFormatModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueFormatModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoValueFormatComponent
      ],
      exports: [
        DxoValueFormatComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoValueFormatModule, { declarations: [DxoValueFormatComponent], exports: [DxoValueFormatComponent] });
})();
var DxoValueIndicatorComponent = class extends DxoGaugeIndicator {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "valueIndicator";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoValueIndicatorComponent.ɵfac = function DxoValueIndicatorComponent_Factory(t) {
  return new (t || DxoValueIndicatorComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoValueIndicatorComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoValueIndicatorComponent, selectors: [["dxo-value-indicator"]], inputs: { arrowLength: "arrowLength", backgroundColor: "backgroundColor", baseValue: "baseValue", beginAdaptingAtRadius: "beginAdaptingAtRadius", color: "color", horizontalOrientation: "horizontalOrientation", indentFromCenter: "indentFromCenter", length: "length", offset: "offset", palette: "palette", secondColor: "secondColor", secondFraction: "secondFraction", size: "size", spindleGapSize: "spindleGapSize", spindleSize: "spindleSize", text: "text", type: "type", verticalOrientation: "verticalOrientation", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoValueIndicatorComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueIndicatorComponent, [{
    type: Component,
    args: [{
      selector: "dxo-value-indicator",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "arrowLength",
        "backgroundColor",
        "baseValue",
        "beginAdaptingAtRadius",
        "color",
        "horizontalOrientation",
        "indentFromCenter",
        "length",
        "offset",
        "palette",
        "secondColor",
        "secondFraction",
        "size",
        "spindleGapSize",
        "spindleSize",
        "text",
        "type",
        "verticalOrientation",
        "width"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoValueIndicatorModule = class {
};
DxoValueIndicatorModule.ɵfac = function DxoValueIndicatorModule_Factory(t) {
  return new (t || DxoValueIndicatorModule)();
};
DxoValueIndicatorModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoValueIndicatorModule });
DxoValueIndicatorModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoValueIndicatorModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoValueIndicatorComponent
      ],
      exports: [
        DxoValueIndicatorComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoValueIndicatorModule, { declarations: [DxoValueIndicatorComponent], exports: [DxoValueIndicatorComponent] });
})();
var DxoHtmlEditorVariables = class extends NestedOption {
  get dataSource() {
    return this._getOption("dataSource");
  }
  set dataSource(value) {
    this._setOption("dataSource", value);
  }
  get escapeChar() {
    return this._getOption("escapeChar");
  }
  set escapeChar(value) {
    this._setOption("escapeChar", value);
  }
};
DxoHtmlEditorVariables.ɵfac = /** @pureOrBreakMyCode */
/* @__PURE__ */ function() {
  let ɵDxoHtmlEditorVariables_BaseFactory;
  return function DxoHtmlEditorVariables_Factory(t) {
    return (ɵDxoHtmlEditorVariables_BaseFactory || (ɵDxoHtmlEditorVariables_BaseFactory = ɵɵgetInheritedFactory(DxoHtmlEditorVariables)))(t || DxoHtmlEditorVariables);
  };
}();
DxoHtmlEditorVariables.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoHtmlEditorVariables, selectors: [["ng-component"]], features: [ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoHtmlEditorVariables_Template(rf, ctx) {
}, encapsulation: 2 });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoHtmlEditorVariables, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var DxoVariablesComponent = class extends DxoHtmlEditorVariables {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get _optionPath() {
    return "variables";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoVariablesComponent.ɵfac = function DxoVariablesComponent_Factory(t) {
  return new (t || DxoVariablesComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoVariablesComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoVariablesComponent, selectors: [["dxo-variables"]], inputs: { dataSource: "dataSource", escapeChar: "escapeChar" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoVariablesComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoVariablesComponent, [{
    type: Component,
    args: [{
      selector: "dxo-variables",
      template: "",
      styles: [""],
      providers: [NestedOptionHost],
      inputs: [
        "dataSource",
        "escapeChar"
      ]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, null);
})();
var DxoVariablesModule = class {
};
DxoVariablesModule.ɵfac = function DxoVariablesModule_Factory(t) {
  return new (t || DxoVariablesModule)();
};
DxoVariablesModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoVariablesModule });
DxoVariablesModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoVariablesModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoVariablesComponent
      ],
      exports: [
        DxoVariablesComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoVariablesModule, { declarations: [DxoVariablesComponent], exports: [DxoVariablesComponent] });
})();
var DxoVerticalLineComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get color() {
    return this._getOption("color");
  }
  set color(value) {
    this._setOption("color", value);
  }
  get dashStyle() {
    return this._getOption("dashStyle");
  }
  set dashStyle(value) {
    this._setOption("dashStyle", value);
  }
  get label() {
    return this._getOption("label");
  }
  set label(value) {
    this._setOption("label", value);
  }
  get opacity() {
    return this._getOption("opacity");
  }
  set opacity(value) {
    this._setOption("opacity", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get width() {
    return this._getOption("width");
  }
  set width(value) {
    this._setOption("width", value);
  }
  get _optionPath() {
    return "verticalLine";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoVerticalLineComponent.ɵfac = function DxoVerticalLineComponent_Factory(t) {
  return new (t || DxoVerticalLineComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoVerticalLineComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoVerticalLineComponent, selectors: [["dxo-vertical-line"]], inputs: { color: "color", dashStyle: "dashStyle", label: "label", opacity: "opacity", visible: "visible", width: "width" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoVerticalLineComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoVerticalLineComponent, [{
    type: Component,
    args: [{
      selector: "dxo-vertical-line",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { color: [{
    type: Input
  }], dashStyle: [{
    type: Input
  }], label: [{
    type: Input
  }], opacity: [{
    type: Input
  }], visible: [{
    type: Input
  }], width: [{
    type: Input
  }] });
})();
var DxoVerticalLineModule = class {
};
DxoVerticalLineModule.ɵfac = function DxoVerticalLineModule_Factory(t) {
  return new (t || DxoVerticalLineModule)();
};
DxoVerticalLineModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoVerticalLineModule });
DxoVerticalLineModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoVerticalLineModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoVerticalLineComponent
      ],
      exports: [
        DxoVerticalLineComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoVerticalLineModule, { declarations: [DxoVerticalLineComponent], exports: [DxoVerticalLineComponent] });
})();
var DxiViewComponent = class extends CollectionNestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get agendaDuration() {
    return this._getOption("agendaDuration");
  }
  set agendaDuration(value) {
    this._setOption("agendaDuration", value);
  }
  get allDayPanelMode() {
    return this._getOption("allDayPanelMode");
  }
  set allDayPanelMode(value) {
    this._setOption("allDayPanelMode", value);
  }
  get appointmentCollectorTemplate() {
    return this._getOption("appointmentCollectorTemplate");
  }
  set appointmentCollectorTemplate(value) {
    this._setOption("appointmentCollectorTemplate", value);
  }
  get appointmentTemplate() {
    return this._getOption("appointmentTemplate");
  }
  set appointmentTemplate(value) {
    this._setOption("appointmentTemplate", value);
  }
  get appointmentTooltipTemplate() {
    return this._getOption("appointmentTooltipTemplate");
  }
  set appointmentTooltipTemplate(value) {
    this._setOption("appointmentTooltipTemplate", value);
  }
  get cellDuration() {
    return this._getOption("cellDuration");
  }
  set cellDuration(value) {
    this._setOption("cellDuration", value);
  }
  get dataCellTemplate() {
    return this._getOption("dataCellTemplate");
  }
  set dataCellTemplate(value) {
    this._setOption("dataCellTemplate", value);
  }
  get dateCellTemplate() {
    return this._getOption("dateCellTemplate");
  }
  set dateCellTemplate(value) {
    this._setOption("dateCellTemplate", value);
  }
  get dropDownAppointmentTemplate() {
    return this._getOption("dropDownAppointmentTemplate");
  }
  set dropDownAppointmentTemplate(value) {
    this._setOption("dropDownAppointmentTemplate", value);
  }
  get endDayHour() {
    return this._getOption("endDayHour");
  }
  set endDayHour(value) {
    this._setOption("endDayHour", value);
  }
  get firstDayOfWeek() {
    return this._getOption("firstDayOfWeek");
  }
  set firstDayOfWeek(value) {
    this._setOption("firstDayOfWeek", value);
  }
  get groupByDate() {
    return this._getOption("groupByDate");
  }
  set groupByDate(value) {
    this._setOption("groupByDate", value);
  }
  get groupOrientation() {
    return this._getOption("groupOrientation");
  }
  set groupOrientation(value) {
    this._setOption("groupOrientation", value);
  }
  get groups() {
    return this._getOption("groups");
  }
  set groups(value) {
    this._setOption("groups", value);
  }
  get intervalCount() {
    return this._getOption("intervalCount");
  }
  set intervalCount(value) {
    this._setOption("intervalCount", value);
  }
  get maxAppointmentsPerCell() {
    return this._getOption("maxAppointmentsPerCell");
  }
  set maxAppointmentsPerCell(value) {
    this._setOption("maxAppointmentsPerCell", value);
  }
  get name() {
    return this._getOption("name");
  }
  set name(value) {
    this._setOption("name", value);
  }
  get offset() {
    return this._getOption("offset");
  }
  set offset(value) {
    this._setOption("offset", value);
  }
  get resourceCellTemplate() {
    return this._getOption("resourceCellTemplate");
  }
  set resourceCellTemplate(value) {
    this._setOption("resourceCellTemplate", value);
  }
  get scrolling() {
    return this._getOption("scrolling");
  }
  set scrolling(value) {
    this._setOption("scrolling", value);
  }
  get startDate() {
    return this._getOption("startDate");
  }
  set startDate(value) {
    this._setOption("startDate", value);
  }
  get startDayHour() {
    return this._getOption("startDayHour");
  }
  set startDayHour(value) {
    this._setOption("startDayHour", value);
  }
  get timeCellTemplate() {
    return this._getOption("timeCellTemplate");
  }
  set timeCellTemplate(value) {
    this._setOption("timeCellTemplate", value);
  }
  get type() {
    return this._getOption("type");
  }
  set type(value) {
    this._setOption("type", value);
  }
  get _optionPath() {
    return "views";
  }
  ngOnDestroy() {
    this._deleteRemovedOptions(this._fullOptionPath());
  }
};
DxiViewComponent.ɵfac = function DxiViewComponent_Factory(t) {
  return new (t || DxiViewComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxiViewComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxiViewComponent, selectors: [["dxi-view"]], inputs: { agendaDuration: "agendaDuration", allDayPanelMode: "allDayPanelMode", appointmentCollectorTemplate: "appointmentCollectorTemplate", appointmentTemplate: "appointmentTemplate", appointmentTooltipTemplate: "appointmentTooltipTemplate", cellDuration: "cellDuration", dataCellTemplate: "dataCellTemplate", dateCellTemplate: "dateCellTemplate", dropDownAppointmentTemplate: "dropDownAppointmentTemplate", endDayHour: "endDayHour", firstDayOfWeek: "firstDayOfWeek", groupByDate: "groupByDate", groupOrientation: "groupOrientation", groups: "groups", intervalCount: "intervalCount", maxAppointmentsPerCell: "maxAppointmentsPerCell", name: "name", offset: "offset", resourceCellTemplate: "resourceCellTemplate", scrolling: "scrolling", startDate: "startDate", startDayHour: "startDayHour", timeCellTemplate: "timeCellTemplate", type: "type" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiViewComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiViewComponent, [{
    type: Component,
    args: [{
      selector: "dxi-view",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { agendaDuration: [{
    type: Input
  }], allDayPanelMode: [{
    type: Input
  }], appointmentCollectorTemplate: [{
    type: Input
  }], appointmentTemplate: [{
    type: Input
  }], appointmentTooltipTemplate: [{
    type: Input
  }], cellDuration: [{
    type: Input
  }], dataCellTemplate: [{
    type: Input
  }], dateCellTemplate: [{
    type: Input
  }], dropDownAppointmentTemplate: [{
    type: Input
  }], endDayHour: [{
    type: Input
  }], firstDayOfWeek: [{
    type: Input
  }], groupByDate: [{
    type: Input
  }], groupOrientation: [{
    type: Input
  }], groups: [{
    type: Input
  }], intervalCount: [{
    type: Input
  }], maxAppointmentsPerCell: [{
    type: Input
  }], name: [{
    type: Input
  }], offset: [{
    type: Input
  }], resourceCellTemplate: [{
    type: Input
  }], scrolling: [{
    type: Input
  }], startDate: [{
    type: Input
  }], startDayHour: [{
    type: Input
  }], timeCellTemplate: [{
    type: Input
  }], type: [{
    type: Input
  }] });
})();
var DxiViewModule = class {
};
DxiViewModule.ɵfac = function DxiViewModule_Factory(t) {
  return new (t || DxiViewModule)();
};
DxiViewModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxiViewModule });
DxiViewModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxiViewModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxiViewComponent
      ],
      exports: [
        DxiViewComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxiViewModule, { declarations: [DxiViewComponent], exports: [DxiViewComponent] });
})();
var DxoViewToolbarComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get commands() {
    return this._getOption("commands");
  }
  set commands(value) {
    this._setOption("commands", value);
  }
  get visible() {
    return this._getOption("visible");
  }
  set visible(value) {
    this._setOption("visible", value);
  }
  get _optionPath() {
    return "viewToolbar";
  }
  get commandsChildren() {
    return this._getOption("commands");
  }
  set commandsChildren(value) {
    this.setChildren("commands", value);
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoViewToolbarComponent.ɵfac = function DxoViewToolbarComponent_Factory(t) {
  return new (t || DxoViewToolbarComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoViewToolbarComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoViewToolbarComponent, selectors: [["dxo-view-toolbar"]], contentQueries: function DxoViewToolbarComponent_ContentQueries(rf, ctx, dirIndex) {
  if (rf & 1) {
    ɵɵcontentQuery(dirIndex, DxiCommandComponent, 4);
  }
  if (rf & 2) {
    let _t;
    ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.commandsChildren = _t);
  }
}, inputs: { commands: "commands", visible: "visible" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoViewToolbarComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoViewToolbarComponent, [{
    type: Component,
    args: [{
      selector: "dxo-view-toolbar",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { commands: [{
    type: Input
  }], visible: [{
    type: Input
  }], commandsChildren: [{
    type: ContentChildren,
    args: [forwardRef(() => DxiCommandComponent)]
  }] });
})();
var DxoViewToolbarModule = class {
};
DxoViewToolbarModule.ɵfac = function DxoViewToolbarModule_Factory(t) {
  return new (t || DxoViewToolbarModule)();
};
DxoViewToolbarModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoViewToolbarModule });
DxoViewToolbarModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoViewToolbarModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoViewToolbarComponent
      ],
      exports: [
        DxoViewToolbarComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoViewToolbarModule, { declarations: [DxoViewToolbarComponent], exports: [DxoViewToolbarComponent] });
})();
var DxoWidthComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get rangeMaxPoint() {
    return this._getOption("rangeMaxPoint");
  }
  set rangeMaxPoint(value) {
    this._setOption("rangeMaxPoint", value);
  }
  get rangeMinPoint() {
    return this._getOption("rangeMinPoint");
  }
  set rangeMinPoint(value) {
    this._setOption("rangeMinPoint", value);
  }
  get end() {
    return this._getOption("end");
  }
  set end(value) {
    this._setOption("end", value);
  }
  get start() {
    return this._getOption("start");
  }
  set start(value) {
    this._setOption("start", value);
  }
  get _optionPath() {
    return "width";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoWidthComponent.ɵfac = function DxoWidthComponent_Factory(t) {
  return new (t || DxoWidthComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoWidthComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoWidthComponent, selectors: [["dxo-width"]], inputs: { rangeMaxPoint: "rangeMaxPoint", rangeMinPoint: "rangeMinPoint", end: "end", start: "start" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoWidthComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoWidthComponent, [{
    type: Component,
    args: [{
      selector: "dxo-width",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { rangeMaxPoint: [{
    type: Input
  }], rangeMinPoint: [{
    type: Input
  }], end: [{
    type: Input
  }], start: [{
    type: Input
  }] });
})();
var DxoWidthModule = class {
};
DxoWidthModule.ɵfac = function DxoWidthModule_Factory(t) {
  return new (t || DxoWidthModule)();
};
DxoWidthModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoWidthModule });
DxoWidthModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoWidthModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoWidthComponent
      ],
      exports: [
        DxoWidthComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoWidthModule, { declarations: [DxoWidthComponent], exports: [DxoWidthComponent] });
})();
var DxoZoomAndPanComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get allowMouseWheel() {
    return this._getOption("allowMouseWheel");
  }
  set allowMouseWheel(value) {
    this._setOption("allowMouseWheel", value);
  }
  get allowTouchGestures() {
    return this._getOption("allowTouchGestures");
  }
  set allowTouchGestures(value) {
    this._setOption("allowTouchGestures", value);
  }
  get argumentAxis() {
    return this._getOption("argumentAxis");
  }
  set argumentAxis(value) {
    this._setOption("argumentAxis", value);
  }
  get dragBoxStyle() {
    return this._getOption("dragBoxStyle");
  }
  set dragBoxStyle(value) {
    this._setOption("dragBoxStyle", value);
  }
  get dragToZoom() {
    return this._getOption("dragToZoom");
  }
  set dragToZoom(value) {
    this._setOption("dragToZoom", value);
  }
  get panKey() {
    return this._getOption("panKey");
  }
  set panKey(value) {
    this._setOption("panKey", value);
  }
  get valueAxis() {
    return this._getOption("valueAxis");
  }
  set valueAxis(value) {
    this._setOption("valueAxis", value);
  }
  get _optionPath() {
    return "zoomAndPan";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoZoomAndPanComponent.ɵfac = function DxoZoomAndPanComponent_Factory(t) {
  return new (t || DxoZoomAndPanComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoZoomAndPanComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoZoomAndPanComponent, selectors: [["dxo-zoom-and-pan"]], inputs: { allowMouseWheel: "allowMouseWheel", allowTouchGestures: "allowTouchGestures", argumentAxis: "argumentAxis", dragBoxStyle: "dragBoxStyle", dragToZoom: "dragToZoom", panKey: "panKey", valueAxis: "valueAxis" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoZoomAndPanComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoZoomAndPanComponent, [{
    type: Component,
    args: [{
      selector: "dxo-zoom-and-pan",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { allowMouseWheel: [{
    type: Input
  }], allowTouchGestures: [{
    type: Input
  }], argumentAxis: [{
    type: Input
  }], dragBoxStyle: [{
    type: Input
  }], dragToZoom: [{
    type: Input
  }], panKey: [{
    type: Input
  }], valueAxis: [{
    type: Input
  }] });
})();
var DxoZoomAndPanModule = class {
};
DxoZoomAndPanModule.ɵfac = function DxoZoomAndPanModule_Factory(t) {
  return new (t || DxoZoomAndPanModule)();
};
DxoZoomAndPanModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoZoomAndPanModule });
DxoZoomAndPanModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoZoomAndPanModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoZoomAndPanComponent
      ],
      exports: [
        DxoZoomAndPanComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoZoomAndPanModule, { declarations: [DxoZoomAndPanComponent], exports: [DxoZoomAndPanComponent] });
})();
var DxoZoomLevelComponent = class extends NestedOption {
  constructor(parentOptionHost, optionHost) {
    super();
    this._createEventEmitters([
      { emit: "valueChange" }
    ]);
    parentOptionHost.setNestedOption(this);
    optionHost.setHost(this, this._fullOptionPath.bind(this));
  }
  get items() {
    return this._getOption("items");
  }
  set items(value) {
    this._setOption("items", value);
  }
  get value() {
    return this._getOption("value");
  }
  set value(value) {
    this._setOption("value", value);
  }
  get _optionPath() {
    return "zoomLevel";
  }
  ngOnInit() {
    this._addRecreatedComponent();
  }
  ngOnDestroy() {
    this._addRemovedOption(this._getOptionPath());
  }
};
DxoZoomLevelComponent.ɵfac = function DxoZoomLevelComponent_Factory(t) {
  return new (t || DxoZoomLevelComponent)(ɵɵdirectiveInject(NestedOptionHost, 5), ɵɵdirectiveInject(NestedOptionHost, 1));
};
DxoZoomLevelComponent.ɵcmp = /** @pureOrBreakMyCode */
ɵɵdefineComponent({ type: DxoZoomLevelComponent, selectors: [["dxo-zoom-level"]], inputs: { items: "items", value: "value" }, outputs: { valueChange: "valueChange" }, features: [ɵɵProvidersFeature([NestedOptionHost]), ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoZoomLevelComponent_Template(rf, ctx) {
}, styles: [""] });
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoZoomLevelComponent, [{
    type: Component,
    args: [{
      selector: "dxo-zoom-level",
      template: "",
      styles: [""],
      providers: [NestedOptionHost]
    }]
  }], function() {
    return [{ type: NestedOptionHost, decorators: [{
      type: SkipSelf
    }, {
      type: Host
    }] }, { type: NestedOptionHost, decorators: [{
      type: Host
    }] }];
  }, { items: [{
    type: Input
  }], value: [{
    type: Input
  }], valueChange: [{
    type: Output
  }] });
})();
var DxoZoomLevelModule = class {
};
DxoZoomLevelModule.ɵfac = function DxoZoomLevelModule_Factory(t) {
  return new (t || DxoZoomLevelModule)();
};
DxoZoomLevelModule.ɵmod = /** @pureOrBreakMyCode */
ɵɵdefineNgModule({ type: DxoZoomLevelModule });
DxoZoomLevelModule.ɵinj = /** @pureOrBreakMyCode */
ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DxoZoomLevelModule, [{
    type: NgModule,
    args: [{
      declarations: [
        DxoZoomLevelComponent
      ],
      exports: [
        DxoZoomLevelComponent
      ]
    }]
  }], null, null);
})();
(function() {
  (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(DxoZoomLevelModule, { declarations: [DxoZoomLevelComponent], exports: [DxoZoomLevelComponent] });
})();

export {
  DxoAdapterComponent,
  DxoAdapterModule,
  DxoAdaptiveLayoutComponent,
  DxoAdaptiveLayoutModule,
  DxoAggregationIntervalComponent,
  DxoAggregationIntervalModule,
  DxoAggregationComponent,
  DxoAggregationModule,
  DxoAnimationComponent,
  DxoAnimationModule,
  DxiAnnotationComponent,
  DxiAnnotationModule,
  DxoApiKeyComponent,
  DxoApiKeyModule,
  DxoAppointmentDraggingComponent,
  DxoAppointmentDraggingModule,
  DxoAreaComponent,
  DxoAreaModule,
  DxiBreakComponent,
  DxiBreakModule,
  DxiConstantLineComponent,
  DxiConstantLineModule,
  DxiStripComponent,
  DxiStripModule,
  DxoArgumentAxisComponent,
  DxoArgumentAxisModule,
  DxoArgumentFormatComponent,
  DxoArgumentFormatModule,
  DxoAtComponent,
  DxoAtModule,
  DxoAutoLayoutComponent,
  DxoAutoLayoutModule,
  DxoBackgroundColorComponent,
  DxoBackgroundColorModule,
  DxoBackgroundComponent,
  DxoBackgroundModule,
  DxoBarComponent,
  DxoBarModule,
  DxoBehaviorComponent,
  DxoBehaviorModule,
  DxoBorderComponent,
  DxoBorderModule,
  DxoBoundaryOffsetComponent,
  DxoBoundaryOffsetModule,
  DxiValidationRuleComponent,
  DxiValidationRuleModule,
  DxiCommandComponent,
  DxiCommandModule,
  DxiGroupComponent,
  DxiGroupModule,
  DxiTabComponent,
  DxiTabModule,
  DxiLocationComponent,
  DxiLocationModule,
  DxiItemComponent,
  DxiItemModule,
  DxoBoxComponent,
  DxoBoxModule,
  DxoBreakStyleComponent,
  DxoBreakStyleModule,
  DxoBubbleComponent,
  DxoBubbleModule,
  DxiButtonComponent,
  DxiButtonModule,
  DxoButtonOptionsComponent,
  DxoButtonOptionsModule,
  DxoCalendarOptionsComponent,
  DxoCalendarOptionsModule,
  DxoCandlestickComponent,
  DxoCandlestickModule,
  DxiCenterComponent,
  DxiCenterModule,
  DxiChangeComponent,
  DxiChangeModule,
  DxiSeriesComponent,
  DxiSeriesModule,
  DxoChartComponent,
  DxoChartModule,
  DxoColCountByScreenComponent,
  DxoColCountByScreenModule,
  DxiColComponent,
  DxiColModule,
  DxoCollisionComponent,
  DxoCollisionModule,
  DxoColorComponent,
  DxoColorModule,
  DxoColorizerComponent,
  DxoColorizerModule,
  DxoColumnChooserComponent,
  DxoColumnChooserModule,
  DxiColumnComponent,
  DxiColumnModule,
  DxoColumnFixingComponent,
  DxoColumnFixingModule,
  DxoCommonAnnotationSettingsComponent,
  DxoCommonAnnotationSettingsModule,
  DxoCommonAxisSettingsComponent,
  DxoCommonAxisSettingsModule,
  DxoCommonPaneSettingsComponent,
  DxoCommonPaneSettingsModule,
  DxoCommonSeriesSettingsComponent,
  DxoCommonSeriesSettingsModule,
  DxiConnectionPointComponent,
  DxiConnectionPointModule,
  DxoConnectorComponent,
  DxoConnectorModule,
  DxoConstantLineStyleComponent,
  DxoConstantLineStyleModule,
  DxoContextMenuComponent,
  DxoContextMenuModule,
  DxoContextToolboxComponent,
  DxoContextToolboxModule,
  DxoControlBarComponent,
  DxoControlBarModule,
  DxoCrosshairComponent,
  DxoCrosshairModule,
  DxoCursorOffsetComponent,
  DxoCursorOffsetModule,
  DxiCustomOperationComponent,
  DxiCustomOperationModule,
  DxiCustomShapeComponent,
  DxiCustomShapeModule,
  DxoDataPrepareSettingsComponent,
  DxoDataPrepareSettingsModule,
  DxiFieldComponent,
  DxiFieldModule,
  DxoDataSourceComponent,
  DxoDataSourceModule,
  DxoDefaultItemPropertiesComponent,
  DxoDefaultItemPropertiesModule,
  DxoDelayComponent,
  DxoDelayModule,
  DxoDependenciesComponent,
  DxoDependenciesModule,
  DxoDetailsComponent,
  DxoDetailsModule,
  DxoDisplayFormatComponent,
  DxoDisplayFormatModule,
  DxoDragBoxStyleComponent,
  DxoDragBoxStyleModule,
  DxiToolbarItemComponent,
  DxiToolbarItemModule,
  DxoDropDownOptionsComponent,
  DxoDropDownOptionsModule,
  DxoEdgesComponent,
  DxoEdgesModule,
  DxoEditingComponent,
  DxoEditingModule,
  DxoExportComponent,
  DxoExportModule,
  DxoFieldChooserComponent,
  DxoFieldChooserModule,
  DxoFieldPanelComponent,
  DxoFieldPanelModule,
  DxiFileSelectionItemComponent,
  DxiFileSelectionItemModule,
  DxoFileUploaderOptionsComponent,
  DxoFileUploaderOptionsModule,
  DxoFilterBuilderPopupComponent,
  DxoFilterBuilderPopupModule,
  DxoFilterBuilderComponent,
  DxoFilterBuilderModule,
  DxoFilterOperationDescriptionsComponent,
  DxoFilterOperationDescriptionsModule,
  DxoFilterPanelComponent,
  DxoFilterPanelModule,
  DxoFilterRowComponent,
  DxoFilterRowModule,
  DxoFontComponent,
  DxoFontModule,
  DxoFormItemComponent,
  DxoFormItemModule,
  DxoFormComponent,
  DxoFormModule,
  DxoFormatComponent,
  DxoFormatModule,
  DxoFromComponent,
  DxoFromModule,
  DxoFullstackedareaComponent,
  DxoFullstackedareaModule,
  DxoFullstackedbarComponent,
  DxoFullstackedbarModule,
  DxoFullstackedlineComponent,
  DxoFullstackedlineModule,
  DxoFullstackedsplineComponent,
  DxoFullstackedsplineModule,
  DxoFullstackedsplineareaComponent,
  DxoFullstackedsplineareaModule,
  DxoGeometryComponent,
  DxoGeometryModule,
  DxoGridSizeComponent,
  DxoGridSizeModule,
  DxoGridComponent,
  DxoGridModule,
  DxiGroupItemComponent,
  DxiGroupItemModule,
  DxoGroupOperationDescriptionsComponent,
  DxoGroupOperationDescriptionsModule,
  DxoGroupPanelComponent,
  DxoGroupPanelModule,
  DxoGroupComponent,
  DxoGroupModule,
  DxoGroupingComponent,
  DxoGroupingModule,
  DxoHatchingComponent,
  DxoHatchingModule,
  DxoHeaderFilterComponent,
  DxoHeaderFilterModule,
  DxoHeightComponent,
  DxoHeightModule,
  DxoHideEventComponent,
  DxoHideEventModule,
  DxoHideComponent,
  DxoHideModule,
  DxoHistoryToolbarComponent,
  DxoHistoryToolbarModule,
  DxoHorizontalLineComponent,
  DxoHorizontalLineModule,
  DxoHoverStyleComponent,
  DxoHoverStyleModule,
  DxoImageUploadComponent,
  DxoImageUploadModule,
  DxoImageComponent,
  DxoImageModule,
  DxoIndentComponent,
  DxoIndentModule,
  DxoItemDraggingComponent,
  DxoItemDraggingModule,
  DxoItemTextFormatComponent,
  DxoItemTextFormatModule,
  DxoItemViewComponent,
  DxoItemViewModule,
  DxoItemComponent,
  DxoItemModule,
  DxoKeyboardNavigationComponent,
  DxoKeyboardNavigationModule,
  DxoLabelComponent,
  DxoLabelModule,
  DxiLayerComponent,
  DxiLayerModule,
  DxiLegendComponent,
  DxiLegendModule,
  DxoLegendComponent,
  DxoLegendModule,
  DxoLineComponent,
  DxoLineModule,
  DxoLinkComponent,
  DxoLinkModule,
  DxoLoadPanelComponent,
  DxoLoadPanelModule,
  DxoLoadingIndicatorComponent,
  DxoLoadingIndicatorModule,
  DxoLookupComponent,
  DxoLookupModule,
  DxoMainToolbarComponent,
  DxoMainToolbarModule,
  DxoMarginComponent,
  DxoMarginModule,
  DxiMarkerComponent,
  DxiMarkerModule,
  DxoMarkerComponent,
  DxoMarkerModule,
  DxoMasterDetailComponent,
  DxoMasterDetailModule,
  DxoMaxRangeComponent,
  DxoMaxRangeModule,
  DxoMediaResizingComponent,
  DxoMediaResizingModule,
  DxiMentionComponent,
  DxiMentionModule,
  DxiMenuItemComponent,
  DxiMenuItemModule,
  DxoMinRangeComponent,
  DxoMinRangeModule,
  DxoMinVisualRangeLengthComponent,
  DxoMinVisualRangeLengthModule,
  DxoMinorGridComponent,
  DxoMinorGridModule,
  DxoMinorTickIntervalComponent,
  DxoMinorTickIntervalModule,
  DxoMinorTickComponent,
  DxoMinorTickModule,
  DxoMyComponent,
  DxoMyModule,
  DxoNodeComponent,
  DxoNodeModule,
  DxoNodesComponent,
  DxoNodesModule,
  DxoNotificationsComponent,
  DxoNotificationsModule,
  DxoOffsetComponent,
  DxoOffsetModule,
  DxoOperationDescriptionsComponent,
  DxoOperationDescriptionsModule,
  DxoOptionsComponent,
  DxoOptionsModule,
  DxoPageSizeComponent,
  DxoPageSizeModule,
  DxoPagerComponent,
  DxoPagerModule,
  DxoPagingComponent,
  DxoPagingModule,
  DxiPaneComponent,
  DxiPaneModule,
  DxoPermissionsComponent,
  DxoPermissionsModule,
  DxoPointComponent,
  DxoPointModule,
  DxoPopupComponent,
  DxoPopupModule,
  DxoPositionComponent,
  DxoPositionModule,
  DxoProjectionComponent,
  DxoProjectionModule,
  DxoPropertiesPanelComponent,
  DxoPropertiesPanelModule,
  DxiRangeComponent,
  DxiRangeModule,
  DxoRangeContainerComponent,
  DxoRangeContainerModule,
  DxoRangeareaComponent,
  DxoRangeareaModule,
  DxoRangebarComponent,
  DxoRangebarModule,
  DxoReductionComponent,
  DxoReductionModule,
  DxoRemoteOperationsComponent,
  DxoRemoteOperationsModule,
  DxoResourceAssignmentsComponent,
  DxoResourceAssignmentsModule,
  DxiResourceComponent,
  DxiResourceModule,
  DxoResourcesComponent,
  DxoResourcesModule,
  DxiRouteComponent,
  DxiRouteModule,
  DxoRowDraggingComponent,
  DxoRowDraggingModule,
  DxiRowComponent,
  DxiRowModule,
  DxoScaleTypeRangeComponent,
  DxoScaleTypeRangeModule,
  DxoScaleComponent,
  DxoScaleModule,
  DxoScatterComponent,
  DxoScatterModule,
  DxoScrollBarComponent,
  DxoScrollBarModule,
  DxoScrollingComponent,
  DxoScrollingModule,
  DxoSearchEditorOptionsComponent,
  DxoSearchEditorOptionsModule,
  DxoSearchPanelComponent,
  DxoSearchPanelModule,
  DxoSearchComponent,
  DxoSearchModule,
  DxoSelectionStyleComponent,
  DxoSelectionStyleModule,
  DxoSelectionComponent,
  DxoSelectionModule,
  DxoSeriesTemplateComponent,
  DxoSeriesTemplateModule,
  DxoShadowComponent,
  DxoShadowModule,
  DxoShowEventComponent,
  DxoShowEventModule,
  DxoShowFirstSubmenuModeComponent,
  DxoShowFirstSubmenuModeModule,
  DxoShowSubmenuModeComponent,
  DxoShowSubmenuModeModule,
  DxoShowComponent,
  DxoShowModule,
  DxoShutterComponent,
  DxoShutterModule,
  DxoSizeComponent,
  DxoSizeModule,
  DxoSliderHandleComponent,
  DxoSliderHandleModule,
  DxoSliderMarkerComponent,
  DxoSliderMarkerModule,
  DxoSmallValuesGroupingComponent,
  DxoSmallValuesGroupingModule,
  DxiSortByGroupSummaryInfoComponent,
  DxiSortByGroupSummaryInfoModule,
  DxoSortingComponent,
  DxoSortingModule,
  DxoSourceComponent,
  DxoSourceModule,
  DxoSplineComponent,
  DxoSplineModule,
  DxoSplineareaComponent,
  DxoSplineareaModule,
  DxoStackedareaComponent,
  DxoStackedareaModule,
  DxoStackedbarComponent,
  DxoStackedbarModule,
  DxoStackedlineComponent,
  DxoStackedlineModule,
  DxoStackedsplineComponent,
  DxoStackedsplineModule,
  DxoStackedsplineareaComponent,
  DxoStackedsplineareaModule,
  DxoStateStoringComponent,
  DxoStateStoringModule,
  DxoStepareaComponent,
  DxoStepareaModule,
  DxoSteplineComponent,
  DxoSteplineModule,
  DxoStockComponent,
  DxoStockModule,
  DxoStoreComponent,
  DxoStoreModule,
  DxiStripLineComponent,
  DxiStripLineModule,
  DxoStripStyleComponent,
  DxoStripStyleModule,
  DxoSubtitleComponent,
  DxoSubtitleModule,
  DxoSubvalueIndicatorComponent,
  DxoSubvalueIndicatorModule,
  DxiTotalItemComponent,
  DxiTotalItemModule,
  DxoSummaryComponent,
  DxoSummaryModule,
  DxoTabPanelOptionsComponent,
  DxoTabPanelOptionsModule,
  DxoTableContextMenuComponent,
  DxoTableContextMenuModule,
  DxoTableResizingComponent,
  DxoTableResizingModule,
  DxoTasksComponent,
  DxoTasksModule,
  DxoTextComponent,
  DxoTextModule,
  DxoTextsComponent,
  DxoTextsModule,
  DxoTickIntervalComponent,
  DxoTickIntervalModule,
  DxoTickComponent,
  DxoTickModule,
  DxoTileComponent,
  DxoTileModule,
  DxoTitleComponent,
  DxoTitleModule,
  DxoToComponent,
  DxoToModule,
  DxoToolbarComponent,
  DxoToolbarModule,
  DxoToolboxComponent,
  DxoToolboxModule,
  DxoTooltipComponent,
  DxoTooltipModule,
  DxoUploadComponent,
  DxoUploadModule,
  DxoUrlComponent,
  DxoUrlModule,
  DxoValidationComponent,
  DxoValidationModule,
  DxiValueAxisComponent,
  DxiValueAxisModule,
  DxoValueAxisComponent,
  DxoValueAxisModule,
  DxoValueErrorBarComponent,
  DxoValueErrorBarModule,
  DxoValueFormatComponent,
  DxoValueFormatModule,
  DxoValueIndicatorComponent,
  DxoValueIndicatorModule,
  DxoVariablesComponent,
  DxoVariablesModule,
  DxoVerticalLineComponent,
  DxoVerticalLineModule,
  DxiViewComponent,
  DxiViewModule,
  DxoViewToolbarComponent,
  DxoViewToolbarModule,
  DxoWidthComponent,
  DxoWidthModule,
  DxoZoomAndPanComponent,
  DxoZoomAndPanModule,
  DxoZoomLevelComponent,
  DxoZoomLevelModule
};
/*! Bundled license information:

devextreme-angular/fesm2015/devextreme-angular-ui-nested.js:
  (*!
   * devextreme-angular
   * Version: 23.2.3
   * Build date: Tue Nov 28 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-angular
   *)
*/
//# sourceMappingURL=chunk-MDQE452F.js.map
